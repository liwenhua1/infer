process analysis
DynamicDispatch$Subtype.bar1 disjuncts:
                           #0: (conditions: (empty)
                                phi: linear_eqs: v5 = a1 +1
                                     && term_eqs: Object.<init>()([v5])=v6∧[a1 +1]=v5
                                     && intervals: v5≥1
                                { roots={ &this=v1, &return=v8 };
                                  mem  ={ v1 -> { * -> v2 },
                                          v2 -> { * -> v3 },
                                          v7 -> { * -> v5 },
                                          v8 -> { * -> v5 } };
                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                          v2 -> { MustBeValid(, None, t=0) },
                                          v5 -> { DynamicType , SourceFile [None],
                                                  UnknownEffect(function `Object.<init>()` with no summary,
                                                                in call to function `Object.<init>()` with no summary at line 177 :t2
                                                                [] ) },
                                          v7 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
                                          v8 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                PRE=[{ roots={ &this=v1 };
                                       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) },
                                               v2 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) } };}]
                                need_closure_specialization=false
                                need_dynamic_type_specialization={ }
                                skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                Topl={len=0;content=
                                       [  ]},
                               conditions= [] timestamp= 11)
                           
                           Non-disj state:
                             copy map: { }, parameter map: { }, destructor checked: { },
                             captured: { }, locked: false,
                             loads: ({ n$2 -> { $irvar0 } },{ $irvar0 -> { line 177 -> { 5 } } }),
                             process analysis end
process analysis
passed to: { }DynamicDispatch$Supertype.foo
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: Object.<init>()([v5])=v6∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &this=v1, &return=v8 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v7 -> { * -> v5 }, v8 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 161 :t2
                                     [] ) },
               v7 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v8 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 11)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$2 -> { $irvar0 } },{ $irvar0 -> { line 161 -> { 5 } } }),
  process analysis end
process analysis
passed to: { }DynamicDispatch.callFoo1 disjuncts:
                                       #0: (conditions: (empty)
                                            phi: linear_eqs: v7 = a1 +1
                                                 && term_eqs: Object.<init>()([v7])=v8∧[a1 +1]=v7
                                                 && intervals: v7≥1
                                            { roots={ &o=v2, &this=v1, &return=v10 };
                                              mem  ={ v1 -> { * -> v3 },
                                                      v2 -> { * -> v5 },
                                                      v3 -> { * -> v4 },
                                                      v5 -> { * -> v6 },
                                                      v9 -> { * -> v7 },
                                                      v10 -> { * -> v7 } };
                                              attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                      v2 -> { MustBeValid(, None, t=0) },
                                                      v3 -> { MustBeValid(, None, t=0) },
                                                      v5 -> { MustBeValid(, None, t=2) },
                                                      v7 -> { DynamicType , SourceFile [None],
                                                              UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Supertype.foo()` at line 259 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ] ) },
                                                      v9 -> { MustBeValid(, None, t=4),
                                                              WrittenTo (4, ) },
                                                      v10 -> { MustBeValid(, None, t=8),
                                                               WrittenTo (8, ) } };}
                                            PRE=[{ roots={ &o=v2, &this=v1 };
                                                   mem  ={ v1 -> { * -> v3 },
                                                           v2 -> { * -> v5 },
                                                           v3 -> { * -> v4 },
                                                           v4 -> { },
                                                           v5 -> { * -> v6 },
                                                           v6 -> { } };
                                                   attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                   MustBeValid(, None, t=0) },
                                                           v2 -> { MustBeInitialized(, t=0),
                                                                   MustBeValid(, None, t=0) },
                                                           v3 -> { MustBeInitialized(, t=0),
                                                                   MustBeValid(, None, t=0) },
                                                           v5 -> { MustBeInitialized(, t=2),
                                                                   MustBeValid(, None, t=2) } };}]
                                            need_closure_specialization=false
                                            need_dynamic_type_specialization=
                                            { v5 }
                                            skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                            Topl={len=0;content=
                                                   [  ]},
                                           conditions= [] timestamp= 13)
                                       
                                       Non-disj state:
                                         copy map: { }, parameter map: { },
                                         destructor checked: { }, captured: { }, 
                                         locked: false,
                                         loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
                                         { o -> { line 259 -> { 1 } },
                                           $irvar0 -> { line 259 -> { 7 } } }),
                                         passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 259 -> { 3 } } } }process analysis end
process analysis
InheritanceDispatch.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 281 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 281 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 281 -> { 2 } } } }DynamicDispatch$WithField.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &t=v2, &this=v1 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { mField -> v7, * -> v4 },
               v7 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 241 :t2
                                     [] ) },
               v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &t=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { mField -> v7, * -> v4 },
                    v4 -> { },
                    v5 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { MustBeValid(, None, t=6) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 12)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { t } },
  { t -> { line 242 -> { 5 } }, this -> { line 241 -> { 1 }, line 242 -> { 4 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 241 -> { 2 } } } }InheritanceDispatch$A.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &this=v1, &this$0=v2 };
       mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 282 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1, &this$0=v2 };
            mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 }, v4 -> { }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 282 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 282 -> { 2 } } } }Specialization$A.callBuildC
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Specialization$C Specialization$A.buildC()([v5])=v7
     { roots={ &a=v2, &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { * -> v6 },
               v8 -> { * -> v7 },
               v9 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=2),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 347 :t3
                                     [] ) },
               v7 -> { PropagateTaintFrom([{v= v5}]), ReturnedFromUnknown([v5]) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v6 },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v5 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 347 -> { 1 } }, $irvar0 -> { line 347 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 347 -> { 3 } } } }DynamicDispatch$Impl.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 138 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 138 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 138 -> { 2 } } } }DynamicDispatch$Impl.foo
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
     { roots={ &this=v1, &return=v5 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 4)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ },{ }),process analysis end
process analysis
 passed to: { }DynamicDispatch.interfaceShouldNotCauseFalseNegativeEasyBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 20)
process analysis end
process analysis

Non-disj state: ⊤InheritanceDispatch$B.<init>1 disjuncts:
                                               #0: (conditions: (empty)
                                                    phi: term_eqs: Object.<init>()([v3])=v6
                                                    { roots={ &this=v1, &this$0=v2 };
                                                      mem  ={ v1 -> { * -> v3 },
                                                              v2 -> { * -> v5 },
                                                              v3 -> { * -> v4 } };
                                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                              v2 -> { MustBeValid(, None, t=0) },
                                                              v3 -> { MustBeValid(, None, t=0),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `InheritanceDispatch$A.<init>(InheritanceDispatch)` at line 288 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 282 :t2
                                                                    [
                                                                    ] ] ) } };}
                                                    PRE=[{ roots={ &this=v1, &this$0=v2 };
                                                           mem  ={ v1 -> { * -> v3 },
                                                                   v2 -> { * -> v5 },
                                                                   v3 -> { * -> v4 },
                                                                   v4 -> { },
                                                                   v5 -> { } };
                                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                   v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                   v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                    need_closure_specialization=false
                                                    need_dynamic_type_specialization=
                                                    { }
                                                    skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                                    Topl={len=0;content=
                                                           [  ]},
                                                   conditions= [] timestamp= 9)
                                               
                                               Non-disj state:
                                                 copy map: { }, parameter map: { },
                                                 destructor checked: { }, 
                                                 captured: { }, locked: false,
                                                 loads: ({ n$0 -> { this }, n$1 -> { this$0 } },
                                                 { this -> { line 288 -> { 1 } },
                                                   this$0 -> { line 288 -> { 2 } } }),
                                                 passed to: { this -> { InheritanceDispatch$A.<init>(InheritanceDispatch) -> { line 288 -> { 3 } } },
                                                              this$0 -> { InheritanceDispatch$A.<init>(InheritanceDispatch) -> { line 288 -> { 3 } } } }process analysis end
process analysis
InheritanceDispatch.getB
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: Object.<init>()([v5])=v7∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v9 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=3),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 297 :t3
                                     [in call to `InheritanceDispatch$A.<init>(InheritanceDispatch)` at line 288 :t3
                                      [in call to function `Object.<init>()` with no summary at line 282 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$1 -> { this }, n$3 -> { $irvar0 } },
  { this -> { line 297 -> { 2 } }, $irvar0 -> { line 297 -> { 7 } } }),
  passed to: { this -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 297 -> { 3 } } } }process analysis end
process analysis
InheritanceDispatch$B.foo
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 52 && term_eqs: 52=v4 && intervals: v4=52
     { roots={ &this=v1, &return=v5 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v4 -> { Invalid ConstantDereference(is assigned to the constant 52) },
               v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 4)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ },{ }),process analysis end
process analysis
 passed to: { }InheritanceDispatch.dispatch_to_B_ok
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v6 = a1 +1 ∧ v9 = 52
          && term_eqs: 52=v9∧Object.<init>()([v6])=v8∧[a1 +1]=v6
          && intervals: v6≥1 ∧ v9=52
     { roots={ &o=v3, &this=v1 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v4 -> { * -> v5 },
               v6 -> { * -> v7 },
               v10 -> { * -> v9 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { s&b (variable `b` declared here at line 304 :t0 ) at line 306,
                       MustBeValid(, None, t=4),
                       WrittenTo (4, ) },
               v3 -> { Uninitialized },
               v4 -> { MustBeValid(, None, t=0) },
               v6 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=8),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `InheritanceDispatch$A InheritanceDispatch.getB()` at line 305 :t3
                                     [in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 297 :t3
                                      [in call to `InheritanceDispatch$A.<init>(InheritanceDispatch)` at line 288 :t3
                                       [in call to function `Object.<init>()` with no summary at line 282 :t2
                                        [] ]
                                       ]
                                      ]
                                     ) },
               v9 -> { Invalid ConstantDereference(is assigned to the constant 52) },
               v10 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v4 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$3 -> { b }, n$6 -> { $irvar0 } },
  { b -> { line 306 -> { 7 } }, this -> { line 305 -> { 1 } }, $irvar0 -> { line 306 -> { 13 } } }),
  passed to: { b -> { int InheritanceDispatch$A.foo() -> { line 306 -> { 9 } } },
               this -> { InheritanceDispatch$A InheritanceDispatch.getB() -> { line 305 -> { 3 } } } }process analysis end
process analysis
InheritanceDispatch.dispatch_to_B_bad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v4 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 28)
process analysis end
process analysis

Non-disj state: ⊤InheritanceDispatch$A.foo1 disjuncts:
                                            #0: (conditions: (empty)
                                                 phi: linear_eqs: v4 = 32
                                                      && term_eqs: 32=v4
                                                      && intervals: v4=32
                                                 { roots={ &this=v1, &return=v5 };
                                                   mem  ={ v1 -> { * -> v2 },
                                                           v2 -> { * -> v3 },
                                                           v5 -> { * -> v4 } };
                                                   attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                           v2 -> { MustBeValid(, None, t=0) },
                                                           v4 -> { Invalid ConstantDereference(is assigned to the constant 32) },
                                                           v5 -> { MustBeValid(, None, t=1),
                                                                   WrittenTo (1, ) } };}
                                                 PRE=[{ roots={ &this=v1 };
                                                        mem  ={ v1 -> { * -> v2 },
                                                                v2 -> { * -> v3 },
                                                                v3 -> { } };
                                                        attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                 need_closure_specialization=false
                                                 need_dynamic_type_specialization=
                                                 { }
                                                 skipped_calls={ }
                                                 Topl={len=0;content=
                                                        [  ]},
                                                conditions= [] timestamp= 4)
                                            
                                            Non-disj state:
                                              copy map: { }, parameter map: { },
                                              destructor checked: { }, 
                                              captured: { }, locked: false, 
                                              loads: ({ },{ }),process analysis end
process analysis
 passed to: { }Specialization$A.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 343 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 343 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 343 -> { 2 } } } }Specialization$A_Good.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A.<init>()` at line 351 :t2
                                     [in call to function `Object.<init>()` with no summary at line 343 :t2
                                      [] ]
                                     ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 351 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Specialization$A.<init>() -> { line 351 -> { 2 } } } }Specialization$Box3.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &this=v1, &f3=v2 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { f3 -> v7, * -> v4 },
               v7 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 398 :t2
                                     [] ) },
               v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &this=v1, &f3=v2 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { f3 -> v7, * -> v4 },
                    v4 -> { },
                    v5 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { MustBeValid(, None, t=6) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 12)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f3 } },
  { this -> { line 398 -> { 1 }, line 399 -> { 4 } }, f3 -> { line 399 -> { 5 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 398 -> { 2 } } } }Specialization$Box2.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &f2=v2, &this=v1 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { f2 -> v7, * -> v4 },
               v7 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 390 :t2
                                     [] ) },
               v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &f2=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { f2 -> v7, * -> v4 },
                    v4 -> { },
                    v5 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { MustBeValid(, None, t=6) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 12)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f2 } },
  { f2 -> { line 391 -> { 5 } }, this -> { line 390 -> { 1 }, line 391 -> { 4 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 390 -> { 2 } } } }Specialization$Box1.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &f1=v2, &this=v1 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { f1 -> v7, * -> v4 },
               v7 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 382 :t2
                                     [] ) },
               v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &f1=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { f1 -> v7, * -> v4 },
                    v4 -> { },
                    v5 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { MustBeValid(, None, t=6) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 12)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f1 } },
  { f1 -> { line 383 -> { 5 } }, this -> { line 382 -> { 1 }, line 383 -> { 4 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 382 -> { 2 } } } }Specialization.callBuildCOnBoxGood
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Specialization$C Specialization$A.buildC()([v11])=v13
     { roots={ &box=v2, &this=v1, &return=v15 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { f1 -> v6 },
               v6 -> { * -> v7 },
               v7 -> { f2 -> v8 },
               v8 -> { * -> v9 },
               v9 -> { f3 -> v10 },
               v10 -> { * -> v11 },
               v11 -> { * -> v12 },
               v14 -> { * -> v13 },
               v15 -> { * -> v13 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=2) },
               v6 -> { MustBeValid(, None, t=2) },
               v7 -> { MustBeValid(, None, t=3) },
               v8 -> { MustBeValid(, None, t=3) },
               v9 -> { MustBeValid(, None, t=4) },
               v10 -> { MustBeValid(, None, t=4) },
               v11 -> { MustBeValid(, None, t=5),
                        UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                      in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 404 :t6
                                      [] ) },
               v13 -> { PropagateTaintFrom([{v= v11}]), ReturnedFromUnknown([v11]) },
               v14 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v15 -> { MustBeValid(, None, t=11), WrittenTo (11, ) } };}
     PRE=[{ roots={ &box=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { f1 -> v6 },
                    v6 -> { * -> v7 },
                    v7 -> { f2 -> v8 },
                    v8 -> { * -> v9 },
                    v9 -> { f3 -> v10 },
                    v10 -> { * -> v11 },
                    v11 -> { * -> v12 },
                    v12 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) },
                    v6 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) },
                    v7 -> { MustBeInitialized(, t=3), MustBeValid(, None, t=3) },
                    v8 -> { MustBeInitialized(, t=3), MustBeValid(, None, t=3) },
                    v9 -> { MustBeInitialized(, t=4), MustBeValid(, None, t=4) },
                    v10 -> { MustBeInitialized(, t=4), MustBeValid(, None, t=4) },
                    v11 -> { MustBeInitialized(, t=5), MustBeValid(, None, t=5) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v11 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 16)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { box }, n$6 -> { $irvar0 } },
  { box -> { line 404 -> { 1 } }, $irvar0 -> { line 404 -> { 10 } } }),process analysis end
process analysis
 
  passed to: { }Specialization$C.<init>1 disjuncts:
                                       #0: (conditions: (empty)
                                            phi: term_eqs: Object.<init>()([v2])=v4
                                            { roots={ &this=v1 };
                                              mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                              attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                      v2 -> { MustBeValid(, None, t=0),
                                                              UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ) } };}
                                            PRE=[{ roots={ &this=v1 };
                                                   mem  ={ v1 -> { * -> v2 },
                                                           v2 -> { * -> v3 },
                                                           v3 -> { } };
                                                   attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                   MustBeValid(, None, t=0) },
                                                           v2 -> { MustBeInitialized(, t=0),
                                                                   MustBeValid(, None, t=0) } };}]
                                            need_closure_specialization=false
                                            need_dynamic_type_specialization=
                                            { }
                                            skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                            Topl={len=0;content=
                                                   [  ]},
                                           conditions= [] timestamp= 7)
                                       
                                       Non-disj state:
                                         copy map: { }, parameter map: { },
                                         destructor checked: { }, captured: { }, 
                                         locked: false,
                                         loads: ({ n$0 -> { this } },
                                         { this -> { line 339 -> { 1 } } }),
                                         passed to: { this -> { Object.<init>() -> { line 339 -> { 2 } } } }process analysis end
process analysis
Specialization$A_Good.buildC
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: Object.<init>()([v5])=v7∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v9 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$C.<init>()` at line 353 :t2
                                     [in call to function `Object.<init>()` with no summary at line 339 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v9 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 11)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$2 -> { $irvar0 } },{ $irvar0 -> { line 353 -> { 5 } } }),
  process analysis end
process analysis
passed to: { }Specialization.callBuildCOnBoxGood1 disjuncts:
                                                  #0: (conditions: (empty)
                                                       phi: linear_eqs: 
                                                            v13 = a1 +1
                                                            && term_eqs: 
                                                            Object.<init>()([v13])=v15
                                                            ∧[a1 +1]=v13
                                                            && intervals: 
                                                            v13≥1
                                                       { roots={ &box=v2, &this=v1, &return=v17 };
                                                         mem  ={ v1 -> { * -> v10 },
                                                                 v2 -> { * -> v3 },
                                                                 v3 -> { f1 -> v4 },
                                                                 v4 -> { * -> v5 },
                                                                 v5 -> { f2 -> v6 },
                                                                 v6 -> { * -> v7 },
                                                                 v7 -> { f3 -> v8 },
                                                                 v8 -> { * -> v9 },
                                                                 v9 -> { * -> v12 },
                                                                 v10 -> { * -> v11 },
                                                                 v13 -> { * -> v14 },
                                                                 v16 -> { * -> v13 },
                                                                 v17 -> { * -> v13 } };
                                                         attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                                 v2 -> { MustBeValid(, None, t=0) },
                                                                 v3 -> { MustBeValid(, None, t=2) },
                                                                 v4 -> { MustBeValid(, None, t=2) },
                                                                 v5 -> { MustBeValid(, None, t=3) },
                                                                 v6 -> { MustBeValid(, None, t=3) },
                                                                 v7 -> { MustBeValid(, None, t=4) },
                                                                 v8 -> { MustBeValid(, None, t=4) },
                                                                 v9 -> { DynamicType , SourceFile [None],
                                                                    MustBeValid(, None, t=5) },
                                                                 v10 -> { MustBeValid(, None, t=0) },
                                                                 v13 -> { DynamicType , SourceFile [None],
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 404 :t6
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                                 v16 -> { MustBeValid(, None, t=7),
                                                                    WrittenTo (7, ) },
                                                                 v17 -> { MustBeValid(, None, t=11),
                                                                    WrittenTo (11, ) } };}
                                                       PRE=[{ roots={ &box=v2, &this=v1 };
                                                              mem  ={ v1 -> { * -> v10 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { f1 -> v4 },
                                                                    v4 -> { * -> v5 },
                                                                    v5 -> { f2 -> v6 },
                                                                    v6 -> { * -> v7 },
                                                                    v7 -> { f3 -> v8 },
                                                                    v8 -> { * -> v9 },
                                                                    v9 -> { * -> v12 },
                                                                    v10 -> { * -> v11 },
                                                                    v11 -> { },
                                                                    v12 -> { } };
                                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v3 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) },
                                                                    v4 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) },
                                                                    v5 -> { MustBeInitialized(, t=3),
                                                                    MustBeValid(, None, t=3) },
                                                                    v6 -> { MustBeInitialized(, t=3),
                                                                    MustBeValid(, None, t=3) },
                                                                    v7 -> { MustBeInitialized(, t=4),
                                                                    MustBeValid(, None, t=4) },
                                                                    v8 -> { MustBeInitialized(, t=4),
                                                                    MustBeValid(, None, t=4) },
                                                                    v9 -> { DynamicType , SourceFile [None],
                                                                    MustBeInitialized(, t=5),
                                                                    MustBeValid(, None, t=5) },
                                                                    v10 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                       need_closure_specialization=false
                                                       need_dynamic_type_specialization=
                                                       { }
                                                       skipped_calls=
                                                       { Object.<init>() -> call to skipped function occurs here }
                                                       Topl={len=0;content=
                                                              [  ]},
                                                      conditions= [] timestamp= 16)
                                                  
                                                  Non-disj state:
                                                    copy map: { }, parameter map: { },
                                                    destructor checked: { }, 
                                                    captured: { }, locked: false,
                                                    loads: ({ n$0 -> { box }, n$6 -> { $irvar0 } },
                                                    { box -> { line 404 -> { 1 } },
                                                      $irvar0 -> { line 404 -> { 10 } } }),
                                                    process analysis end
process analysis
passed to: { }Specialization.buildCOnBoxAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v10 = a2 +1 ∧ v16 = a3 +1 ∧ v22 = a4 +1 ∧ v28 = a5 +1
          && term_eqs: Object.<init>()([v5])=v7∧Object.<init>()([v10])=v13
                       ∧Object.<init>()([v16])=v19∧Object.<init>()([v22])=v25
                       ∧Object.<init>()([v28])=v30∧[a1 +1]=v5∧[a2 +1]=v10
                       ∧[a3 +1]=v16∧[a4 +1]=v22∧[a5 +1]=v28
          && intervals: v5≥1 ∧ v10≥1 ∧ v16≥1 ∧ v22≥1 ∧ v28≥1
     { roots={ &this=v1, &return=v34 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v10 -> { f3 -> v11, * -> v12 },
               v11 -> { * -> v5 },
               v14 -> { * -> v10 },
               v16 -> { f2 -> v17, * -> v18 },
               v17 -> { * -> v10 },
               v20 -> { * -> v16 },
               v22 -> { f1 -> v23, * -> v24 },
               v23 -> { * -> v16 },
               v26 -> { * -> v22 },
               v28 -> { f -> v32, * -> v29 },
               v31 -> { * -> v28 },
               v32 -> { * -> v33 },
               v34 -> { * -> v33 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 412 :t2
                                     [in call to `Specialization$A.<init>()` at line 351 :t2
                                      [in call to function `Object.<init>()` with no summary at line 343 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v10 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=7),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box3.<init>(Specialization$A)` at line 412 :t7
                                      [in call to function `Object.<init>()` with no summary at line 398 :t2
                                       [] ]
                                      ) },
               v11 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v16 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=13),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box2.<init>(Specialization$Box3)` at line 412 :t13
                                      [in call to function `Object.<init>()` with no summary at line 390 :t2
                                       [] ]
                                      ) },
               v17 -> { MustBeValid(, None, t=13), WrittenTo (13, ) },
               v20 -> { MustBeValid(, None, t=14), WrittenTo (14, ) },
               v22 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=19),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box1.<init>(Specialization$Box2)` at line 412 :t19
                                      [in call to function `Object.<init>()` with no summary at line 382 :t2
                                       [] ]
                                      ) },
               v23 -> { MustBeValid(, None, t=19), WrittenTo (19, ) },
               v26 -> { MustBeValid(, None, t=20), WrittenTo (20, ) },
               v28 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=32),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)` at line 412 :t26
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 404 :t6
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Object.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v31 -> { MustBeValid(, None, t=27), WrittenTo (27, ) },
               v32 -> { MustBeValid(, None, t=32) },
               v34 -> { MustBeValid(, None, t=33), WrittenTo (33, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 38)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$3 -> { $irvar0 },
            n$6 -> { $irvar1 },
            n$9 -> { $irvar2 },
            n$11 -> { this },
            n$13 -> { $irvar3 },
            n$15 -> { $irvar4 } },
  { $irvar4 -> { line 412 -> { 31 } },
    $irvar1 -> { line 412 -> { 12 } },
    $irvar3 -> { line 412 -> { 25 } },
    $irvar2 -> { line 412 -> { 18 } },
    this -> { line 412 -> { 23 } },
    $irvar0 -> { line 412 -> { 6 } } }),
  passed to: { $irvar1 -> { Specialization$Box2.<init>(Specialization$Box3) -> { line 412 -> { 13 } } },
               $irvar3 -> { Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1) -> { line 412 -> { 26 } } },
               $irvar2 -> { Specialization$Box1.<init>(Specialization$Box2) -> { line 412 -> { 19 } } },
               this -> { Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1) -> { line 412 -> { 26 } } },
               $irvar0 -> { Specialization$Box3.<init>(Specialization$A) -> { line 412 -> { 7 } } } }process analysis end
process analysis
Specialization.callBuildCGood
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Specialization$C Specialization$A.buildC()([v5])=v7
     { roots={ &a=v2, &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { * -> v6 },
               v8 -> { * -> v7 },
               v9 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=2),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 367 :t3
                                     [] ) },
               v7 -> { PropagateTaintFrom([{v= v5}]), ReturnedFromUnknown([v5]) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v6 },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v5 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 367 -> { 1 } }, $irvar0 -> { line 367 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 367 -> { 3 } } } }Specialization.callBuildCGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v7 = a1 +1
          && term_eqs: Object.<init>()([v7])=v9∧[a1 +1]=v7
          && intervals: v7≥1
     { roots={ &a=v2, &this=v1, &return=v11 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v3 },
               v3 -> { * -> v6 },
               v4 -> { * -> v5 },
               v7 -> { * -> v8 },
               v10 -> { * -> v7 },
               v11 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { DynamicType , SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$C Specialization$A_Good.buildC()` at line 367 :t3
                                     [in call to `Specialization$C.<init>()` at line 353 :t2
                                      [in call to function `Object.<init>()` with no summary at line 339 :t2
                                       [] ]
                                      ]
                                     ) },
               v10 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v11 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v3 },
                    v3 -> { * -> v6 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 367 -> { 1 } }, $irvar0 -> { line 367 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 367 -> { 3 } } } }Specialization.buildCAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v10 = a2 +1
          && term_eqs: Object.<init>()([v5])=v7∧Object.<init>()([v10])=v12
                       ∧[a1 +1]=v5∧[a2 +1]=v10
          && intervals: v5≥1 ∧ v10≥1
     { roots={ &this=v1, &return=v16 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v10 -> { f -> v14, * -> v11 },
               v13 -> { * -> v10 },
               v14 -> { * -> v15 },
               v16 -> { * -> v15 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 375 :t2
                                     [in call to `Specialization$A.<init>()` at line 351 :t2
                                      [in call to function `Object.<init>()` with no summary at line 343 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v10 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=14),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callBuildCGood(Specialization$A)` at line 375 :t8
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 367 :t3
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Object.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v13 -> { MustBeValid(, None, t=9), WrittenTo (9, ) },
               v14 -> { MustBeValid(, None, t=14) },
               v16 -> { MustBeValid(, None, t=15), WrittenTo (15, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { $irvar0 }, n$6 -> { $irvar1 } },
  { $irvar1 -> { line 375 -> { 13 } },
    this -> { line 375 -> { 5 } },
    $irvar0 -> { line 375 -> { 7 } } }),
  passed to: { this -> { Specialization$C Specialization.callBuildCGood(Specialization$A) -> { line 375 -> { 8 } } },
               $irvar0 -> { Specialization$C Specialization.callBuildCGood(Specialization$A) -> { line 375 -> { 8 } } } }process analysis end
process analysis
DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK
1 disjuncts:
#0: (conditions: (empty)
     phi: term_eqs: Object DynamicDispatch$Interface.foo()([v2])=v4∧String Object.toString()([v4])=v7
     { roots={ &i=v1 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v4 -> { * -> v6 },
               v5 -> { * -> v4 },
               v8 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=2),
                       UnknownEffect(function `Object DynamicDispatch$Interface.foo()` with no summary,
                                     in call to function `Object DynamicDispatch$Interface.foo()` with no summary at line 152 :t3
                                     [] ) },
               v4 -> { MustBeValid(, None, t=8),
                       PropagateTaintFrom([{v= v2}]),
                       ReturnedFromUnknown([v2]),
                       UnknownEffect(function `String Object.toString()` with no summary,
                                     in call to function `String Object.toString()` with no summary at line 152 :t9
                                     [] ) },
               v5 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v7 -> { PropagateTaintFrom([{v= v4}]), ReturnedFromUnknown([v4]) },
               v8 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &i=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2, v4 }
     skipped_calls={ Object DynamicDispatch$Interface.foo() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 16)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { i }, n$3 -> { $irvar0 } },
  { i -> { line 152 -> { 1 } }, $irvar0 -> { line 152 -> { 7 } } }),
  passed to: { i -> { Object DynamicDispatch$Interface.foo() -> { line 152 -> { 3 } } },
               $irvar0 -> { String Object.toString() -> { line 152 -> { 9 } } } }process analysis end
process analysis
DynamicDispatch$Supertype.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 159 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 159 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 159 -> { 2 } } } }DynamicDispatch$Subtype.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Supertype.<init>()` at line 169 :t2
                                     [in call to function `Object.<init>()` with no summary at line 159 :t2
                                      [] ]
                                     ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 169 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { DynamicDispatch$Supertype.<init>() -> { line 169 -> { 2 } } } }DynamicDispatch$Subtype.foo
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
     { roots={ &this=v1, &return=v5 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 4)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ },{ }),process analysis end
process analysis
 passed to: { }DynamicDispatch.dynamicDispatchShouldNotCauseFalseNegativeEasyBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 20)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch.callWithBadImplementationBad_FN1 disjuncts:
                                                                  #0: 
                                                                  (conditions: (empty)
                                                                   phi: 
                                                                   term_eqs: 
                                                                   Object DynamicDispatch$Interface.foo()([v2])=v4
                                                                   ∧String Object.toString()([v4])=v5
                                                                   { roots=
                                                                    { &impl=v1 };
                                                                    mem  =
                                                                    { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 } };
                                                                    attrs=
                                                                    { v1 -> { MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `Object DynamicDispatch$Interface.foo()` with no summary,
                                                                    in call to `void DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(DynamicDispatch$Interface)` at line 156 :t2
                                                                    [
                                                                    in call to function `Object DynamicDispatch$Interface.foo()` with no summary at line 152 :t3
                                                                    [
                                                                    ] ] ) } };}
                                                                   PRE=[{
                                                                    roots=
                                                                    { &impl=v1 };
                                                                    mem  =
                                                                    { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                                    attrs=
                                                                    { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                                   need_closure_specialization=false
                                                                   need_dynamic_type_specialization=
                                                                   { v2 }
                                                                   skipped_calls=
                                                                   { Object DynamicDispatch$Interface.foo() -> call to skipped function occurs here,
                                                                    String Object.toString() -> call to skipped function occurs here }
                                                                   Topl=
                                                                   {len=0;content=
                                                                    [  ]},
                                                                  conditions= [] timestamp= 7)
                                                                  
                                                                  Non-disj state:
                                                                    copy map: { },
                                                                    parameter map: { },
                                                                    destructor checked: { },
                                                                    captured: { }, 
                                                                    locked: false,
                                                                    loads: (
                                                                    { n$0 -> { impl } },
                                                                    { impl -> { line 156 -> { 1 } } }),
                                                                    passed to: 
                                                                    { impl -> { void DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(DynamicDispatch$Interface) -> { line 156 -> { 2 } } } }process analysis end
process analysis
Specialization.callBuildCTwiceGood
2 disjuncts:
#0: (conditions: {[v6] = 0}
     phi: var_eqs: v6=v8 && linear_eqs: v6 = 0 && term_eqs: 0=v6 && intervals: v6=null ∧ v8=null
     { roots={ &a2=v3, &this=v1, &return=v14, &a1=v2 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v9 -> { * -> v8 },
               v14 -> { * -> v6 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { MustBeValid(, None, t=0) },
               v6 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v9 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v6 },
                    v3 -> { * -> v7 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v6 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: {[v6] ≠ 0}
     phi: term_eqs: Specialization$C Specialization$A.buildC()([v7])=v11
          && intervals: v6≠null
          && atoms: {[v6] ≠ 0}
     { roots={ &a2=v3, &this=v1, &return=v15, &a1=v2 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v7 -> { * -> v10 },
               v12 -> { * -> v11 },
               v13 -> { * -> v11 },
               v15 -> { * -> v11 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { MustBeValid(, None, t=6),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 442 :t7
                                     [] ) },
               v11 -> { PropagateTaintFrom([{v= v7}]), ReturnedFromUnknown([v7]) },
               v12 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v13 -> { MustBeValid(, None, t=12), WrittenTo (12, ) },
               v15 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v6 },
                    v3 -> { * -> v7 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { },
                    v7 -> { * -> v10 },
                    v10 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v6 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) },
                    v7 -> { MustBeInitialized(, t=6), MustBeValid(, None, t=6) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v7 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$1 -> { a2 }, n$4 -> { $irvar0 }, n$5 -> { $T0_12 } },
  { a2 -> { line 442 -> { 5 } },
    $irvar0 -> { line 442 -> { 11 } },
    $T0_12 -> { line 442 -> { 7, 16 } },
    a1 -> { line 442 -> { 1 } } }),
  process analysis end
process analysis
passed to: { a2 -> { Specialization$C Specialization$A.buildC() -> { line 442 -> { 7 } } } }Specialization.callBuildCTwiceGood
2 disjuncts:
#0: (conditions: {[v7] = 0}
     phi: var_eqs: v7=v8 && linear_eqs: v7 = 0 && term_eqs: 0=v7 && intervals: v7=null ∧ v8=null
     { roots={ &a2=v3, &this=v1, &return=v16, &a1=v2 };
       mem  ={ v1 -> { * -> v5 },
               v2 -> { * -> v7 },
               v3 -> { * -> v4 },
               v5 -> { * -> v6 },
               v9 -> { * -> v8 },
               v16 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None] },
               v5 -> { MustBeValid(, None, t=0) },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v9 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v16 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v5 },
                    v2 -> { * -> v7 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v6 },
                    v6 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None] },
                    v5 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: {[v7] ≠ 0}
     phi: linear_eqs: v11 = a1 +1
          && term_eqs: Object.<init>()([v11])=v13∧[a1 +1]=v11
          && intervals: v7≠null ∧ v11≥1
          && atoms: {[v7] ≠ 0}
     { roots={ &a2=v3, &this=v1, &return=v17, &a1=v2 };
       mem  ={ v1 -> { * -> v5 },
               v2 -> { * -> v7 },
               v3 -> { * -> v4 },
               v4 -> { * -> v10 },
               v5 -> { * -> v6 },
               v11 -> { * -> v12 },
               v14 -> { * -> v11 },
               v15 -> { * -> v11 },
               v17 -> { * -> v11 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=6) },
               v5 -> { MustBeValid(, None, t=0) },
               v11 -> { DynamicType , SourceFile [None],
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization$A_Good.buildC()` at line 442 :t7
                                      [in call to `Specialization$C.<init>()` at line 353 :t2
                                       [in call to function `Object.<init>()` with no summary at line 339 :t2
                                        [] ]
                                       ]
                                      ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v15 -> { MustBeValid(, None, t=12), WrittenTo (12, ) },
               v17 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v5 },
                    v2 -> { * -> v7 },
                    v3 -> { * -> v4 },
                    v4 -> { * -> v10 },
                    v5 -> { * -> v6 },
                    v6 -> { },
                    v7 -> { },
                    v10 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=6),
                            MustBeValid(, None, t=6) },
                    v5 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$1 -> { a2 }, n$4 -> { $irvar0 }, n$5 -> { $T0_12 } },
  { a2 -> { line 442 -> { 5 } },
    $irvar0 -> { line 442 -> { 11 } },
    $T0_12 -> { line 442 -> { 7, 16 } },
    a1 -> { line 442 -> { 1 } } }),
  process analysis end
process analysis
passed to: { a2 -> { Specialization$C Specialization$A.buildC() -> { line 442 -> { 7 } } } }Specialization.buildCAndDerefNeedPartialSpecializationGood
2 disjuncts:
#0: (conditions: {[v5] ≠ 0}
     phi: linear_eqs: v7 = a1 +1 ∧ v12 = a2 +1
          && term_eqs: Object.<init>()([v7])=v9∧Object.<init>()([v12])=v14
                       ∧[a1 +1]=v7∧[a2 +1]=v12
          && intervals: v5≠null ∧ v7≥1 ∧ v12≥1
          && atoms: {[v5] ≠ 0}
     { roots={ &a=v2, &this=v1, &return=v19 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v7 -> { * -> v8 },
               v10 -> { * -> v7 },
               v12 -> { f -> v17, * -> v13 },
               v15 -> { * -> v12 },
               v17 -> { * -> v18 },
               v19 -> { * -> v18 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v7 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 450 :t2
                                     [in call to `Specialization$A.<init>()` at line 351 :t2
                                      [in call to function `Object.<init>()` with no summary at line 343 :t2
                                       [] ]
                                      ]
                                     ) },
               v10 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v12 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=16),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` at line 450 :t9
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 442 :t7
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Object.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v15 -> { MustBeValid(, None, t=10), WrittenTo (10, ) },
               v17 -> { MustBeValid(, None, t=16) },
               v19 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 }, v4 -> { }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v3 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)
#1: ({LatentAbortProgram(line 450: `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 450) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v5]:Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A);
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: {[v5] = 0} phi: linear_eqs: v5 = 0 && term_eqs: 0=v5 && intervals: v5=null
    { roots={ &a=v2, &this=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
      attrs={ v5 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
    PRE=[{ roots={ &a=v2, &this=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ v3 }
    skipped_calls={ Object.<init>() -> call to skipped function occurs here }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { a }, n$5 -> { $irvar0 }, n$7 -> { $irvar1 } },
  { $irvar1 -> { line 450 -> { 15 } },
    a -> { line 450 -> { 7 } },
    this -> { line 450 -> { 5 } },
    $irvar0 -> { line 450 -> { 8 } } }),
  passed to: { a -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } },
               this -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } },
               $irvar0 -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } } }process analysis end
process analysis
DynamicDispatch.variadicMethod
2 disjuncts:
#0: (conditions: {[a1] = 0}
     phi: var_eqs: a1=v7=v8
          && linear_eqs: a1 = 0
          && term_eqs: 0=a1
          && intervals: a1=0 ∧ v7≥0 ∧ v8=null
     { roots={ &this=v1, &args=v2, &return=v9 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { * -> v6 },
               v9 -> { * -> v8 } };
       attrs={ a1 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=2) },
               v9 -> { MustBeValid(, None, t=7), WrittenTo (7, ) } };}
     PRE=[{ roots={ &this=v1, &args=v2 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v6 },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 10)
#1: (conditions: {[a2] ≠ 0}
     phi: var_eqs: a2=v11
          && linear_eqs: v8 = 0 ∧ v15 = a3 +1
          && term_eqs: 0=v8∧Object.<init>()([v15])=v16∧[a3 +1]=v15
          && intervals: a2≠0 ∧ v8=0 ∧ v11≥0 ∧ v15≥1
          && atoms: {[a2] ≠ 0}
     { roots={ &this=v1, &args=v2, &return=v18 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { [v8] -> v12, * -> v10 },
               v12 -> { * -> v13 },
               v13 -> { * -> v14 },
               v17 -> { * -> v15 },
               v18 -> { * -> v15 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=2) },
               v8 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v12 -> { MustBeValid(, None, t=8) },
               v13 -> { MustBeValid(, None, t=9) },
               v15 -> { DynamicType , SourceFile [None],
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Object DynamicDispatch$Supertype.foo()` at line 271 :t10
                                      [in call to function `Object.<init>()` with no summary at line 161 :t2
                                       [] ]
                                      ) },
               v17 -> { MustBeValid(, None, t=11), WrittenTo (11, ) },
               v18 -> { MustBeValid(, None, t=15), WrittenTo (15, ) } };}
     PRE=[{ roots={ &this=v1, &args=v2 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { [v8] -> v12, * -> v10 },
                    v10 -> { },
                    v12 -> { * -> v13 },
                    v13 -> { * -> v14 },
                    v14 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) },
                    v12 -> { MustBeInitialized(, t=8), MustBeValid(, None, t=8) },
                    v13 -> { MustBeInitialized(, t=9), MustBeValid(, None, t=9) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v13 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { args }, n$3 -> { args }, n$8 -> { $irvar0 } },
  { $irvar0 -> { line 271 -> { 14 } }, args -> { line 268 -> { 1 }, line 271 -> { 6 } } }),
  process analysis end
process analysis
passed to: { args -> { __get_array_length -> { line 268 -> { 3 } } } }Specialization$A_Bad.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A.<init>()` at line 358 :t2
                                     [in call to function `Object.<init>()` with no summary at line 343 :t2
                                      [] ]
                                     ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 358 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Specialization$A.<init>() -> { line 358 -> { 2 } } } }Specialization$A_Bad.buildC
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
     { roots={ &this=v1, &return=v5 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 4)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ },{ }),process analysis end
process analysis
 passed to: { }Specialization.callBuildCTwiceGood
2 disjuncts:
#0: (conditions: {[v7] = 0}
     phi: var_eqs: v7=v8 && linear_eqs: v7 = 0 && term_eqs: 0=v7 && intervals: v7=null ∧ v8=null
     { roots={ &a2=v3, &this=v1, &return=v14, &a1=v2 };
       mem  ={ v1 -> { * -> v5 },
               v2 -> { * -> v7 },
               v3 -> { * -> v4 },
               v5 -> { * -> v6 },
               v9 -> { * -> v8 },
               v14 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None] },
               v5 -> { MustBeValid(, None, t=0) },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v9 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v5 },
                    v2 -> { * -> v7 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v6 },
                    v6 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None] },
                    v5 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: {[v7] ≠ 0}
     phi: linear_eqs: v11 = 0
          && term_eqs: 0=v11
          && intervals: v7≠null ∧ v11=null
          && atoms: {[v7] ≠ 0}
     { roots={ &a2=v3, &this=v1, &return=v15, &a1=v2 };
       mem  ={ v1 -> { * -> v5 },
               v2 -> { * -> v7 },
               v3 -> { * -> v4 },
               v4 -> { * -> v10 },
               v5 -> { * -> v6 },
               v12 -> { * -> v11 },
               v13 -> { * -> v11 },
               v15 -> { * -> v11 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=6) },
               v5 -> { MustBeValid(, None, t=0) },
               v11 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v12 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v13 -> { MustBeValid(, None, t=12), WrittenTo (12, ) },
               v15 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v5 },
                    v2 -> { * -> v7 },
                    v3 -> { * -> v4 },
                    v4 -> { * -> v10 },
                    v5 -> { * -> v6 },
                    v6 -> { },
                    v7 -> { },
                    v10 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=6),
                            MustBeValid(, None, t=6) },
                    v5 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$1 -> { a2 }, n$4 -> { $irvar0 }, n$5 -> { $T0_12 } },
  { a2 -> { line 442 -> { 5 } },
    $irvar0 -> { line 442 -> { 11 } },
    $T0_12 -> { line 442 -> { 7, 16 } },
    a1 -> { line 442 -> { 1 } } }),
  process analysis end
process analysis
passed to: { a2 -> { Specialization$C Specialization$A.buildC() -> { line 442 -> { 7 } } } }Specialization.buildCAndDerefNeedPartialSpecializationBad
2 disjuncts:
#0: ({LatentAbortProgram(line 446: `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 446) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v12]:Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A);
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: {[v5] ≠ 0} phi: intervals: v5≠null && atoms: {[v5] ≠ 0}
    { roots={ &a=v2, &this=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
      attrs={ };}
    PRE=[{ roots={ &a=v2, &this=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ v3 }
    skipped_calls={ Object.<init>() -> call to skipped function occurs here }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 22)
#1: ({LatentAbortProgram(line 446: `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 446) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v5]:Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A);
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: {[v5] = 0} phi: linear_eqs: v5 = 0 && term_eqs: 0=v5 && intervals: v5=null
    { roots={ &a=v2, &this=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
      attrs={ v5 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
    PRE=[{ roots={ &a=v2, &this=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ v3 }
    skipped_calls={ Object.<init>() -> call to skipped function occurs here }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 22)
process analysis end
process analysis

Non-disj state: ⊤Specialization.<init>1 disjuncts:
                                        #0: (conditions: (empty)
                                             phi: term_eqs: Object.<init>()([v2])=v4
                                             { roots={ &this=v1 };
                                               mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                               attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                       v2 -> { MustBeValid(, None, t=0),
                                                               UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 337 :t2
                                                                    [
                                                                    ] ) } };}
                                             PRE=[{ roots={ &this=v1 };
                                                    mem  ={ v1 -> { * -> v2 },
                                                            v2 -> { * -> v3 },
                                                            v3 -> { } };
                                                    attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                            v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                             need_closure_specialization=false
                                             need_dynamic_type_specialization=
                                             { }
                                             skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                             Topl={len=0;content=
                                                    [  ]},
                                            conditions= [] timestamp= 7)
                                        
                                        Non-disj state:
                                          copy map: { }, parameter map: { },
                                          destructor checked: { }, captured: { }, 
                                          locked: false,
                                          loads: ({ n$0 -> { this } },
                                          { this -> { line 337 -> { 1 } } }),
                                          passed to: { this -> { Object.<init>() -> { line 337 -> { 2 } } } }process analysis end
process analysis
Specialization.callBuildCWithEmptyPaths
2 disjuncts:
#0: (conditions: {[v7] ≠ 0}
     phi: term_eqs: Specialization$C Specialization$A.buildC()([v6])=v9
          && intervals: v7≠0
          && atoms: {is_int([v7]) = 1}∧{[v7] ≠ 0}
     { roots={ &b=v3, &a=v2, &this=v1, &return=v14 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v6 -> { * -> v8 },
               v10 -> { * -> v9 },
               v11 -> { * -> v9 },
               v14 -> { * -> v9 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { MustBeValid(, None, t=0) },
               v6 -> { MustBeValid(, None, t=6),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 429 :t7
                                     [] ) },
               v9 -> { PropagateTaintFrom([{v= v6}]), ReturnedFromUnknown([v6]) },
               v10 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v11 -> { MustBeValid(, None, t=12), WrittenTo (12, ) },
               v14 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &b=v3, &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v6 },
                    v3 -> { * -> v7 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { * -> v8 },
                    v7 -> { },
                    v8 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v6 -> { MustBeInitialized(, t=6), MustBeValid(, None, t=6) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean), line 429, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v6 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)
#1: (conditions: {[v7] = 0}
     phi: var_eqs: v7=v12
          && linear_eqs: v7 = 0
          && term_eqs: 0=v7
          && intervals: v7=0 ∧ v12=null
          && atoms: {is_int([v7]) = 1}
     { roots={ &b=v3, &a=v2, &this=v1, &return=v15 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v13 -> { * -> v12 },
               v15 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v13 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v15 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &b=v3, &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v6 },
                    v3 -> { * -> v7 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean), line 429, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { b }, n$1 -> { a }, n$4 -> { $irvar0 }, n$5 -> { $T0_12 } },
  { b -> { line 429 -> { 1 } },
    a -> { line 429 -> { 5 } },
    $irvar0 -> { line 429 -> { 11 } },
    $T0_12 -> { line 429 -> { 7, 16 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 429 -> { 7 } } } }InheritanceDispatch$C.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
     { roots={ &this=v1, &this$0=v2 };
       mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 294 :t3
                                     [in call to `InheritanceDispatch$A.<init>(InheritanceDispatch)` at line 288 :t3
                                      [in call to function `Object.<init>()` with no summary at line 282 :t2
                                       [] ]
                                      ]
                                     ) } };}
     PRE=[{ roots={ &this=v1, &this$0=v2 };
            mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v5 }, v3 -> { * -> v4 }, v4 -> { }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 9)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$1 -> { this$0 } },
  { this -> { line 294 -> { 1 } }, this$0 -> { line 294 -> { 2 } } }),
  passed to: { this -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 294 -> { 3 } } },
               this$0 -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 294 -> { 3 } } } }process analysis end
process analysis
Specialization.callCallBuildC
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Specialization$C Specialization$A.buildC()([v7])=v10
     { roots={ &a2=v3, &this=v1, &return=v12, &a1=v2 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v6 -> { * -> v8 },
               v7 -> { * -> v9 },
               v11 -> { * -> v10 },
               v12 -> { * -> v10 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { MustBeValid(, None, t=0) },
               v6 -> { MustBeValid(, None, t=2) },
               v7 -> { MustBeValid(, None, t=4),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                     [in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 347 :t3
                                      [] ]
                                     ) },
               v10 -> { PropagateTaintFrom([{v= v7}]), ReturnedFromUnknown([v7]) },
               v11 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v12 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v6 },
                    v3 -> { * -> v7 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { * -> v8 },
                    v7 -> { * -> v9 },
                    v8 -> { },
                    v9 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v6 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) },
                    v7 -> { MustBeInitialized(, t=4), MustBeValid(, None, t=4) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v6, v7 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 15)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$2 -> { a2 }, n$4 -> { $irvar0 } },
  { a2 -> { line 417 -> { 3 } }, $irvar0 -> { line 417 -> { 9 } }, a1 -> { line 417 -> { 1 } } }),
  passed to: { a2 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } },
               a1 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } } }process analysis end
process analysis
Specialization$A.callBuildC
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v7 = 0 && term_eqs: 0=v7 && intervals: v7=null
     { roots={ &a=v2, &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v3 },
               v3 -> { * -> v6 },
               v4 -> { * -> v5 },
               v8 -> { * -> v7 },
               v9 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v3 },
                    v3 -> { * -> v6 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 347 -> { 1 } }, $irvar0 -> { line 347 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 347 -> { 3 } } } }Specialization.callCallBuildC
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v12 = 0 && term_eqs: 0=v12 && intervals: v12=null
     { roots={ &a2=v3, &this=v1, &return=v14, &a1=v2 };
       mem  ={ v1 -> { * -> v6 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v4 -> { * -> v11 },
               v5 -> { * -> v8 },
               v6 -> { * -> v7 },
               v13 -> { * -> v12 },
               v14 -> { * -> v12 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=4) },
               v5 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v6 -> { MustBeValid(, None, t=0) },
               v12 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v13 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v14 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v6 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { * -> v11 },
                    v5 -> { * -> v8 },
                    v6 -> { * -> v7 },
                    v7 -> { },
                    v8 -> { },
                    v11 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=4),
                            MustBeValid(, None, t=4) },
                    v5 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v6 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 15)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$2 -> { a2 }, n$4 -> { $irvar0 } },
  { a2 -> { line 417 -> { 3 } }, $irvar0 -> { line 417 -> { 9 } }, a1 -> { line 417 -> { 1 } } }),
  passed to: { a2 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } },
               a1 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } } }process analysis end
process analysis
Specialization.buildCTransitivelyAndDerefBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v2 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 26)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch.callFoo1 disjuncts:
                                          #0: (conditions: (empty)
                                               phi: linear_eqs: v7 = 0
                                                    && term_eqs: 0=v7
                                                    && intervals: v7=null
                                               { roots={ &o=v2, &this=v1, &return=v9 };
                                                 mem  ={ v1 -> { * -> v4 },
                                                         v2 -> { * -> v3 },
                                                         v3 -> { * -> v6 },
                                                         v4 -> { * -> v5 },
                                                         v8 -> { * -> v7 },
                                                         v9 -> { * -> v7 } };
                                                 attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                         v2 -> { MustBeValid(, None, t=0) },
                                                         v3 -> { DynamicType , SourceFile [None],
                                                                 MustBeValid(, None, t=2) },
                                                         v4 -> { MustBeValid(, None, t=0) },
                                                         v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                         v8 -> { MustBeValid(, None, t=4),
                                                                 WrittenTo (4, ) },
                                                         v9 -> { MustBeValid(, None, t=8),
                                                                 WrittenTo (8, ) } };}
                                               PRE=[{ roots={ &o=v2, &this=v1 };
                                                      mem  ={ v1 -> { * -> v4 },
                                                              v2 -> { * -> v3 },
                                                              v3 -> { * -> v6 },
                                                              v4 -> { * -> v5 },
                                                              v5 -> { },
                                                              v6 -> { } };
                                                      attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                              v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                              v3 -> { DynamicType , SourceFile [None],
                                                                    MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) },
                                                              v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                               need_closure_specialization=false
                                               need_dynamic_type_specialization=
                                               { }
                                               skipped_calls={ }
                                               Topl={len=0;content=
                                                      [  ]},
                                              conditions= [] timestamp= 13)
                                          
                                          Non-disj state:
                                            copy map: { }, parameter map: { },
                                            destructor checked: { }, 
                                            captured: { }, locked: false,
                                            loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
                                            { o -> { line 259 -> { 1 } },
                                              $irvar0 -> { line 259 -> { 7 } } }),
                                            passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 259 -> { 3 } } } }process analysis end
process analysis
DynamicDispatch.dynamicResolutionWithPrivateMethodBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v3 }, v3 -> { * -> v4 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v3 }, v3 -> { * -> v4 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v3 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 22)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch$Supertype.bar1 disjuncts:
                                                #0: (conditions: (empty)
                                                     phi: linear_eqs: 
                                                          v4 = 0
                                                          && term_eqs: 
                                                          0=v4
                                                          && intervals: 
                                                          v4=null
                                                     { roots={ &this=v1, &return=v5 };
                                                       mem  ={ v1 -> { * -> v2 },
                                                               v2 -> { * -> v3 },
                                                               v5 -> { * -> v4 } };
                                                       attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                               v2 -> { MustBeValid(, None, t=0) },
                                                               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                               v5 -> { MustBeValid(, None, t=1),
                                                                    WrittenTo (1, ) } };}
                                                     PRE=[{ roots={ &this=v1 };
                                                            mem  ={ v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                            attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                     need_closure_specialization=false
                                                     need_dynamic_type_specialization=
                                                     { }
                                                     skipped_calls={ }
                                                     Topl={len=0;content=
                                                            [  ]},
                                                    conditions= [] timestamp= 4)
                                                
                                                Non-disj state:
                                                  copy map: { }, parameter map: { },
                                                  destructor checked: { }, 
                                                  captured: { }, locked: false, 
                                                  loads: ({ },{ }),process analysis end
process analysis
 passed to: { }DynamicDispatch.dynamicDispatchWrapperBar
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
     { roots={ &o=v1, &return=v6 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 }, v6 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=2) },
               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v5 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v6 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 210 -> { 1 } }, $irvar0 -> { line 210 -> { 7 } } }),
  process analysis end
process analysis
passed to: { o -> { Object DynamicDispatch$Supertype.bar() -> { line 210 -> { 3 } } } }DynamicDispatch.dynamicDispatchWrapperBar
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
     { roots={ &o=v1, &return=v6 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v5 -> { * -> v4 }, v6 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v5 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v6 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 210 -> { 1 } }, $irvar0 -> { line 210 -> { 7 } } }),
  process analysis end
process analysis
passed to: { o -> { Object DynamicDispatch$Supertype.bar() -> { line 210 -> { 3 } } } }DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 19)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch.dynamicDispatchWrapperFoo1 disjuncts:
                                                            #0: (conditions: (empty)
                                                                 phi: 
                                                                 linear_eqs: 
                                                                 v4 = a1 +1
                                                                 && term_eqs: 
                                                                 Object.<init>()([v4])=v5
                                                                 ∧[a1 +1]=v4
                                                                 && intervals: 
                                                                 v4≥1
                                                                 { roots=
                                                                   { &o=v1, &return=v7 };
                                                                   mem  =
                                                                   { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v6 -> { * -> v4 },
                                                                    v7 -> { * -> v4 } };
                                                                   attrs=
                                                                   { v1 -> { MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeValid(, None, t=2) },
                                                                    v4 -> { DynamicType , SourceFile [None],
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Supertype.foo()` at line 206 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ] ) },
                                                                    v6 -> { MustBeValid(, None, t=4),
                                                                    WrittenTo (4, ) },
                                                                    v7 -> { MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) } };}
                                                                 PRE=[{
                                                                  roots=
                                                                  { &o=v1 };
                                                                  mem  =
                                                                  { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                                  attrs=
                                                                  { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                                 need_closure_specialization=false
                                                                 need_dynamic_type_specialization=
                                                                 { v2 }
                                                                 skipped_calls=
                                                                 { Object.<init>() -> call to skipped function occurs here }
                                                                 Topl=
                                                                 {len=0;content=
                                                                   [  ]},
                                                                conditions= [] timestamp= 13)
                                                            
                                                            Non-disj state:
                                                              copy map: { }, 
                                                              parameter map: { },
                                                              destructor checked: { },
                                                              captured: { }, 
                                                              locked: false,
                                                              loads: (
                                                              { n$0 -> { o },
                                                                n$3 -> { $irvar0 } },
                                                              { o -> { line 206 -> { 1 } },
                                                                $irvar0 -> { line 206 -> { 7 } } }),
                                                              passed to: 
                                                              { o -> { Object DynamicDispatch$Supertype.foo() -> { line 206 -> { 3 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchWrapperFoo
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v4 = a1 +1
          && term_eqs: Object.<init>()([v4])=v5∧[a1 +1]=v4
          && intervals: v4≥1
     { roots={ &o=v1, &return=v7 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v6 -> { * -> v4 }, v7 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { DynamicType , SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Supertype.foo()` at line 206 :t3
                                     [in call to function `Object.<init>()` with no summary at line 161 :t2
                                      [] ]
                                     ) },
               v6 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v7 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 206 -> { 1 } }, $irvar0 -> { line 206 -> { 7 } } }),
  process analysis end
process analysis
passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 206 -> { 3 } } } }DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v3 = a1 +1 ∧ v8 = a3 +1
          && term_eqs: Object.<init>()([v3])=v5∧Object.<init>()([v8])=v9
                       ∧String Object.toString()([v8])=v12∧[a1 +1]=v3
                       ∧[a3 +1]=v8
          && intervals: v3≥1 ∧ v8≥1
     { roots={ };
       mem  ={ v1 -> { * -> v3 },
               v3 -> { * -> v4 },
               v8 -> { * -> v11 },
               v10 -> { * -> v8 },
               v13 -> { * -> v12 } };
       attrs={ v1 -> { s&o (variable `o` declared here at line 213 :t0 ) at line 216,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v3 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Supertype.<init>()` at line 215 :t2
                                     [in call to function `Object.<init>()` with no summary at line 159 :t2
                                      [] ]
                                     ) },
               v8 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=11),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` at line 216 :t6
                                     [in call to `Object DynamicDispatch$Supertype.foo()` at line 206 :t3
                                      [in call to function `Object.<init>()` with no summary at line 161 :t2
                                       [] ]
                                      ]
                                     ) },
               v10 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v12 -> { PropagateTaintFrom([{v= v8}]), ReturnedFromUnknown([v8]) },
               v13 -> { MustBeValid(, None, t=13), WrittenTo (13, ) } };}
     PRE=[{ roots={ };
            mem  ={ };
            attrs={ };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v8 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 19)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { o }, n$4 -> { $irvar0 } },
  { o -> { line 216 -> { 5 } }, $irvar0 -> { line 216 -> { 10 } } }),
  passed to: { o -> { Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype) -> { line 216 -> { 6 } } },
               $irvar0 -> { String Object.toString() -> { line 216 -> { 12 } } } }process analysis end
process analysis
InheritanceDispatch.dispatch_to_A_bad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 28)
process analysis end
process analysis

Non-disj state: ⊤InheritanceDispatch.getC1 disjuncts:
                                           #0: (conditions: (empty)
                                                phi: linear_eqs: v5 = a1 +1
                                                     && term_eqs: Object.<init>()([v5])=v7
                                                                  ∧[a1 +1]=v5
                                                     && intervals: v5≥1
                                                { roots={ &this=v1, &return=v9 };
                                                  mem  ={ v1 -> { * -> v2 },
                                                          v2 -> { * -> v3 },
                                                          v5 -> { * -> v6 },
                                                          v8 -> { * -> v5 },
                                                          v9 -> { * -> v5 } };
                                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeValid(, None, t=0) },
                                                          v5 -> { DynamicType , SourceFile [None],
                                                                  MustBeValid(, None, t=3),
                                                                  UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `InheritanceDispatch$C.<init>(InheritanceDispatch)` at line 301 :t3
                                                                    [
                                                                    in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 294 :t3
                                                                    [
                                                                    in call to `InheritanceDispatch$A.<init>(InheritanceDispatch)` at line 288 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 282 :t2
                                                                    [
                                                                    ] ] ] ] ) },
                                                          v8 -> { MustBeValid(, None, t=4),
                                                                  WrittenTo (4, ) },
                                                          v9 -> { MustBeValid(, None, t=8),
                                                                  WrittenTo (8, ) } };}
                                                PRE=[{ roots={ &this=v1 };
                                                       mem  ={ v1 -> { * -> v2 },
                                                               v2 -> { * -> v3 },
                                                               v3 -> { } };
                                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                need_closure_specialization=false
                                                need_dynamic_type_specialization=
                                                { }
                                                skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                                Topl={len=0;content=
                                                       [  ]},
                                               conditions= [] timestamp= 13)
                                           
                                           Non-disj state:
                                             copy map: { }, parameter map: { },
                                             destructor checked: { }, 
                                             captured: { }, locked: false,
                                             loads: ({ n$1 -> { this }, n$3 -> { $irvar0 } },
                                             { this -> { line 301 -> { 2 } },
                                               $irvar0 -> { line 301 -> { 7 } } }),
                                             passed to: { this -> { InheritanceDispatch$C.<init>(InheritanceDispatch) -> { line 301 -> { 3 } } } }process analysis end
process analysis
Specialization.callBuildCGood
1 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v7 = 0 && term_eqs: 0=v7 && intervals: v7=null
     { roots={ &a=v2, &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v3 },
               v3 -> { * -> v6 },
               v4 -> { * -> v5 },
               v8 -> { * -> v7 },
               v9 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v3 },
                    v3 -> { * -> v6 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 367 -> { 1 } }, $irvar0 -> { line 367 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 367 -> { 3 } } } }Specialization.buildCAndDerefBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v2 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 20)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v4 = a1 +1
          && term_eqs: Object.<init>()([v4])=v5∧String Object.toString()([v4])=v8∧[a1 +1]=v4
          && intervals: v4≥1
     { roots={ &o=v1 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v4 -> { * -> v7 },
               v6 -> { * -> v4 },
               v9 -> { * -> v8 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=2) },
               v4 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=8),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Supertype.foo()` at line 196 :t3
                                     [in call to function `Object.<init>()` with no summary at line 161 :t2
                                      [] ]
                                     ) },
               v6 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v8 -> { PropagateTaintFrom([{v= v4}]), ReturnedFromUnknown([v4]) },
               v9 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2, v4 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 16)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 196 -> { 1 } }, $irvar0 -> { line 196 -> { 7 } } }),
  passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 196 -> { 3 } } },
               $irvar0 -> { String Object.toString() -> { line 196 -> { 9 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchWrapperBar
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v4 = a1 +1
          && term_eqs: Object.<init>()([v4])=v5∧[a1 +1]=v4
          && intervals: v4≥1
     { roots={ &o=v1, &return=v7 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v6 -> { * -> v4 }, v7 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { DynamicType , SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Subtype.bar()` at line 210 :t3
                                     [in call to function `Object.<init>()` with no summary at line 177 :t2
                                      [] ]
                                     ) },
               v6 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v7 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 210 -> { 1 } }, $irvar0 -> { line 210 -> { 7 } } }),
  process analysis end
process analysis
passed to: { o -> { Object DynamicDispatch$Supertype.bar() -> { line 210 -> { 3 } } } }DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v3 = a1 +1 ∧ v7 = a2 +1
          && term_eqs: Object.<init>()([v3])=v5∧Object.<init>()([v7])=v8
                       ∧String Object.toString()([v7])=v11∧[a1 +1]=v3
                       ∧[a2 +1]=v7
          && intervals: v3≥1 ∧ v7≥1
     { roots={ };
       mem  ={ v1 -> { * -> v3 },
               v3 -> { * -> v4 },
               v7 -> { * -> v10 },
               v9 -> { * -> v7 },
               v12 -> { * -> v11 } };
       attrs={ v1 -> { s&o (variable `o` declared here at line 231 :t0 ) at line 234,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v3 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Subtype.<init>()` at line 233 :t2
                                     [in call to `DynamicDispatch$Supertype.<init>()` at line 169 :t2
                                      [in call to function `Object.<init>()` with no summary at line 159 :t2
                                       [] ]
                                      ]
                                     ) },
               v7 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=11),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` at line 234 :t6
                                     [in call to `Object DynamicDispatch$Subtype.bar()` at line 210 :t3
                                      [in call to function `Object.<init>()` with no summary at line 177 :t2
                                       [] ]
                                      ]
                                     ) },
               v9 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v11 -> { PropagateTaintFrom([{v= v7}]), ReturnedFromUnknown([v7]) },
               v12 -> { MustBeValid(, None, t=13), WrittenTo (13, ) } };}
     PRE=[{ roots={ };
            mem  ={ };
            attrs={ };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v7 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 19)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { o }, n$4 -> { $irvar0 } },
  { o -> { line 234 -> { 5 } }, $irvar0 -> { line 234 -> { 10 } } }),
  passed to: { o -> { Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype) -> { line 234 -> { 6 } } },
               $irvar0 -> { String Object.toString() -> { line 234 -> { 12 } } } }process analysis end
process analysis
Specialization.buildCWithInfeasiblePathsAndDerefBad
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v6 = 1
          && term_eqs: 1=v6∧Specialization$C Specialization$A.buildC()([v5])=v8
          && intervals: v6=1
     { roots={ &a=v2, &this=v1, &return=v12 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v5 -> { * -> v7 },
               v8 -> { f -> v10 },
               v9 -> { * -> v8 },
               v10 -> { * -> v11 },
               v12 -> { * -> v11 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v5 -> { MustBeValid(, None, t=4),
                       UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                     in call to `Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)` at line 433 :t4
                                     [in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 429 :t7
                                      [] ]
                                     ) },
               v6 -> { Invalid ConstantDereference(is assigned to the constant 1) },
               v8 -> { MustBeValid(, None, t=10),
                       PropagateTaintFrom([{v= v5}]),
                       ReturnedFromUnknown([v5]) },
               v9 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v10 -> { MustBeValid(, None, t=10) },
               v12 -> { MustBeValid(, None, t=11), WrittenTo (11, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { },
                    v5 -> { * -> v7 },
                    v7 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v5 -> { MustBeInitialized(, t=4), MustBeValid(, None, t=4) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v3 }
     skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 16)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$2 -> { a }, n$4 -> { $irvar0 } },
  { a -> { line 433 -> { 3 } }, this -> { line 433 -> { 1 } }, $irvar0 -> { line 433 -> { 9 } } }),
  passed to: { a -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 433 -> { 4 } } },
               this -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 433 -> { 4 } } } }process analysis end
process analysis
DynamicDispatch$WithField.dispatchOnFieldOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v4 = a1 +1 ∧ v8 = a2 +1 ∧ v12 = a3 +1
          && term_eqs: Object.<init>()([v4])=v6∧Object.<init>()([v8])=v11
                       ∧Object.<init>()([v12])=v13∧String Object.toString()([v12])=v16
                       ∧[a1 +1]=v4∧[a2 +1]=v8∧[a3 +1]=v12
          && intervals: v4≥1 ∧ v8≥1 ∧ v12≥1
     { roots={ };
       mem  ={ v1 -> { * -> v8 },
               v2 -> { * -> v4 },
               v4 -> { * -> v5 },
               v8 -> { mField -> v9, * -> v10 },
               v9 -> { * -> v4 },
               v12 -> { * -> v15 },
               v14 -> { * -> v12 },
               v17 -> { * -> v16 } };
       attrs={ v1 -> { s&object (variable `object` declared here at line 245 :t0 ) at line 248,
                       MustBeValid(, None, t=8),
                       WrittenTo (8, ) },
               v2 -> { s&subtype (variable `subtype` declared here at line 245 :t0 ) at line 247,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v4 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Subtype.<init>()` at line 246 :t2
                                     [in call to `DynamicDispatch$Supertype.<init>()` at line 169 :t2
                                      [in call to function `Object.<init>()` with no summary at line 159 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=7),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype)` at line 247 :t7
                                     [in call to function `Object.<init>()` with no summary at line 241 :t2
                                      [] ]
                                     ) },
               v9 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v12 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=19),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Object DynamicDispatch$Subtype.bar()` at line 248 :t14
                                      [in call to function `Object.<init>()` with no summary at line 177 :t2
                                       [] ]
                                      ) },
               v14 -> { MustBeValid(, None, t=15), WrittenTo (15, ) },
               v16 -> { PropagateTaintFrom([{v= v12}]), ReturnedFromUnknown([v12]) },
               v17 -> { MustBeValid(, None, t=21), WrittenTo (21, ) } };}
     PRE=[{ roots={ };
            mem  ={ };
            attrs={ };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v12 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 27)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$3 -> { subtype }, n$5 -> { object }, n$9 -> { $irvar0 } },
  { object -> { line 248 -> { 11 } },
    $irvar0 -> { line 248 -> { 18 } },
    subtype -> { line 247 -> { 6 } } }),
  passed to: { $irvar0 -> { String Object.toString() -> { line 248 -> { 20 } } },
               subtype -> { DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype) -> { line 247 -> { 7 } } } }process analysis end
process analysis
Specialization$A.callBuildC
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v7 = a1 +1
          && term_eqs: Object.<init>()([v7])=v9∧[a1 +1]=v7
          && intervals: v7≥1
     { roots={ &a=v2, &this=v1, &return=v11 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v3 },
               v3 -> { * -> v6 },
               v4 -> { * -> v5 },
               v7 -> { * -> v8 },
               v10 -> { * -> v7 },
               v11 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v4 -> { MustBeValid(, None, t=0) },
               v7 -> { DynamicType , SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                     [in call to `Specialization$C.<init>()` at line 353 :t2
                                      [in call to function `Object.<init>()` with no summary at line 339 :t2
                                       [] ]
                                      ]
                                     ) },
               v10 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v11 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v4 },
                    v2 -> { * -> v3 },
                    v3 -> { * -> v6 },
                    v4 -> { * -> v5 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 347 -> { 1 } }, $irvar0 -> { line 347 -> { 7 } } }),
  process analysis end
process analysis
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 347 -> { 3 } } } }Specialization.callCallBuildC
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v12 = a1 +1
          && term_eqs: Object.<init>()([v12])=v14∧[a1 +1]=v12
          && intervals: v12≥1
     { roots={ &a2=v3, &this=v1, &return=v16, &a1=v2 };
       mem  ={ v1 -> { * -> v6 },
               v2 -> { * -> v5 },
               v3 -> { * -> v4 },
               v4 -> { * -> v11 },
               v5 -> { * -> v8 },
               v6 -> { * -> v7 },
               v12 -> { * -> v13 },
               v15 -> { * -> v12 },
               v16 -> { * -> v12 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { MustBeValid(, None, t=0) },
               v4 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=4) },
               v5 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=2) },
               v6 -> { MustBeValid(, None, t=0) },
               v12 -> { DynamicType , SourceFile [None],
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Object.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v15 -> { MustBeValid(, None, t=5), WrittenTo (5, ) },
               v16 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
            mem  ={ v1 -> { * -> v6 },
                    v2 -> { * -> v5 },
                    v3 -> { * -> v4 },
                    v4 -> { * -> v11 },
                    v5 -> { * -> v8 },
                    v6 -> { * -> v7 },
                    v7 -> { },
                    v8 -> { },
                    v11 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=4),
                            MustBeValid(, None, t=4) },
                    v5 -> { DynamicType , SourceFile [None],
                            MustBeInitialized(, t=2),
                            MustBeValid(, None, t=2) },
                    v6 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 15)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a1 }, n$2 -> { a2 }, n$4 -> { $irvar0 } },
  { a2 -> { line 417 -> { 3 } }, $irvar0 -> { line 417 -> { 9 } }, a1 -> { line 417 -> { 1 } } }),
  passed to: { a2 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } },
               a1 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } } }process analysis end
process analysis
Specialization.buildCTransitivelyAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v10 = a2 +1 ∧ v15 = a3 +1
          && term_eqs: Object.<init>()([v5])=v7∧Object.<init>()([v10])=v12
                       ∧Object.<init>()([v15])=v17∧[a1 +1]=v5∧[a2 +1]=v10
                       ∧[a3 +1]=v15
          && intervals: v5≥1 ∧ v10≥1 ∧ v15≥1
     { roots={ &this=v1, &return=v21 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v10 -> { * -> v11 },
               v13 -> { * -> v10 },
               v15 -> { f -> v19, * -> v16 },
               v18 -> { * -> v15 },
               v19 -> { * -> v20 },
               v21 -> { * -> v20 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A_Bad.<init>()` at line 425 :t2
                                     [in call to `Specialization$A.<init>()` at line 358 :t2
                                      [in call to function `Object.<init>()` with no summary at line 343 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v10 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=6),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$A_Good.<init>()` at line 425 :t6
                                      [in call to `Specialization$A.<init>()` at line 351 :t2
                                       [in call to function `Object.<init>()` with no summary at line 343 :t2
                                        [] ]
                                       ]
                                      ) },
               v13 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v15 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=20),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)` at line 425 :t13
                                      [in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                       [in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                        [in call to `Specialization$C.<init>()` at line 353 :t2
                                         [in call to function `Object.<init>()` with no summary at line 339 :t2
                                          [] ]
                                         ]
                                        ]
                                       ]
                                      ) },
               v18 -> { MustBeValid(, None, t=14), WrittenTo (14, ) },
               v19 -> { MustBeValid(, None, t=20) },
               v21 -> { MustBeValid(, None, t=21), WrittenTo (21, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 26)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$4 -> { this }, n$6 -> { $irvar0 }, n$7 -> { $irvar1 }, n$9 -> { $irvar2 } },
  { $irvar1 -> { line 425 -> { 12 } },
    $irvar2 -> { line 425 -> { 19 } },
    this -> { line 425 -> { 9 } },
    $irvar0 -> { line 425 -> { 11 } } }),
  passed to: { $irvar1 -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } },
               this -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } },
               $irvar0 -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } } }process analysis end
process analysis
Specialization.buildCWithInfeasiblePathsAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v9 = 1
          && term_eqs: 1=v9∧Object.<init>()([v5])=v7∧Specialization$C Specialization$A.buildC()([v5])=v10
                       ∧[a1 +1]=v5
          && intervals: v5≥1 ∧ v9=1
     { roots={ &this=v1, &return=v14 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v10 -> { f -> v12 },
               v11 -> { * -> v10 },
               v12 -> { * -> v13 },
               v14 -> { * -> v13 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v5 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 437 :t2
                                     [in call to `Specialization$A.<init>()` at line 351 :t2
                                      [in call to function `Object.<init>()` with no summary at line 343 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v9 -> { Invalid ConstantDereference(is assigned to the constant 1) },
               v10 -> { MustBeValid(, None, t=14),
                        PropagateTaintFrom([{v= v5}]),
                        ReturnedFromUnknown([v5]) },
               v11 -> { MustBeValid(, None, t=9), WrittenTo (9, ) },
               v12 -> { MustBeValid(, None, t=14) },
               v14 -> { MustBeValid(, None, t=15), WrittenTo (15, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { $irvar0 }, n$6 -> { $irvar1 } },
  { $irvar1 -> { line 437 -> { 13 } },
    this -> { line 437 -> { 5 } },
    $irvar0 -> { line 437 -> { 7 } } }),
  passed to: { this -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 437 -> { 8 } } },
               $irvar0 -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 437 -> { 8 } } } }process analysis end
process analysis
DynamicDispatch.dynamicResolutionWithVariadicMethodBad
2 disjuncts:
#0: (conditions: (empty)
     phi: var_eqs: v6=v20 ∧ v7=v21 ∧ v12=v18 ∧ v13=v19
          && linear_eqs: v6 = a1 +1 ∧ v10 = a2 +1 ∧ v12 = 0 ∧ v14 = 1
                          ∧ v16 = 2 ∧ v23 = a3 +1
          && term_eqs: 0=v12∧1=v14∧2=v16∧Object.<init>()([v6])=v8
                       ∧Object.<init>()([v23])=v24∧String Object.toString()([v23])=v29
                       ∧[a1 +1]=v6∧[a2 +1]=v10∧[a3 +1]=v23
          && intervals: v6≥1 ∧ v10≥1 ∧ v12=null ∧ v14=1 ∧ v16=2 ∧ v18=0 ∧ v23≥1
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v6 },
               v3 -> { * -> v4 },
               v10 -> { * -> v22, [v18] -> v19, [v16] -> v17, [v14] -> v15, [v12] -> v13 },
               v11 -> { * -> v10 },
               v15 -> { * -> v12 },
               v17 -> { * -> v12 },
               v19 -> { * -> v20 },
               v20 -> { * -> v21 },
               v23 -> { * -> v28 },
               v26 -> { * -> v23 },
               v30 -> { * -> v29 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { s&subtype (variable `subtype` declared here at line 275 :t0 ) at line 277,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v3 -> { MustBeValid(, None, t=0) },
               v6 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Subtype.<init>()` at line 276 :t2
                                     [in call to `DynamicDispatch$Supertype.<init>()` at line 169 :t2
                                      [in call to function `Object.<init>()` with no summary at line 159 :t2
                                       [] ]
                                      ]
                                     ) },
               v10 -> { DynamicType , SourceFile [None], MustBeValid(, None, t=10) },
               v11 -> { MustBeValid(, None, t=6), WrittenTo (6, ) },
               v12 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v13 -> { MustBeValid(, None, t=10), WrittenTo (10, ) },
               v14 -> { Invalid ConstantDereference(is assigned to the constant 1) },
               v15 -> { MustBeValid(, None, t=14), WrittenTo (14, ) },
               v16 -> { Invalid ConstantDereference(is assigned to the constant 2) },
               v17 -> { MustBeValid(, None, t=17), WrittenTo (17, ) },
               v18 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v19 -> { MustBeValid(, None, t=22) },
               v20 -> { MustBeValid(, None, t=22) },
               v23 -> { DynamicType , SourceFile [None],
                        MustBeValid(, None, t=28),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])` at line 277 :t22
                                      [in call to `Object DynamicDispatch$Supertype.foo()` at line 271 :t10
                                       [in call to function `Object.<init>()` with no summary at line 161 :t2
                                        [] ]
                                       ]
                                      ) },
               v26 -> { MustBeValid(, None, t=23), WrittenTo (23, ) },
               v29 -> { PropagateTaintFrom([{v= v23}]), ReturnedFromUnknown([v23]) },
               v30 -> { MustBeValid(, None, t=30), WrittenTo (30, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v3 }, v3 -> { * -> v4 }, v4 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v3, v23 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 36)
#1: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v3 }, v3 -> { * -> v4 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v3 }, v3 -> { * -> v4 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v3 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 36)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$3 -> { $irvar0 },
            n$4 -> { subtype },
            n$5 -> { $irvar0 },
            n$6 -> { $irvar0 },
            n$7 -> { this },
            n$9 -> { $irvar0 },
            n$11 -> { $irvar1 } },
  { $irvar1 -> { line 277 -> { 27 } },
    this -> { line 277 -> { 19 } },
    $irvar0 -> { line 277 -> { 8, 13, 16, 21 } },
    subtype -> { line 277 -> { 9 } } }),
  passed to: { $irvar1 -> { String Object.toString() -> { line 277 -> { 29 } } },
               this -> { Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[]) -> { line 277 -> { 22 } } },
               $irvar0 -> { Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[]) -> { line 277 -> { 22 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchShouldNotCauseFalsePositiveEasyOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v3 = a1 +1 ∧ v6 = a2 +1
          && term_eqs: Object.<init>()([v3])=v5∧Object.<init>()([v6])=v7
                       ∧String Object.toString()([v6])=v10∧[a1 +1]=v3
                       ∧[a2 +1]=v6
          && intervals: v3≥1 ∧ v6≥1
     { roots={ };
       mem  ={ v1 -> { * -> v3 },
               v3 -> { * -> v4 },
               v6 -> { * -> v9 },
               v8 -> { * -> v6 },
               v11 -> { * -> v10 } };
       attrs={ v1 -> { s&o (variable `o` declared here at line 187 :t0 ) at line 190,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v3 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `DynamicDispatch$Subtype.<init>()` at line 188 :t2
                                     [in call to `DynamicDispatch$Supertype.<init>()` at line 169 :t2
                                      [in call to function `Object.<init>()` with no summary at line 159 :t2
                                       [] ]
                                      ]
                                     ) },
               v6 -> { DynamicType , SourceFile [None],
                       MustBeValid(, None, t=12),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Subtype.bar()` at line 190 :t7
                                     [in call to function `Object.<init>()` with no summary at line 177 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v10 -> { PropagateTaintFrom([{v= v6}]), ReturnedFromUnknown([v6]) },
               v11 -> { MustBeValid(, None, t=14), WrittenTo (14, ) } };}
     PRE=[{ roots={ };
            mem  ={ };
            attrs={ };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v6 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { o }, n$5 -> { $irvar0 } },
  { o -> { line 190 -> { 5 } }, $irvar0 -> { line 190 -> { 11 } } }),
  passed to: { o -> { Object DynamicDispatch$Subtype.bar() -> { line 190 -> { 7 } } },
               $irvar0 -> { String Object.toString() -> { line 190 -> { 13 } } } }process analysis end
process analysis
DynamicDispatch.<init>
1 disjuncts:
#0: (conditions: (empty) phi: term_eqs: Object.<init>()([v2])=v4
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to function `Object.<init>()` with no summary at line 132 :t2
                                     [] ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { this } },{ this -> { line 132 -> { 1 } } }),
  process analysis end
process analysis
passed to: { this -> { Object.<init>() -> { line 132 -> { 2 } } } }InheritanceDispatch.dispatch_to_C_bad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v4 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 28)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch.dynamicDispatchWrapperFoo1 disjuncts:
                                                            #0: (conditions: (empty)
                                                                 phi: 
                                                                 linear_eqs: 
                                                                 v4 = 0
                                                                 && term_eqs: 
                                                                 0=v4
                                                                 && intervals: 
                                                                 v4=null
                                                                 { roots=
                                                                   { &o=v1, &return=v6 };
                                                                   mem  =
                                                                   { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v5 -> { * -> v4 },
                                                                    v6 -> { * -> v4 } };
                                                                   attrs=
                                                                   { v1 -> { MustBeValid(, None, t=0) },
                                                                    v2 -> { DynamicType , SourceFile [None],
                                                                    MustBeValid(, None, t=2) },
                                                                    v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                                    v5 -> { MustBeValid(, None, t=4),
                                                                    WrittenTo (4, ) },
                                                                    v6 -> { MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) } };}
                                                                 PRE=[{
                                                                  roots=
                                                                  { &o=v1 };
                                                                  mem  =
                                                                  { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                                  attrs=
                                                                  { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { DynamicType , SourceFile [None],
                                                                    MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                                 need_closure_specialization=false
                                                                 need_dynamic_type_specialization=
                                                                 { }
                                                                 skipped_calls=
                                                                 { }
                                                                 Topl=
                                                                 {len=0;content=
                                                                   [  ]},
                                                                conditions= [] timestamp= 13)
                                                            
                                                            Non-disj state:
                                                              copy map: { }, 
                                                              parameter map: { },
                                                              destructor checked: { },
                                                              captured: { }, 
                                                              locked: false,
                                                              loads: (
                                                              { n$0 -> { o },
                                                                n$3 -> { $irvar0 } },
                                                              { o -> { line 206 -> { 1 } },
                                                                $irvar0 -> { line 206 -> { 7 } } }),
                                                              passed to: 
                                                              { o -> { Object DynamicDispatch$Supertype.foo() -> { line 206 -> { 3 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 19)
process analysis end
process analysis

Non-disj state: ⊤Specialization.callBuildCOnBoxGood1 disjuncts:
                                                     #0: (conditions: (empty)
                                                          phi: linear_eqs: 
                                                               v13 = 0
                                                               && term_eqs: 
                                                               0=v13
                                                               && intervals: 
                                                               v13=null
                                                          { roots={ &box=v2,
                                                                    &this=v1,
                                                                    &return=v15 };
                                                            mem  ={ v1 -> { * -> v10 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { f1 -> v4 },
                                                                    v4 -> { * -> v5 },
                                                                    v5 -> { f2 -> v6 },
                                                                    v6 -> { * -> v7 },
                                                                    v7 -> { f3 -> v8 },
                                                                    v8 -> { * -> v9 },
                                                                    v9 -> { * -> v12 },
                                                                    v10 -> { * -> v11 },
                                                                    v14 -> { * -> v13 },
                                                                    v15 -> { * -> v13 } };
                                                            attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeValid(, None, t=0) },
                                                                    v3 -> { MustBeValid(, None, t=2) },
                                                                    v4 -> { MustBeValid(, None, t=2) },
                                                                    v5 -> { MustBeValid(, None, t=3) },
                                                                    v6 -> { MustBeValid(, None, t=3) },
                                                                    v7 -> { MustBeValid(, None, t=4) },
                                                                    v8 -> { MustBeValid(, None, t=4) },
                                                                    v9 -> { DynamicType , SourceFile [None],
                                                                    MustBeValid(, None, t=5) },
                                                                    v10 -> { MustBeValid(, None, t=0) },
                                                                    v13 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                                    v14 -> { MustBeValid(, None, t=7),
                                                                    WrittenTo (7, ) },
                                                                    v15 -> { MustBeValid(, None, t=11),
                                                                    WrittenTo (11, ) } };}
                                                          PRE=[{ roots=
                                                                 { &box=v2, &this=v1 };
                                                                 mem  =
                                                                 { v1 -> { * -> v10 },
                                                                   v2 -> { * -> v3 },
                                                                   v3 -> { f1 -> v4 },
                                                                   v4 -> { * -> v5 },
                                                                   v5 -> { f2 -> v6 },
                                                                   v6 -> { * -> v7 },
                                                                   v7 -> { f3 -> v8 },
                                                                   v8 -> { * -> v9 },
                                                                   v9 -> { * -> v12 },
                                                                   v10 -> { * -> v11 },
                                                                   v11 -> { },
                                                                   v12 -> { } };
                                                                 attrs=
                                                                 { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                   v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                   v3 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) },
                                                                   v4 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) },
                                                                   v5 -> { MustBeInitialized(, t=3),
                                                                    MustBeValid(, None, t=3) },
                                                                   v6 -> { MustBeInitialized(, t=3),
                                                                    MustBeValid(, None, t=3) },
                                                                   v7 -> { MustBeInitialized(, t=4),
                                                                    MustBeValid(, None, t=4) },
                                                                   v8 -> { MustBeInitialized(, t=4),
                                                                    MustBeValid(, None, t=4) },
                                                                   v9 -> { DynamicType , SourceFile [None],
                                                                    MustBeInitialized(, t=5),
                                                                    MustBeValid(, None, t=5) },
                                                                   v10 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                          need_closure_specialization=false
                                                          need_dynamic_type_specialization=
                                                          { }
                                                          skipped_calls=
                                                          { }
                                                          Topl={len=0;content=
                                                                 [  ]},
                                                         conditions= [] timestamp= 16)
                                                     
                                                     Non-disj state:
                                                       copy map: { }, 
                                                       parameter map: { }, 
                                                       destructor checked: { }, 
                                                       captured: { }, 
                                                       locked: false,
                                                       loads: ({ n$0 -> { box },
                                                                 n$6 -> { $irvar0 } },
                                                       { box -> { line 404 -> { 1 } },
                                                         $irvar0 -> { line 404 -> { 10 } } }),
                                                       process analysis end
process analysis
passed to: { }Specialization.buildCOnBoxAndDerefBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ v2 }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 38)
process analysis end
process analysis

Non-disj state: ⊤DynamicDispatch$WithField.dispatchOnFieldBad1 disjuncts:
                                                               #0: ({AbortProgram 
                                                                   conditions: (empty) phi: (empty)
                                                                   { roots=
                                                                    { };
                                                                    mem  =
                                                                    { };
                                                                    attrs=
                                                                    { };}
                                                                   PRE=[{
                                                                    roots=
                                                                    { };
                                                                    mem  =
                                                                    { };
                                                                    attrs=
                                                                    { };}]
                                                                   need_closure_specialization=false
                                                                   need_dynamic_type_specialization=
                                                                   { }
                                                                   skipped_calls=
                                                                   { Object.<init>() -> call to skipped function occurs here }
                                                                   Topl=
                                                                   {len=0;content=
                                                                    [  ]}},
                                                                   conditions= [] timestamp= 27)
                                                               process analysis end
process analysis

                                                               Non-disj state: ⊤DynamicDispatch.dynamicDispatchShouldReportWhenCalledWithSubtypeParameterBad_FN
1 disjuncts:
#0: (conditions: (empty) phi: (empty)
     { roots={ &o=v1 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) }, v2 -> { MustBeValid(, None, t=2) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v2 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 7)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$0 -> { o } },{ o -> { line 202 -> { 1 } } }),
  passed to: { o -> { void DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(DynamicDispatch$Supertype) -> { line 202 -> { 2 } } } }process analysis end

DynamicDispatch.java:148: error: Null Dereference
  `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch$Impl.foo()` on line 148) and is dereferenced. 
  146.        Interface i = new Impl();
  147.        // should be a warning since Impl's implementation of foo returns null
  148. >      i.foo().toString();
  149.      }
  150.    

DynamicDispatch.java:184: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 184) and is dereferenced. 
  182.        Supertype o = new Subtype();
  183.        // should report a warning because we know the dynamic type of o is Subtype
  184. >      o.foo().toString();
  185.      }
  186.    

DynamicDispatch.java:222: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperBar(...)` on line 222) and is dereferenced. 
  220.        // Should report because Supertype.bar() returns null
  221.        Supertype o = new Supertype();
  222. >      dynamicDispatchWrapperBar(o).toString();
  223.      }
  224.    

DynamicDispatch.java:228: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperFoo(...)` on line 228) and is dereferenced. 
  226.        // Should report because Subtype.foo() returns null
  227.        Supertype o = new Subtype();
  228. >      dynamicDispatchWrapperFoo(o).toString();
  229.      }
  230.    

DynamicDispatch.java:254: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 254) and is dereferenced. 
  252.          Supertype subtype = new Subtype();
  253.          WithField object = new WithField(subtype);
  254. >        object.mField.foo().toString();
  255.        }
  256.      }


Found 13 issues (console output truncated to 5, see '/Users/liwenhua/Downloads/infer/bh/7/infer-out/report.txt' for the full list)
             Issue Type(ISSUED_TYPE_ID): #
  Null Dereference(NULLPTR_DEREFERENCE): 13
