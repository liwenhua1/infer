#0
ratis-client/src/main/java/org/apache/ratis/client/impl/AsyncImpl.java:46: error: Null Dereference
  `RaftClientRequest$Type RaftClientRequest.writeRequestType(RaftProtos$ReplicationLevel)` could be null (from the call to `RaftClientRequest.writeRequestType(...)` on line 46) and is dereferenced in the call to `AsyncImpl.send(...)`. 
  44.     @Override
  45.     public CompletableFuture<RaftClientReply> send(Message message, ReplicationLevel replication) {
  46. >     return send(RaftClientRequest.writeRequestType(replication), message, null);
  47.     }
  48.   

#1
ratis-common/src/main/java/org/apache/ratis/util/LifeCycle.java:111: error: Null Dereference
  null (null value originating from line 111) is dereferenced. 
  109.       /** Is the given transition valid? */
  110.       public static boolean isValid(State from, State to) {
  111. >       return PREDECESSORS.get(to).contains(from);
  112.       }
  113.   

#2
ratis-common/src/test/java/org/apache/ratis/util/Slf4jUtils.java:100: error: Null Dereference
  `clazz` could be null (from the call to `ReflectionUtils.getClassByNameOrNull(...)` on line 99) and is dereferenced. 
   98.           try {
   99.             final Class<?> clazz = ReflectionUtils.getClassByNameOrNull(CLASS_NAME);
  100. >           return clazz.getDeclaredField(level);
  101.           } catch (Exception e) {
  102.             return null;

#3
ratis-examples/src/main/java/org/apache/ratis/examples/arithmetic/ArithmeticStateMachine.java:140: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedInputStream() on line 133 is not closed after the last access at line 140. 
  138.         throw new IllegalStateException("Failed to load " + snapshot, e);
  139.       }
  140. >     return last.getIndex();
  141.     }
  142.   

#4
ratis-examples/src/main/java/org/apache/ratis/examples/counter/server/CounterStateMachine.java:211: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedInputStream() on line 205 is not closed after the last access at line 211. 
  209.       //update state
  210.       updateState(last, counterValue);
  211. >   }
  212.   
  213.     /**

#5
ratis-grpc/src/main/java/org/apache/ratis/grpc/metrics/MessageMetrics.java:62: error: Null Dereference
  null (null value originating from line 61) is dereferenced. 
  60.     private void inc(String metricNamePrefix, Type t) {
  61.       types.get(t)
  62. >         .computeIfAbsent(metricNamePrefix, prefix -> getRegistry().counter(prefix + t.getSuffix()))
  63.           .inc();
  64.       final Map<String, LongCounter> counters = types.get(t);

#6
ratis-netty/src/main/java/org/apache/ratis/netty/metrics/NettyServerStreamRpcMetrics.java:134: error: Null Dereference
  null (null value originating from line 134) is dereferenced. 
  132.   
  133.     private void inc(Op op, RequestType type) {
  134. >     ops.get(op).computeIfAbsent(op.getString(type), getRegistry()::counter).inc();
  135.     }
  136.   

#7
ratis-server/src/main/java/org/apache/ratis/server/impl/RaftServerImpl.java:1835: error: Null Dereference
  `RaftProtos$LogEntryProto$LogEntryBodyCase RaftProtos$LogEntryProto.getLogEntryBodyCase()` could be null (from the call to `RaftProtos$LogEntryProto.getLogEntryBodyCase()` on line 1835) and is dereferenced. 
  1833.       CompletableFuture<Message> messageFuture = null;
  1834.   
  1835. >     switch (next.getLogEntryBodyCase()) {
  1836.       case CONFIGURATIONENTRY:
  1837.         // the reply should have already been set. only need to record

#8
ratis-server/src/main/java/org/apache/ratis/server/impl/WatchRequests.java:216: error: Null Dereference
  `queue` could be null (null value originating from line 215) and is dereferenced. 
  214.     void update(ReplicationLevel replication, final long newIndex) {
  215.       final WatchQueue queue = queues.get(replication);
  216. >     if (newIndex > queue.getIndex()) { // compare without synchronization
  217.         queue.updateIndex(newIndex);
  218.       }

#9
ratis-server/src/main/java/org/apache/ratis/server/metrics/RaftServerMetricsImpl.java:259: error: Null Dereference
  null (null value originating from line 259) is dereferenced. 
  257.   
  258.     public void onWatchRequestQueueLimitHit(ReplicationLevel replicationLevel) {
  259. >     numWatchRequestQueueLimitHits.get(replicationLevel).inc();
  260.     }
  261.   

#10
ratis-server/src/main/java/org/apache/ratis/server/metrics/RaftServerMetricsImpl.java:263: error: Null Dereference
  null (null value originating from line 263) is dereferenced. 
  261.   
  262.     public void onWatchRequestTimeout(ReplicationLevel replicationLevel) {
  263. >     numWatchRequestsTimeout.get(replicationLevel).inc();
  264.     }
  265.   

#11
ratis-server/src/test/java/org/apache/ratis/server/impl/MiniRaftCluster.java:540: error: Null Dereference
  null (null value originating from line 540) is dereferenced. 
  538.     public void killServer(RaftPeerId id) {
  539.       LOG.info("killServer " + id);
  540. >     servers.get(id).close();
  541.     }
  542.   

#12
ratis-server/src/test/java/org/apache/ratis/server/impl/MiniRaftCluster.java:716: error: Null Dereference
  null (null value originating from line 716) is dereferenced. 
  714.   
  715.     public ServerFactory getServerFactory(RaftPeerId id) {
  716. >     return servers.get(id).getFactory();
  717.     }
  718.   

#13
ratis-server/src/test/java/org/apache/ratis/server/simulation/MiniRaftClusterWithSimulatedRpc.java:117: error: Null Dereference
  `SimulatedRequestReply$EventQueue SimulatedRequestReply.getQueue(String)` could be null (from the call to `SimulatedRequestReply.getQueue(...)` on line 117) and is dereferenced. 
  115.     @Override
  116.     public void setBlockRequestsFrom(String src, boolean block) {
  117. >     serverRequestReply.getQueue(src).blockTakeRequestFrom.set(block);
  118.     }
  119.   }

#14
ratis-shell/src/main/java/org/apache/ratis/shell/cli/AbstractShell.java:147: error: Null Dereference
  null (null value originating from line 147) is dereferenced. 
  145.       SortedSet<String> sortedCmds = new TreeSet<>(mCommands.keySet());
  146.       for (String cmd : sortedCmds) {
  147. >       System.out.format("%-60s%n", "\t [" + mCommands.get(cmd).getUsage() + "]");
  148.       }
  149.     }

#15
ratis-test/src/test/java/org/apache/ratis/conf/TestRaftProperties.java:51: error: Null Dereference
  `Boolean RaftProperties.getBoolean(String,Boolean)` could be null (null value originating from line 51) and is dereferenced. 
  49.         Assertions.assertNull(p.getBoolean(KEY, null));
  50.         setNonUnderscoreValue(p, "true");
  51. >       Assertions.assertTrue(p.getBoolean(KEY, null));
  52.         setNonUnderscoreValue(p, "false");
  53.         Assertions.assertFalse(p.getBoolean(KEY, null));

#16
ratis-test/src/test/java/org/apache/ratis/conf/TestRaftProperties.java:53: error: Null Dereference
  `Boolean RaftProperties.getBoolean(String,Boolean)` could be null (null value originating from line 53) and is dereferenced. 
  51.         Assertions.assertTrue(p.getBoolean(KEY, null));
  52.         setNonUnderscoreValue(p, "false");
  53. >       Assertions.assertFalse(p.getBoolean(KEY, null));
  54.         setUnderscoreValue(p, "fa_lse");
  55.         Assertions.assertNull(p.getBoolean(KEY, null));

#17
ratis-test/src/test/java/org/apache/ratis/retry/TestMultipleLinearRandomRetry.java:57: error: Null Dereference
  `computed` could be null (from the call to `MultipleLinearRandomRetry.parseCommaSeparated(...)` on line 55) and is dereferenced. 
  55.       final MultipleLinearRandomRetry computed = MultipleLinearRandomRetry.parseCommaSeparated(input);
  56.       Assertions.assertNotNull(computed);
  57. >     Assertions.assertTrue(computed.toString().endsWith(expected));
  58.       return computed;
  59.     }

#18
ratis-test/src/test/java/org/apache/ratis/server/raftlog/TestRaftLogMetrics.java:160: error: Null Dereference
  `tm` could be null (from the call to `RatisMetricRegistryImpl.get(...)` on line 156) and is dereferenced. 
  158.       final MetricsStateMachine stateMachine = MetricsStateMachine.get(server);
  159.       final int expectedFlush = stateMachine.getFlushCount();
  160. >     Assertions.assertEquals(expectedFlush, tm.getCount()); // Ideally, flushCount should be same as syncCount.
  161.       Assertions.assertTrue(tm.getMeanRate() > 0);
  162.   

#19
ratis-test/src/test/java/org/apache/ratis/util/TestLifeCycle.java:54: error: Null Dereference
  null (null value originating from line 54) is dereferenced. 
  52.       states.forEach(
  53.           from -> states.forEach(
  54. >             to -> assertEquals(successors.get(from).contains(to),
  55.                   isValid(from, to), from + " -> " + to)));
  56.     }

Found 20 issues
                Issue Type(ISSUED_TYPE_ID): #
     Null Dereference(NULLPTR_DEREFERENCE): 18
  Pulse Resource Leak(PULSE_RESOURCE_LEAK): 2
