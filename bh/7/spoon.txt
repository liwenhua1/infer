#0
src/main/java/spoon/IncrementalLauncher.java:74: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedInputStream() on line 69 is not closed after the last access at line 74. 
  72.   			throw e;
  73.   		} catch (ClassNotFoundException | IOException e) {
  74. > 			throw new SpoonException("unable to load cache info");
  75.   		}
  76.   	}

#1
src/main/java/spoon/IncrementalLauncher.java:86: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedOutputStream() on line 80 is not closed after the last access at line 86. 
  84.   			throw new SpoonException("unable to save cache info");
  85.   		}
  86. > 	}
  87.   
  88.   	private static Factory loadFactory(File file) {

#2
src/main/java/spoon/IncrementalLauncher.java:90: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 90 is not closed after the last access at line 90. 
  88.   	private static Factory loadFactory(File file) {
  89.   		try {
  90. > 			return new SerializationModelStreamer().load(new FileInputStream(file));
  91.   		} catch (IOException e) {
  92.   			throw new SpoonException("unable to load factory from cache");

#3
src/main/java/spoon/IncrementalLauncher.java:92: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 90 is not closed after the last access at line 92. 
  90.   			return new SerializationModelStreamer().load(new FileInputStream(file));
  91.   		} catch (IOException e) {
  92. > 			throw new SpoonException("unable to load factory from cache");
  93.   		}
  94.   	}

#4
src/main/java/spoon/pattern/PatternParameterConfigurator.java:799: error: Null Dereference
  The call to `InlinedStatementConfigurator InlinedStatementConfigurator.byElement(CtElement)` may trigger the following issue: `ctElement->parent` could be null (from the call to `InlinedStatementConfigurator.byElement(...)` on line 102) and is dereferenced in the call to `InlinedStatementConfigurator.byElement(...)`. 
  797.   		InlinedStatementConfigurator sb = new InlinedStatementConfigurator(patternBuilder);
  798.   		for (CtElement ctElement : substitutedNodes) {
  799. > 			sb.byElement(ctElement);
  800.   		}
  801.   		return this;

#5
src/main/java/spoon/pattern/PatternParameterConfigurator.java:799: error: Null Dereference
  The call to `InlinedStatementConfigurator InlinedStatementConfigurator.byElement(CtElement)` may trigger the following issue: null (from the call to `InlinedStatementConfigurator.byElement(...)` on line 102) is dereferenced in the call to `InlinedStatementConfigurator.byElement(...)`. 
  797.   		InlinedStatementConfigurator sb = new InlinedStatementConfigurator(patternBuilder);
  798.   		for (CtElement ctElement : substitutedNodes) {
  799. > 			sb.byElement(ctElement);
  800.   		}
  801.   		return this;

#6
src/main/java/spoon/reflect/meta/impl/RoleHandlerHelper.java:41: error: Null Dereference
  null (null value originating from line 41) is dereferenced. 
  39.   		Comparator<RoleHandler> cmp = (a, b) -> a.getTargetType().isAssignableFrom(b.getTargetType()) ? 1 : -1;
  40.   		for (RoleHandler rh : ModelRoleHandlers.roleHandlers) {
  41. > 			roleHandlers.get(rh.getRole()).sort(cmp);
  42.   		}
  43.   	}

#7
src/main/java/spoon/reflect/meta/impl/RoleHandlerHelper.java:67: error: Null Dereference
  `handlers` could be null (null value originating from line 66) and is dereferenced. 
  65.   	public static RoleHandler getOptionalRoleHandler(Class<? extends CtElement> targetClass, CtRole role) {
  66.   		List<RoleHandler> handlers = roleHandlers.get(role);
  67. > 		for (RoleHandler ctRoleHandler : handlers) {
  68.   			if (ctRoleHandler.getTargetType().isAssignableFrom(targetClass)) {
  69.   				return ctRoleHandler;

#8
src/main/java/spoon/support/SerializationModelStreamer.java:58: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedOutputStream() on line 54 is not closed after the last access at line 58. 
  56.   			oos.flush();
  57.   		}
  58. > 	}
  59.   
  60.   	@Override

#9
src/main/java/spoon/support/SerializationModelStreamer.java:92: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.GZIPInputStream() on line 67 is not closed after the last access at line 92. 
  90.   		} catch (ClassNotFoundException e) {
  91.   			Launcher.LOGGER.error(e.getMessage(), e);
  92. > 			throw new IOException(e.getMessage());
  93.   		}
  94.   	}

#10
src/main/java/spoon/support/compiler/ZipFolder.java:193: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedInputStream() on line 193 is not closed after the last access at line 193. 
  191.   	/** physically extracts on disk all files of this zip file in the destinationDir `destDir` */
  192.   	public void extract(File destDir) {
  193. > 		try (ZipInputStream zipInput = new ZipInputStream(new BufferedInputStream(new FileInputStream(file)))) {
  194.   			ZipEntry entry;
  195.   			while ((entry = zipInput.getNextEntry()) != null) {

#11
src/main/java/spoon/support/compiler/ZipFolder.java:193: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 193 is not closed after the last access at line 193. 
  191.   	/** physically extracts on disk all files of this zip file in the destinationDir `destDir` */
  192.   	public void extract(File destDir) {
  193. > 		try (ZipInputStream zipInput = new ZipInputStream(new BufferedInputStream(new FileInputStream(file)))) {
  194.   			ZipEntry entry;
  195.   			while ((entry = zipInput.getNextEntry()) != null) {

#12
src/main/java/spoon/support/compiler/jdt/JDTTreeBuilder.java:1259: error: Null Dereference
  The call to `CtLiteral CodeFactory.createLiteral(Object)` may trigger the following issue: null (from the call to `CodeFactory.createLiteral(...)` on line 266) is dereferenced in the call to `CodeFactory.createLiteral(...)`. 
  1257.   	@Override
  1258.   	public boolean visit(FalseLiteral falseLiteral, BlockScope scope) {
  1259. > 		context.enter(factory.Code().createLiteral(false), falseLiteral);
  1260.   		return true;
  1261.   	}

#13
src/main/java/spoon/support/compiler/jdt/JDTTreeBuilder.java:1340: error: Null Dereference
  The call to `CtLiteral CodeFactory.createLiteral(Object)` may trigger the following issue: null (from the call to `CodeFactory.createLiteral(...)` on line 266) is dereferenced in the call to `CodeFactory.createLiteral(...)`. 
  1338.   	public boolean visit(IntLiteral intLiteral, BlockScope scope) {
  1339.   		intLiteral.computeConstant();
  1340. > 		CtLiteral<Integer> l = factory.Code().createLiteral(intLiteral.constant.intValue());
  1341.   		l.setBase(getBase(intLiteral));
  1342.   		context.enter(l, intLiteral);

#14
src/main/java/spoon/support/compiler/jdt/JDTTreeBuilder.java:1807: error: Null Dereference
  The call to `CtLiteral CodeFactory.createLiteral(Object)` may trigger the following issue: null (from the call to `CodeFactory.createLiteral(...)` on line 266) is dereferenced in the call to `CodeFactory.createLiteral(...)`. 
  1805.   	@Override
  1806.   	public boolean visit(TrueLiteral trueLiteral, BlockScope scope) {
  1807. > 		context.enter(factory.Code().createLiteral(true), trueLiteral);
  1808.   		return true;
  1809.   	}

#15
src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java:1219: error: Null Dereference
  null (null value originating from line 1219) is dereferenced. 
  1217.   
  1218.   	private CtTypeReference<?> getCtCircularTypeReference(TypeBinding b) {
  1219. > 		return bindingCache.get(b).clone();
  1220.   	}
  1221.   

#16
src/main/java/spoon/template/Substitution.java:101: error: Null Dereference
  `PatternBuilder PatternBuilder.create(CtElement[]).templateTypeRef` could be null (from the call to `PatternBuilder.create(...)` on line 100) and is dereferenced in the call to `PatternBuilder.configurePatternParameters(...)`. 
   99.   		return PatternBuilder
  100.   				.create(templateOfType)
  101. > 				.configurePatternParameters(pc -> {
  102.   					pc.byTemplateParameter(templateParameters);
  103.   					pc.byParameterValues(templateParameters);

Found 17 issues
                Issue Type(ISSUED_TYPE_ID): #
     Null Dereference(NULLPTR_DEREFERENCE): 9
  Pulse Resource Leak(PULSE_RESOURCE_LEAK): 8
