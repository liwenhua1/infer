{ proc_name= Object DynamicDispatch$Subtype.bar()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Subtype*)]
; is_defined= true
; loc= DynamicDispatch.java:176
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= java.lang.Object* 
; proc_id= codetoanalyze.java.infer.DynamicDispatch$Subtype.bar():java.lang.Object }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=java.lang.Object):java.lang.Object*) [line 177];
      n$1=_fun_Object.<init>()(n$0:java.lang.Object*) [line 177];
      *&$irvar0:java.lang.Object*=n$0 [line 177];
      EXIT_SCOPE(n$0,n$1); [line 177];
      
    #n5:
      n$2=*&$irvar0:java.lang.Object* [line 177];
      *&return:java.lang.Object*=n$2 [line 177];
      NULLIFY(&$irvar0); [line 177];
      EXIT_SCOPE(n$2,$irvar0); [line 177];
      APPLY_ABSTRACTION; [line 177];
      
    process analysis
#n2:
      
    
    DynamicDispatch$Subtype.bar1 disjuncts:
                               #0: (conditions: (empty)
                                    phi: linear_eqs: v5 = a1 +1
                                         && term_eqs: Object.<init>()([v5])=v6∧[a1 +1]=v5
                                         && intervals: v5≥1
                                    { roots={ &this=v1, &return=v8 };
                                      mem  ={ v1 -> { * -> v2 },
                                              v2 -> { * -> v3 },
                                              v7 -> { * -> v5 },
                                              v8 -> { * -> v5 } };
                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                              v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                      MustBeValid(, None, t=0) },
                                              v5 -> { DynamicType java.lang.Object, SourceFile [None],
                                                      UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 177 :t2
                                                                    [
                                                                    ] ) },
                                              v7 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
                                              v8 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                    PRE=[{ roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { * -> v3 },
                                                   v3 -> { } };
                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) } };}]
                                    need_closure_specialization=false
                                    need_dynamic_type_specialization=
                                    { }
                                    skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                    Topl={len=0;content=
                                           [  ]},
                                   conditions= [] timestamp= 11)
                               
                               Non-disj state:
                                 copy map: { }, parameter map: { }, destructor checked: { },
                                 captured: { }, locked: false,
                                 loads: ({ n$2 -> { $irvar0 } },
                                 { $irvar0 -> { line 177 -> { 5 } } }),process analysis end
 
                                 passed to: { }{ proc_name= Object DynamicDispatch.callFoo(DynamicDispatch$Supertype)
                                               ; translation_unit= DynamicDispatch.java
                                               ; access= Private
                                               ; formals= [(this,
                                                           codetoanalyze.java.infer.DynamicDispatch*); 
                                                           (o,
                                                           codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
                                               ; is_defined= true
                                               ; loc= DynamicDispatch.java:258
                                               ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
                                               ; ret_type= java.lang.Object* 
                                               ; proc_id= codetoanalyze.java.infer.DynamicDispatch.callFoo(codetoanalyze.java.infer.DynamicDispatch$Supertype):java.lang.Object }
    #n1:
      
    #n4:
      n$0=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 259];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 259];
      n$2=_fun_Object DynamicDispatch$Supertype.foo()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 259];
      *&$irvar0:java.lang.Object*=n$2 [line 259];
      NULLIFY(&o); [line 259];
      EXIT_SCOPE(_,n$0,n$2,o); [line 259];
      
    #n5:
      n$3=*&$irvar0:java.lang.Object* [line 259];
      *&return:java.lang.Object*=n$3 [line 259];
      NULLIFY(&$irvar0); [line 259];
      EXIT_SCOPE(n$3,$irvar0); [line 259];
      APPLY_ABSTRACTION; [line 259];
      
    #n2:
      
    
    { proc_name= Object DynamicDispatch$Subtype.foo()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Subtype*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:171
    ; locals= []
    ; ret_type= java.lang.Object* 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Subtype.foo():java.lang.Object }
    process analysis
#n1:
      
    #n4:
      *&return:java.lang.Object*=null [line 172];
      APPLY_ABSTRACTION; [line 172];
      
    #n2:
      
    
    DynamicDispatch$Subtype.foo1 disjuncts:
                               #0: (conditions: (empty)
                                    phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
                                    { roots={ &this=v1, &return=v5 };
                                      mem  ={ v1 -> { * -> v2 },
                                              v2 -> { * -> v3 },
                                              v5 -> { * -> v4 } };
                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                              v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                      MustBeValid(, None, t=0) },
                                              v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                              v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                    PRE=[{ roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { * -> v3 },
                                                   v3 -> { } };
                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) } };}]
                                    need_closure_specialization=false
                                    need_dynamic_type_specialization=
                                    { }
                                    skipped_calls={ }
                                    Topl={len=0;content=
                                           [  ]},
                                   conditions= [] timestamp= 4)
                               
                               Non-disj state:
                                 copy map: { }, parameter map: { }, destructor checked: { },
                                 captured: { }, locked: false, loads: ({ },{ }),process analysis end
 
                                 passed to: { }{ proc_name= Object DynamicDispatch$Supertype.foo()
                                               ; translation_unit= DynamicDispatch.java
                                               ; formals= [(this,
                                                           codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
                                               ; is_defined= true
                                               ; loc= DynamicDispatch.java:160
                                               ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
                                               ; ret_type= java.lang.Object* 
                                               ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Supertype.foo():java.lang.Object }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=java.lang.Object):java.lang.Object*) [line 161];
      n$1=_fun_Object.<init>()(n$0:java.lang.Object*) [line 161];
      *&$irvar0:java.lang.Object*=n$0 [line 161];
      EXIT_SCOPE(n$0,n$1); [line 161];
      
    #n5:
      n$2=*&$irvar0:java.lang.Object* [line 161];
      *&return:java.lang.Object*=n$2 [line 161];
      NULLIFY(&$irvar0); [line 161];
      EXIT_SCOPE(n$2,$irvar0); [line 161];
      APPLY_ABSTRACTION; [line 161];
      
    process analysis
#n2:
      
    
    DynamicDispatch$Supertype.foo1 disjuncts:
                                 #0: (conditions: (empty)
                                      phi: linear_eqs: v5 = a1 +1
                                           && term_eqs: Object.<init>()([v5])=v6∧[a1 +1]=v5
                                           && intervals: v5≥1
                                      { roots={ &this=v1, &return=v8 };
                                        mem  ={ v1 -> { * -> v2 },
                                                v2 -> { * -> v3 },
                                                v7 -> { * -> v5 },
                                                v8 -> { * -> v5 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v5 -> { DynamicType java.lang.Object, SourceFile [None],
                                                        UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ) },
                                                v7 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
                                                v8 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                      PRE=[{ roots={ &this=v1 };
                                             mem  ={ v1 -> { * -> v2 },
                                                     v2 -> { * -> v3 },
                                                     v3 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 11)
                                 
                                 Non-disj state:
                                   copy map: { }, parameter map: { }, 
                                   destructor checked: { }, captured: { }, 
                                   locked: false,
                                   loads: ({ n$2 -> { $irvar0 } },
                                   { $irvar0 -> { line 161 -> { 5 } } }),process analysis end
process analysis
 
                                   passed to: { }DynamicDispatch.callFoo
2 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v8 = a1 +1
          && term_eqs: Object.<init>()([v8])=v9∧[a1 +1]=v8
          && intervals: v8≥1
     { roots={ &o=v2, &this=v1, &return=v12 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v4 },
               v3 -> { * -> v5 },
               v4 -> { * -> v6 },
               v10 -> { * -> v8 },
               v12 -> { * -> v8 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v4 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
               v8 -> { DynamicType java.lang.Object, SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Supertype.foo()` at line 259 :t3
                                     [in call to function `Object.<init>()` with no summary at line 161 :t2
                                      [] ]
                                     ) },
               v10 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v12 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v4 },
                    v3 -> { * -> v5 },
                    v4 -> { * -> v6 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: (empty) phi: linear_eqs: v7 = 0 && term_eqs: 0=v7 && intervals: v7=null
     { roots={ &o=v2, &this=v1, &return=v13 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v4 },
               v3 -> { * -> v5 },
               v4 -> { * -> v6 },
               v11 -> { * -> v7 },
               v13 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v4 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
               v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v11 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v13 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v4 },
                    v3 -> { * -> v5 },
                    v4 -> { * -> v6 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 259 -> { 1 } }, $irvar0 -> { line 259 -> { 7 } } }),
  process analysis end
passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 259 -> { 3 } } } }
{ proc_name= InheritanceDispatch.<init>()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:281
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 281];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.InheritanceDispatch*) [line 281];
      NULLIFY(&this); [line 281];
      EXIT_SCOPE(n$0,n$1,this); [line 281];
      
    #n5:
      APPLY_ABSTRACTION; [line 281];
      
    process analysis
#n2:
      
    
    InheritanceDispatch.<init>1 disjuncts:
                              #0: (conditions: (empty)
                                   phi: term_eqs: InheritanceDispatch.<init>()([v2])=v4
                                   { roots={ &this=v1 };
                                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                     attrs={ v1 -> { MustBeValid(, None, t=0) },
                                             v2 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None],
                                                     MustBeValid(, None, t=0),
                                                     UnknownEffect(function `InheritanceDispatch.<init>()` with no summary,
                                                                   in call to function `InheritanceDispatch.<init>()` with no summary at line 281 :t2
                                                                   [] ) } };}
                                   PRE=[{ roots={ &this=v1 };
                                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v2 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) } };}]
                                   need_closure_specialization=false
                                   need_dynamic_type_specialization={ }
                                   skipped_calls={ InheritanceDispatch.<init>() -> call to skipped function occurs here }
                                   Topl={len=0;content=
                                          [  ]},
                                  conditions= [] timestamp= 7)
                              
                              Non-disj state:
                                copy map: { }, parameter map: { }, destructor checked: { },
                                captured: { }, locked: false,
                                loads: ({ n$0 -> { this } },{ this -> { line 281 -> { 1 } } }),
                                passed to: { this -> { InheritanceDispatch.<init>() -> { line 281 -> { 2 } } } }process analysis end

{ proc_name= DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$WithField*);  (t,
            codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
; is_defined= true
; loc= DynamicDispatch.java:241
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch$WithField.<init>(codetoanalyze.java.infer.DynamicDispatch$Supertype) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.DynamicDispatch$WithField* [line 241];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$WithField*) [line 241];
      EXIT_SCOPE(n$0,n$1); [line 241];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.DynamicDispatch$WithField* [line 242];
      n$3=*&t:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 242];
      *n$2.mField:codetoanalyze.java.infer.DynamicDispatch$Supertype*=n$3 [line 242];
      NULLIFY(&t); [line 242];
      NULLIFY(&this); [line 242];
      EXIT_SCOPE(n$2,n$3,t,this); [line 242];
      
    #n6:
      APPLY_ABSTRACTION; [line 243];
      
    process analysis
#n2:
      
    
    DynamicDispatch$WithField.<init>1 disjuncts:
                                    #0: (conditions: (empty)
                                         phi: term_eqs: Object.<init>()([v3])=v6
                                         { roots={ &t=v2, &this=v1 };
                                           mem  ={ v1 -> { * -> v3 },
                                                   v2 -> { * -> v4 },
                                                   v3 -> { mField -> v7, * -> v5 },
                                                   v7 -> { * -> v4 } };
                                           attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeValid(, None, t=0) },
                                                   v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$WithField, SourceFile [None],
                                                           MustBeValid(, None, t=0),
                                                           UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 241 :t2
                                                                    [
                                                                    ] ) },
                                                   v4 -> { StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
                                                   v7 -> { MustBeValid(, None, t=6),
                                                           WrittenTo (6, ) } };}
                                         PRE=[{ roots={ &t=v2, &this=v1 };
                                                mem  ={ v1 -> { * -> v3 },
                                                        v2 -> { * -> v4 },
                                                        v3 -> { mField -> v7, * -> v5 },
                                                        v4 -> { },
                                                        v5 -> { },
                                                        v7 -> { } };
                                                attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) },
                                                        v2 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) },
                                                        v3 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) },
                                                        v7 -> { MustBeValid(, None, t=6) } };}]
                                         need_closure_specialization=false
                                         need_dynamic_type_specialization=
                                         { }
                                         skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                         Topl={len=0;content=
                                                [  ]},
                                        conditions= [] timestamp= 12)
                                    
                                    Non-disj state:
                                      copy map: { }, parameter map: { }, 
                                      destructor checked: { }, captured: { }, 
                                      locked: false,
                                      loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { t } },
                                      { t -> { line 242 -> { 5 } },
                                        this -> { line 241 -> { 1 }, line 242 -> { 4 } } }),
                                      passed to: { this -> { Object.<init>() -> { line 241 -> { 2 } } } }process analysis end

{ proc_name= InheritanceDispatch$A.<init>(InheritanceDispatch)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch$A*);  (this$0,
            codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:282
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch$A.<init>(codetoanalyze.java.infer.InheritanceDispatch) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch$A* [line 282];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.InheritanceDispatch$A*) [line 282];
      NULLIFY(&this); [line 282];
      EXIT_SCOPE(n$0,n$1,this); [line 282];
      
    #n5:
      APPLY_ABSTRACTION; [line 282];
      
    process analysis
#n2:
      
    
    InheritanceDispatch$A.<init>1 disjuncts:
                                #0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
                                     { roots={ &this=v1, &this$0=v2 };
                                       mem  ={ v1 -> { * -> v3 },
                                               v2 -> { * -> v4 },
                                               v3 -> { * -> v5 } };
                                       attrs={ v1 -> { MustBeValid(, None, t=0) },
                                               v2 -> { MustBeValid(, None, t=0) },
                                               v3 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$A, SourceFile [None],
                                                       MustBeValid(, None, t=0),
                                                       UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to function `Object.<init>()` with no summary at line 282 :t2
                                                                    [
                                                                    ] ) },
                                               v4 -> { StaticType class codetoanalyze.java.infer.InheritanceDispatch } };}
                                     PRE=[{ roots={ &this=v1, &this$0=v2 };
                                            mem  ={ v1 -> { * -> v3 },
                                                    v2 -> { * -> v4 },
                                                    v3 -> { * -> v5 },
                                                    v4 -> { },
                                                    v5 -> { } };
                                            attrs={ v1 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v2 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v3 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) } };}]
                                     need_closure_specialization=false
                                     need_dynamic_type_specialization=
                                     { }
                                     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                     Topl={len=0;content=
                                            [  ]},
                                    conditions= [] timestamp= 7)
                                
                                Non-disj state:
                                  copy map: { }, parameter map: { }, 
                                  destructor checked: { }, captured: { }, 
                                  locked: false,
                                  loads: ({ n$0 -> { this } },{ this -> { line 282 -> { 1 } } }),
                                  passed to: { this -> { Object.<init>() -> { line 282 -> { 2 } } } }process analysis end

{ proc_name= Specialization$C Specialization$A.callBuildC(Specialization$A)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization$A*);  (a,
            codetoanalyze.java.infer.Specialization$A*)]
; is_defined= true
; loc= DynamicDispatch.java:346
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization$A.callBuildC(codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&a:codetoanalyze.java.infer.Specialization$A* [line 347];
      _=*n$0:codetoanalyze.java.infer.Specialization$A [line 347];
      n$2=_fun_Specialization$C Specialization$A.buildC()(n$0:codetoanalyze.java.infer.Specialization$A*) virtual [line 347];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$2 [line 347];
      NULLIFY(&a); [line 347];
      EXIT_SCOPE(_,n$0,n$2,a); [line 347];
      
    #n5:
      n$3=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 347];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$3 [line 347];
      NULLIFY(&$irvar0); [line 347];
      EXIT_SCOPE(n$3,$irvar0); [line 347];
      APPLY_ABSTRACTION; [line 347];
      
    #n2:
      
    
    { proc_name= Specialization$C Specialization$A_Good.buildC()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization$A_Good*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:352
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.Specialization$C* 
    ; proc_id= codetoanalyze.java.infer.Specialization$A_Good.buildC():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$C):codetoanalyze.java.infer.Specialization$C*) [line 353];
      n$1=_fun_Specialization$C.<init>()(n$0:codetoanalyze.java.infer.Specialization$C*) [line 353];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$0 [line 353];
      EXIT_SCOPE(n$0,n$1); [line 353];
      
    #n5:
      n$2=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 353];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$2 [line 353];
      NULLIFY(&$irvar0); [line 353];
      EXIT_SCOPE(n$2,$irvar0); [line 353];
      APPLY_ABSTRACTION; [line 353];
      
    #n2:
      
    
    { proc_name= Specialization$C.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization$C*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:339
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.Specialization$C.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$C* [line 339];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization$C*) [line 339];
      NULLIFY(&this); [line 339];
      EXIT_SCOPE(n$0,n$1,this); [line 339];
      
    #n5:
      APPLY_ABSTRACTION; [line 339];
      
    process analysis
#n2:
      
    
    Specialization$C.<init>1 disjuncts:
                           #0: (conditions: (empty)
                                phi: term_eqs: Specialization$C.<init>()([v2])=v4
                                { roots={ &this=v1 };
                                  mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                          v2 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                  MustBeValid(, None, t=0),
                                                  UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                [] ) } };}
                                PRE=[{ roots={ &this=v1 };
                                       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) },
                                               v2 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) } };}]
                                need_closure_specialization=false
                                need_dynamic_type_specialization={ }
                                skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                Topl={len=0;content=
                                       [  ]},
                               conditions= [] timestamp= 7)
                           
                           Non-disj state:
                             copy map: { }, parameter map: { }, destructor checked: { },
                             captured: { }, locked: false,
                             loads: ({ n$0 -> { this } },{ this -> { line 339 -> { 1 } } }),
                             passed to: { this -> { Specialization$C.<init>() -> { line 339 -> { 2 } } } }process analysis end
process analysis
Specialization$A_Good.buildC
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: Specialization$C.<init>()([v5])=v7∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v9 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v5 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                     in call to `Specialization$C.<init>()` at line 353 :t2
                                     [in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v9 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 11)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false, loads: ({ n$2 -> { $irvar0 } },{ $irvar0 -> { line 353 -> { 5 } } }),
  process analysis end
passed to: { }{ proc_name= Specialization$C Specialization$A_Bad.buildC()
                ; translation_unit= DynamicDispatch.java
                ; formals= [(this,codetoanalyze.java.infer.Specialization$A_Bad*)]
                ; is_defined= true
                ; loc= DynamicDispatch.java:359
                ; locals= []
                ; ret_type= codetoanalyze.java.infer.Specialization$C* 
                ; proc_id= codetoanalyze.java.infer.Specialization$A_Bad.buildC():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      *&return:codetoanalyze.java.infer.Specialization$C*=null [line 360];
      APPLY_ABSTRACTION; [line 360];
      
    process analysis
#n2:
      
    
    Specialization$A_Bad.buildC1 disjuncts:
                               #0: (conditions: (empty)
                                    phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
                                    { roots={ &this=v1, &return=v5 };
                                      mem  ={ v1 -> { * -> v2 },
                                              v2 -> { * -> v3 },
                                              v5 -> { * -> v4 } };
                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                              v2 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                      MustBeValid(, None, t=0) },
                                              v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                              v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                    PRE=[{ roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { * -> v3 },
                                                   v3 -> { } };
                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) } };}]
                                    need_closure_specialization=false
                                    need_dynamic_type_specialization=
                                    { }
                                    skipped_calls={ }
                                    Topl={len=0;content=
                                           [  ]},
                                   conditions= [] timestamp= 4)
                               
                               Non-disj state:
                                 copy map: { }, parameter map: { }, destructor checked: { },
                                 captured: { }, locked: false, loads: ({ },{ }),process analysis end
process analysis
 
                                 passed to: { }Specialization$A.callBuildC
2 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v10 = 0 && term_eqs: 0=v10 && intervals: v10=null
     { roots={ &a=v2, &this=v1, &return=v13 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v4 },
               v3 -> { * -> v5 },
               v4 -> { * -> v6 },
               v11 -> { * -> v10 },
               v13 -> { * -> v10 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType codetoanalyze.java.infer.Specialization$A, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v4 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.Specialization$A },
               v10 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v11 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v13 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v4 },
                    v3 -> { * -> v5 },
                    v4 -> { * -> v6 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: (empty)
     phi: linear_eqs: v7 = a1 +1
          && term_eqs: Specialization$C.<init>()([v7])=v9∧[a1 +1]=v7
          && intervals: v7≥1
     { roots={ &a=v2, &this=v1, &return=v14 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v4 },
               v3 -> { * -> v5 },
               v4 -> { * -> v6 },
               v7 -> { * -> v8 },
               v12 -> { * -> v7 },
               v14 -> { * -> v7 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType codetoanalyze.java.infer.Specialization$A, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v4 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.Specialization$A },
               v7 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                       UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                     in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                     [in call to `Specialization$C.<init>()` at line 353 :t2
                                      [in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                       [] ]
                                      ]
                                     ) },
               v12 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 },
                    v2 -> { * -> v4 },
                    v3 -> { * -> v5 },
                    v4 -> { * -> v6 },
                    v5 -> { },
                    v6 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
  { a -> { line 347 -> { 1 } }, $irvar0 -> { line 347 -> { 7 } } }),
  process analysis end
passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 347 -> { 3 } } } }
{ proc_name= void DynamicDispatch.interfaceShouldNotCauseFalseNegativeEasyBad()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:145
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= i; typ= codetoanalyze.java.infer.DynamicDispatch$Interface*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.interfaceShouldNotCauseFalseNegativeEasyBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Impl):codetoanalyze.java.infer.DynamicDispatch$Impl*) [line 146];
      n$1=_fun_DynamicDispatch$Impl.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Impl*) [line 146];
      *&i:codetoanalyze.java.infer.DynamicDispatch$Impl*=n$0 [line 146];
      EXIT_SCOPE(n$0,n$1); [line 146];
      
    #n5:
      n$2=*&i:codetoanalyze.java.infer.DynamicDispatch$Impl* [line 148];
      _=*n$2:codetoanalyze.java.infer.DynamicDispatch$Impl [line 148];
      n$4=_fun_Object DynamicDispatch$Impl.foo()(n$2:codetoanalyze.java.infer.DynamicDispatch$Impl*) [line 148];
      *&$irvar0:java.lang.Object*=n$4 [line 148];
      NULLIFY(&i); [line 148];
      EXIT_SCOPE(_,n$2,n$4,i); [line 148];
      
    #n6:
      n$5=*&$irvar0:java.lang.Object* [line 148];
      _=*n$5:java.lang.Object [line 148];
      n$7=_fun_String Object.toString()(n$5:java.lang.Object*) virtual [line 148];
      *&$irvar1:java.lang.String*=n$7 [line 148];
      NULLIFY(&$irvar1); [line 148];
      NULLIFY(&$irvar0); [line 148];
      EXIT_SCOPE(_,n$5,n$7,$irvar1,$irvar0); [line 148];
      
    #n7:
      APPLY_ABSTRACTION; [line 149];
      
    #n2:
      
    
    { proc_name= DynamicDispatch$Impl.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Impl*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:138
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Impl.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.DynamicDispatch$Impl* [line 138];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Impl*) [line 138];
      NULLIFY(&this); [line 138];
      EXIT_SCOPE(n$0,n$1,this); [line 138];
      
    #n5:
      APPLY_ABSTRACTION; [line 138];
      
    process analysis
#n2:
      
    
    DynamicDispatch$Impl.<init>1 disjuncts:
                               #0: (conditions: (empty)
                                    phi: term_eqs: DynamicDispatch$Impl.<init>()([v2])=v4
                                    { roots={ &this=v1 };
                                      mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                              v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Impl, SourceFile [None],
                                                      MustBeValid(, None, t=0),
                                                      UnknownEffect(function `DynamicDispatch$Impl.<init>()` with no summary,
                                                                    in call to function `DynamicDispatch$Impl.<init>()` with no summary at line 138 :t2
                                                                    [
                                                                    ] ) } };}
                                    PRE=[{ roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { * -> v3 },
                                                   v3 -> { } };
                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) } };}]
                                    need_closure_specialization=false
                                    need_dynamic_type_specialization=
                                    { }
                                    skipped_calls={ DynamicDispatch$Impl.<init>() -> call to skipped function occurs here }
                                    Topl={len=0;content=
                                           [  ]},
                                   conditions= [] timestamp= 7)
                               
                               Non-disj state:
                                 copy map: { }, parameter map: { }, destructor checked: { },
                                 captured: { }, locked: false,
                                 loads: ({ n$0 -> { this } },{ this -> { line 138 -> { 1 } } }),
                                 passed to: { this -> { DynamicDispatch$Impl.<init>() -> { line 138 -> { 2 } } } }process analysis end

{ proc_name= Object DynamicDispatch$Impl.foo()
; translation_unit= DynamicDispatch.java
; access= Public
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Impl*)]
; is_defined= true
; loc= DynamicDispatch.java:140
; locals= []
; ret_type= java.lang.Object* 
; proc_id= codetoanalyze.java.infer.DynamicDispatch$Impl.foo():java.lang.Object }
    process analysis
#n1:
      
    #n4:
      *&return:java.lang.Object*=null [line 141];
      APPLY_ABSTRACTION; [line 141];
      
    #n2:
      
    
    DynamicDispatch$Impl.foo1 disjuncts:
                            #0: (conditions: (empty)
                                 phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
                                 { roots={ &this=v1, &return=v5 };
                                   mem  ={ v1 -> { * -> v2 },
                                           v2 -> { * -> v3 },
                                           v5 -> { * -> v4 } };
                                   attrs={ v1 -> { MustBeValid(, None, t=0) },
                                           v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Impl, SourceFile [None],
                                                   MustBeValid(, None, t=0) },
                                           v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                           v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                 PRE=[{ roots={ &this=v1 };
                                        mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                        attrs={ v1 -> { MustBeInitialized(, t=0),
                                                        MustBeValid(, None, t=0) },
                                                v2 -> { MustBeInitialized(, t=0),
                                                        MustBeValid(, None, t=0) } };}]
                                 need_closure_specialization=false
                                 need_dynamic_type_specialization={ }
                                 skipped_calls={ }
                                 Topl={len=0;content=
                                        [  ]},
                                conditions= [] timestamp= 4)
                            
                            Non-disj state:
                              copy map: { }, parameter map: { }, destructor checked: { },
                              captured: { }, locked: false, loads: ({ },{ }),process analysis end
process analysis
 
                              passed to: { }DynamicDispatch.interfaceShouldNotCauseFalseNegativeEasyBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ DynamicDispatch$Impl.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 20)
process analysis end

Non-disj state: ⊤{ proc_name= void InheritanceDispatch.dispatch_to_B_ok()
                   ; translation_unit= DynamicDispatch.java
                   ; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:304
                   ; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= b; typ= codetoanalyze.java.infer.InheritanceDispatch$A*; modify_in_block= false; is_declared_unused= false }; 
                              { name= o; typ= java.lang.Object*; modify_in_block= false; is_declared_unused= false }]
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.InheritanceDispatch.dispatch_to_B_ok():void }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 305];
      _=*n$0:codetoanalyze.java.infer.InheritanceDispatch [line 305];
      n$2=_fun_InheritanceDispatch$A InheritanceDispatch.getB()(n$0:codetoanalyze.java.infer.InheritanceDispatch*) virtual [line 305];
      *&b:codetoanalyze.java.infer.InheritanceDispatch$A*=n$2 [line 305];
      NULLIFY(&this); [line 305];
      EXIT_SCOPE(_,n$0,n$2,this); [line 305];
      
    #n5:
      n$3=*&b:codetoanalyze.java.infer.InheritanceDispatch$A* [line 306];
      _=*n$3:codetoanalyze.java.infer.InheritanceDispatch$A [line 306];
      n$5=_fun_int InheritanceDispatch$A.foo()(n$3:codetoanalyze.java.infer.InheritanceDispatch$A*) virtual [line 306];
      *&$irvar0:int=n$5 [line 306];
      NULLIFY(&b); [line 306];
      EXIT_SCOPE(_,n$3,n$5,b); [line 306];
      
    #n6:
      n$6=*&$irvar0:int [line 306];
      PRUNE(!(n$6 != 32), true); [line 306];
      NULLIFY(&$irvar0); [line 306];
      EXIT_SCOPE(n$6,$irvar0); [line 306];
      
    #n8:
      *&o:java.lang.Object*=null [line 307];
      
    #n9:
      n$7=*&o:java.lang.Object* [line 308];
      _=*n$7:java.lang.Object [line 308];
      n$9=_fun_String Object.toString()(n$7:java.lang.Object*) virtual [line 308];
      *&$irvar1:java.lang.String*=n$9 [line 308];
      NULLIFY(&o); [line 308];
      NULLIFY(&$irvar1); [line 308];
      EXIT_SCOPE(_,n$7,n$9,o,$irvar1); [line 308];
      APPLY_ABSTRACTION; [line 308];
      
    #n7:
      n$6=*&$irvar0:int [line 306];
      PRUNE((n$6 != 32), false); [line 306];
      NULLIFY(&$irvar0); [line 306];
      EXIT_SCOPE(n$6,$irvar0); [line 306];
      APPLY_ABSTRACTION; [line 306];
      
    #n10:
      APPLY_ABSTRACTION; [line 310];
      
    #n2:
      
    
    { proc_name= InheritanceDispatch$A InheritanceDispatch.getB()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:296
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.InheritanceDispatch$A* 
    ; proc_id= codetoanalyze.java.infer.InheritanceDispatch.getB():codetoanalyze.java.infer.InheritanceDispatch$A }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.InheritanceDispatch$B):codetoanalyze.java.infer.InheritanceDispatch$B*) [line 297];
      n$1=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 297];
      n$2=_fun_InheritanceDispatch$B.<init>(InheritanceDispatch)(n$0:codetoanalyze.java.infer.InheritanceDispatch$B*,n$1:codetoanalyze.java.infer.InheritanceDispatch*) [line 297];
      *&$irvar0:codetoanalyze.java.infer.InheritanceDispatch$B*=n$0 [line 297];
      NULLIFY(&this); [line 297];
      EXIT_SCOPE(n$0,n$1,n$2,this); [line 297];
      
    #n5:
      n$3=*&$irvar0:codetoanalyze.java.infer.InheritanceDispatch$B* [line 297];
      *&return:codetoanalyze.java.infer.InheritanceDispatch$A*=n$3 [line 297];
      NULLIFY(&$irvar0); [line 297];
      EXIT_SCOPE(n$3,$irvar0); [line 297];
      APPLY_ABSTRACTION; [line 297];
      
    #n2:
      
    
    { proc_name= InheritanceDispatch$B.<init>(InheritanceDispatch)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch$B*);  (this$0,
                codetoanalyze.java.infer.InheritanceDispatch*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:288
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.InheritanceDispatch$B.<init>(codetoanalyze.java.infer.InheritanceDispatch) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch$B* [line 288];
      n$1=*&this$0:codetoanalyze.java.infer.InheritanceDispatch* [line 288];
      n$2=_fun_InheritanceDispatch$A.<init>(InheritanceDispatch)(n$0:codetoanalyze.java.infer.InheritanceDispatch$B*,n$1:codetoanalyze.java.infer.InheritanceDispatch*) [line 288];
      NULLIFY(&this); [line 288];
      NULLIFY(&this$0); [line 288];
      EXIT_SCOPE(n$0,n$1,n$2,this,this$0); [line 288];
      
    #n5:
      APPLY_ABSTRACTION; [line 288];
      
    process analysis
#n2:
      
    
    InheritanceDispatch$B.<init>1 disjuncts:
                                #0: (conditions: (empty)
                                     phi: term_eqs: InheritanceDispatch$B.<init>(InheritanceDispatch)([v3],[v4])=v6
                                     { roots={ &this=v1, &this$0=v2 };
                                       mem  ={ v1 -> { * -> v3 },
                                               v2 -> { * -> v4 },
                                               v3 -> { * -> v5 } };
                                       attrs={ v1 -> { MustBeValid(, None, t=0) },
                                               v2 -> { MustBeValid(, None, t=0) },
                                               v3 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$B, SourceFile [None],
                                                       MustBeValid(, None, t=0),
                                                       PropagateTaintFrom([{v= v4}]),
                                                       UnknownEffect(function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary,
                                                                    in call to function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary at line 288 :t3
                                                                    [
                                                                    ] ) },
                                               v4 -> { StaticType class codetoanalyze.java.infer.InheritanceDispatch },
                                               v5 -> { Tainted{ } } };}
                                     PRE=[{ roots={ &this=v1, &this$0=v2 };
                                            mem  ={ v1 -> { * -> v3 },
                                                    v2 -> { * -> v4 },
                                                    v3 -> { * -> v5 },
                                                    v4 -> { },
                                                    v5 -> { } };
                                            attrs={ v1 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v2 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v3 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) } };}]
                                     need_closure_specialization=false
                                     need_dynamic_type_specialization=
                                     { }
                                     skipped_calls={ InheritanceDispatch$B.<init>(InheritanceDispatch) -> call to skipped function occurs here }
                                     Topl={len=0;content=
                                            [  ]},
                                    conditions= [] timestamp= 9)
                                
                                Non-disj state:
                                  copy map: { }, parameter map: { }, 
                                  destructor checked: { }, captured: { }, 
                                  locked: false,
                                  loads: ({ n$0 -> { this }, n$1 -> { this$0 } },
                                  { this -> { line 288 -> { 1 } },
                                    this$0 -> { line 288 -> { 2 } } }),
                                  passed to: { this -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 288 -> { 3 } } },
                                               this$0 -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 288 -> { 3 } } } }process analysis end
process analysis
InheritanceDispatch.getB
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: InheritanceDispatch$B.<init>(InheritanceDispatch)([v5],[v2])=v7∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &this=v1, &return=v9 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v9 -> { * -> v5 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None],
                       MustBeValid(, None, t=0),
                       StaticType class codetoanalyze.java.infer.InheritanceDispatch },
               v5 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$B, SourceFile [None],
                       MustBeValid(, None, t=3),
                       PropagateTaintFrom([{v= v2}]),
                       UnknownEffect(function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary,
                                     in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 297 :t3
                                     [in call to function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary at line 288 :t3
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ InheritanceDispatch$B.<init>(InheritanceDispatch) -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$1 -> { this }, n$3 -> { $irvar0 } },
  { this -> { line 297 -> { 2 } }, $irvar0 -> { line 297 -> { 7 } } }),
  passed to: { this -> { InheritanceDispatch$B.<init>(InheritanceDispatch) -> { line 297 -> { 3 } } } }process analysis end

{ proc_name= int InheritanceDispatch$B.foo()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch$B*)]
; is_defined= true
; loc= DynamicDispatch.java:289
; locals= []
; ret_type= int 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch$B.foo():int }
    process analysis
#n1:
      
    #n4:
      *&return:int=52 [line 290];
      APPLY_ABSTRACTION; [line 290];
      
    #n2:
      
    
    InheritanceDispatch$B.foo1 disjuncts:
                             #0: (conditions: (empty)
                                  phi: linear_eqs: v4 = 52 && term_eqs: 52=v4 && intervals: v4=52
                                  { roots={ &this=v1, &return=v5 };
                                    mem  ={ v1 -> { * -> v2 },
                                            v2 -> { * -> v3 },
                                            v5 -> { * -> v4 } };
                                    attrs={ v1 -> { MustBeValid(, None, t=0) },
                                            v2 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$B, SourceFile [None],
                                                    MustBeValid(, None, t=0) },
                                            v4 -> { Invalid ConstantDereference(is assigned to the constant 52) },
                                            v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                  PRE=[{ roots={ &this=v1 };
                                         mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                         attrs={ v1 -> { MustBeInitialized(, t=0),
                                                         MustBeValid(, None, t=0) },
                                                 v2 -> { MustBeInitialized(, t=0),
                                                         MustBeValid(, None, t=0) } };}]
                                  need_closure_specialization=false
                                  need_dynamic_type_specialization={ }
                                  skipped_calls={ }
                                  Topl={len=0;content=
                                         [  ]},
                                 conditions= [] timestamp= 4)
                             
                             Non-disj state:
                               copy map: { }, parameter map: { }, destructor checked: { },
                               captured: { }, locked: false, loads: ({ },{ }),process analysis end
process analysis
 
                               passed to: { }InheritanceDispatch.dispatch_to_B_ok
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v6 = a1 +1 ∧ v9 = 52
          && term_eqs: 52=v9∧InheritanceDispatch$B.<init>(InheritanceDispatch)([v6],[v4])=v8
                       ∧[a1 +1]=v6
          && intervals: v6≥1 ∧ v9=52
     { roots={ &o=v3, &this=v1 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v6 },
               v4 -> { * -> v5 },
               v6 -> { * -> v7 },
               v10 -> { * -> v9 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { s&b (variable `b` declared here at line 304 :t0 ) at line 306,
                       MustBeValid(, None, t=4),
                       WrittenTo (4, ) },
               v3 -> { Uninitialized },
               v4 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v6 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$B, SourceFile [None],
                       MustBeValid(, None, t=8),
                       PropagateTaintFrom([{v= v4}]),
                       UnknownEffect(function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary,
                                     in call to `InheritanceDispatch$A InheritanceDispatch.getB()` at line 305 :t3
                                     [in call to `InheritanceDispatch$B.<init>(InheritanceDispatch)` at line 297 :t3
                                      [in call to function `InheritanceDispatch$B.<init>(InheritanceDispatch)` with no summary at line 288 :t3
                                       [] ]
                                      ]
                                     ) },
               v9 -> { Invalid ConstantDereference(is assigned to the constant 52) },
               v10 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ InheritanceDispatch$B.<init>(InheritanceDispatch) -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { this }, n$3 -> { b }, n$6 -> { $irvar0 } },
  { b -> { line 306 -> { 7 } }, this -> { line 305 -> { 1 } }, $irvar0 -> { line 306 -> { 13 } } }),
  passed to: { b -> { int InheritanceDispatch$B.foo() -> { line 306 -> { 9 } } },
               this -> { InheritanceDispatch$A InheritanceDispatch.getB() -> { line 305 -> { 3 } } } }process analysis end

{ proc_name= void InheritanceDispatch.dispatch_to_B_bad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:312
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= b; typ= codetoanalyze.java.infer.InheritanceDispatch$A*; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= java.lang.Object*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch.dispatch_to_B_bad():void }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 313];
      _=*n$0:codetoanalyze.java.infer.InheritanceDispatch [line 313];
      n$2=_fun_InheritanceDispatch$A InheritanceDispatch.getB()(n$0:codetoanalyze.java.infer.InheritanceDispatch*) virtual [line 313];
      *&b:codetoanalyze.java.infer.InheritanceDispatch$A*=n$2 [line 313];
      NULLIFY(&this); [line 313];
      EXIT_SCOPE(_,n$0,n$2,this); [line 313];
      
    #n5:
      n$3=*&b:codetoanalyze.java.infer.InheritanceDispatch$A* [line 314];
      _=*n$3:codetoanalyze.java.infer.InheritanceDispatch$A [line 314];
      n$5=_fun_int InheritanceDispatch$A.foo()(n$3:codetoanalyze.java.infer.InheritanceDispatch$A*) virtual [line 314];
      *&$irvar0:int=n$5 [line 314];
      NULLIFY(&b); [line 314];
      EXIT_SCOPE(_,n$3,n$5,b); [line 314];
      
    #n6:
      n$6=*&$irvar0:int [line 314];
      PRUNE(!(n$6 != 52), true); [line 314];
      NULLIFY(&$irvar0); [line 314];
      EXIT_SCOPE(n$6,$irvar0); [line 314];
      
    #n8:
      *&o:java.lang.Object*=null [line 315];
      
    #n9:
      n$7=*&o:java.lang.Object* [line 316];
      _=*n$7:java.lang.Object [line 316];
      n$9=_fun_String Object.toString()(n$7:java.lang.Object*) virtual [line 316];
      *&$irvar1:java.lang.String*=n$9 [line 316];
      NULLIFY(&o); [line 316];
      NULLIFY(&$irvar1); [line 316];
      EXIT_SCOPE(_,n$7,n$9,o,$irvar1); [line 316];
      APPLY_ABSTRACTION; [line 316];
      
    #n7:
      n$6=*&$irvar0:int [line 314];
      PRUNE((n$6 != 52), false); [line 314];
      NULLIFY(&$irvar0); [line 314];
      EXIT_SCOPE(n$6,$irvar0); [line 314];
      APPLY_ABSTRACTION; [line 314];
      
    #n10:
      APPLY_ABSTRACTION; [line 318];
      
    process analysis
#n2:
      
    
    InheritanceDispatch.dispatch_to_B_bad1 disjuncts:
                                         #0: ({AbortProgram conditions: (empty)
                                                            phi: linear_eqs: 
                                                                 v6 = a1 +1
                                                                 && term_eqs: 
                                                                 InheritanceDispatch$B.<init>(InheritanceDispatch)([v6],[v4])=v8
                                                                 ∧[a1 +1]=v6
                                                                 && intervals: 
                                                                 v6≥1
                                                            { roots={ &this=v1 };
                                                              mem  ={ v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                              attrs={ v4 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None] } };}
                                                            PRE=[{ roots=
                                                                   { &this=v1 };
                                                                   mem  =
                                                                   { v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                                   attrs=
                                                                   { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                            need_closure_specialization=false
                                                            need_dynamic_type_specialization=
                                                            { }
                                                            skipped_calls=
                                                            { InheritanceDispatch$B.<init>(InheritanceDispatch) -> call to skipped function occurs here }
                                                            Topl={len=0;content=
                                                                   [  ]}},
                                             conditions= [] timestamp= 28)
                                         process analysis end

                                         Non-disj state: ⊤{ proc_name= int InheritanceDispatch$A.foo()
                                                            ; translation_unit= DynamicDispatch.java
                                                            ; formals= [
                                                            (this,
                                                            codetoanalyze.java.infer.InheritanceDispatch$A*)]
                                                            ; is_defined= true
                                                            ; loc= DynamicDispatch.java:283
                                                            ; locals= [
                                                            ]
                                                            ; ret_type= int 
                                                            ; proc_id= codetoanalyze.java.infer.InheritanceDispatch$A.foo():int }
    process analysis
#n1:
      
    #n4:
      *&return:int=32 [line 284];
      APPLY_ABSTRACTION; [line 284];
      
    #n2:
      
    
    InheritanceDispatch$A.foo1 disjuncts:
                             #0: (conditions: (empty)
                                  phi: linear_eqs: v4 = 32 && term_eqs: 32=v4 && intervals: v4=32
                                  { roots={ &this=v1, &return=v5 };
                                    mem  ={ v1 -> { * -> v2 },
                                            v2 -> { * -> v3 },
                                            v5 -> { * -> v4 } };
                                    attrs={ v1 -> { MustBeValid(, None, t=0) },
                                            v2 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$A, SourceFile [None],
                                                    MustBeValid(, None, t=0) },
                                            v4 -> { Invalid ConstantDereference(is assigned to the constant 32) },
                                            v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                  PRE=[{ roots={ &this=v1 };
                                         mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                         attrs={ v1 -> { MustBeInitialized(, t=0),
                                                         MustBeValid(, None, t=0) },
                                                 v2 -> { MustBeInitialized(, t=0),
                                                         MustBeValid(, None, t=0) } };}]
                                  need_closure_specialization=false
                                  need_dynamic_type_specialization={ }
                                  skipped_calls={ }
                                  Topl={len=0;content=
                                         [  ]},
                                 conditions= [] timestamp= 4)
                             
                             Non-disj state:
                               copy map: { }, parameter map: { }, destructor checked: { },
                               captured: { }, locked: false, loads: ({ },{ }),process analysis end
 
                               passed to: { }{ proc_name= Specialization$C Specialization.buildCOnBoxAndDerefGood()
                                             ; translation_unit= DynamicDispatch.java
                                             ; formals= [(this,
                                                         codetoanalyze.java.infer.Specialization*)]
                                             ; is_defined= true
                                             ; loc= DynamicDispatch.java:411
                                             ; locals= [{ name= $irvar4; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                        { name= $irvar3; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                        { name= $irvar2; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                        { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                        { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
                                             ; ret_type= codetoanalyze.java.infer.Specialization$C* 
                                             ; proc_id= codetoanalyze.java.infer.Specialization.buildCOnBoxAndDerefGood():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 412];
      n$1=_fun_Specialization$A_Good.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 412];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Good*=n$0 [line 412];
      EXIT_SCOPE(n$0,n$1); [line 412];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box3):codetoanalyze.java.infer.Specialization$Box3*) [line 412];
      n$3=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Good* [line 412];
      n$4=_fun_Specialization$Box3.<init>(Specialization$A)(n$2:codetoanalyze.java.infer.Specialization$Box3*,n$3:codetoanalyze.java.infer.Specialization$A_Good*) [line 412];
      *&$irvar1:codetoanalyze.java.infer.Specialization$Box3*=n$2 [line 412];
      NULLIFY(&$irvar0); [line 412];
      EXIT_SCOPE(n$2,n$3,n$4,$irvar0); [line 412];
      
    #n6:
      n$5=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box2):codetoanalyze.java.infer.Specialization$Box2*) [line 412];
      n$6=*&$irvar1:codetoanalyze.java.infer.Specialization$Box3* [line 412];
      n$7=_fun_Specialization$Box2.<init>(Specialization$Box3)(n$5:codetoanalyze.java.infer.Specialization$Box2*,n$6:codetoanalyze.java.infer.Specialization$Box3*) [line 412];
      *&$irvar2:codetoanalyze.java.infer.Specialization$Box2*=n$5 [line 412];
      NULLIFY(&$irvar1); [line 412];
      EXIT_SCOPE(n$5,n$6,n$7,$irvar1); [line 412];
      
    #n7:
      n$8=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box1):codetoanalyze.java.infer.Specialization$Box1*) [line 412];
      n$9=*&$irvar2:codetoanalyze.java.infer.Specialization$Box2* [line 412];
      n$10=_fun_Specialization$Box1.<init>(Specialization$Box2)(n$8:codetoanalyze.java.infer.Specialization$Box1*,n$9:codetoanalyze.java.infer.Specialization$Box2*) [line 412];
      *&$irvar3:codetoanalyze.java.infer.Specialization$Box1*=n$8 [line 412];
      NULLIFY(&$irvar2); [line 412];
      EXIT_SCOPE(n$8,n$9,n$10,$irvar2); [line 412];
      
    #n8:
      n$11=*&this:codetoanalyze.java.infer.Specialization* [line 412];
      _=*n$11:codetoanalyze.java.infer.Specialization [line 412];
      n$13=*&$irvar3:codetoanalyze.java.infer.Specialization$Box1* [line 412];
      n$14=_fun_Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)(n$11:codetoanalyze.java.infer.Specialization*,n$13:codetoanalyze.java.infer.Specialization$Box1*) virtual [line 412];
      *&$irvar4:codetoanalyze.java.infer.Specialization$C*=n$14 [line 412];
      NULLIFY(&$irvar3); [line 412];
      NULLIFY(&this); [line 412];
      EXIT_SCOPE(_,n$11,n$13,n$14,$irvar3,this); [line 412];
      
    #n9:
      n$15=*&$irvar4:codetoanalyze.java.infer.Specialization$C* [line 412];
      n$16=*n$15.f:codetoanalyze.java.infer.Specialization$C* [line 412];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$16 [line 412];
      NULLIFY(&$irvar4); [line 412];
      EXIT_SCOPE(n$15,n$16,$irvar4); [line 412];
      APPLY_ABSTRACTION; [line 412];
      
    #n2:
      
    
    { proc_name= Specialization$A_Good.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization$A_Good*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:351
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.Specialization$A_Good.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$A_Good* [line 351];
      n$1=_fun_Specialization$A.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 351];
      NULLIFY(&this); [line 351];
      EXIT_SCOPE(n$0,n$1,this); [line 351];
      
    #n5:
      APPLY_ABSTRACTION; [line 351];
      
    process analysis
#n2:
      
    
    Specialization$A_Good.<init>1 disjuncts:
                                #0: (conditions: (empty)
                                     phi: term_eqs: Specialization$A_Good.<init>()([v2])=v4
                                     { roots={ &this=v1 };
                                       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                       attrs={ v1 -> { MustBeValid(, None, t=0) },
                                               v2 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                       MustBeValid(, None, t=0),
                                                       UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                                                    in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                                                    [
                                                                    ] ) } };}
                                     PRE=[{ roots={ &this=v1 };
                                            mem  ={ v1 -> { * -> v2 },
                                                    v2 -> { * -> v3 },
                                                    v3 -> { } };
                                            attrs={ v1 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v2 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) } };}]
                                     need_closure_specialization=false
                                     need_dynamic_type_specialization=
                                     { }
                                     skipped_calls={ Specialization$A_Good.<init>() -> call to skipped function occurs here }
                                     Topl={len=0;content=
                                            [  ]},
                                    conditions= [] timestamp= 7)
                                
                                Non-disj state:
                                  copy map: { }, parameter map: { }, 
                                  destructor checked: { }, captured: { }, 
                                  locked: false,
                                  loads: ({ n$0 -> { this } },{ this -> { line 351 -> { 1 } } }),
                                  passed to: { this -> { Specialization$A_Good.<init>() -> { line 351 -> { 2 } } } }process analysis end

{ proc_name= Specialization$Box3.<init>(Specialization$A)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization$Box3*);  (f3,
            codetoanalyze.java.infer.Specialization$A*)]
; is_defined= true
; loc= DynamicDispatch.java:398
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.Specialization$Box3.<init>(codetoanalyze.java.infer.Specialization$A) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$Box3* [line 398];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization$Box3*) [line 398];
      EXIT_SCOPE(n$0,n$1); [line 398];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization$Box3* [line 399];
      n$3=*&f3:codetoanalyze.java.infer.Specialization$A* [line 399];
      *n$2.f3:codetoanalyze.java.infer.Specialization$A*=n$3 [line 399];
      NULLIFY(&this); [line 399];
      NULLIFY(&f3); [line 399];
      EXIT_SCOPE(n$2,n$3,this,f3); [line 399];
      
    #n6:
      APPLY_ABSTRACTION; [line 400];
      
    process analysis
#n2:
      
    
    Specialization$Box3.<init>1 disjuncts:
                              #0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
                                   { roots={ &this=v1, &f3=v2 };
                                     mem  ={ v1 -> { * -> v3 },
                                             v2 -> { * -> v4 },
                                             v3 -> { f3 -> v7, * -> v5 },
                                             v7 -> { * -> v4 } };
                                     attrs={ v1 -> { MustBeValid(, None, t=0) },
                                             v2 -> { MustBeValid(, None, t=0) },
                                             v3 -> { DynamicType codetoanalyze.java.infer.Specialization$Box3, SourceFile [None],
                                                     MustBeValid(, None, t=0),
                                                     UnknownEffect(function `Object.<init>()` with no summary,
                                                                   in call to function `Object.<init>()` with no summary at line 398 :t2
                                                                   [] ) },
                                             v4 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
                                             v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                   PRE=[{ roots={ &this=v1, &f3=v2 };
                                          mem  ={ v1 -> { * -> v3 },
                                                  v2 -> { * -> v4 },
                                                  v3 -> { f3 -> v7, * -> v5 },
                                                  v4 -> { },
                                                  v5 -> { },
                                                  v7 -> { } };
                                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v2 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v3 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v7 -> { MustBeValid(, None, t=6) } };}]
                                   need_closure_specialization=false
                                   need_dynamic_type_specialization={ }
                                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                   Topl={len=0;content=
                                          [  ]},
                                  conditions= [] timestamp= 12)
                              
                              Non-disj state:
                                copy map: { }, parameter map: { }, destructor checked: { },
                                captured: { }, locked: false,
                                loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f3 } },
                                { this -> { line 398 -> { 1 }, line 399 -> { 4 } },
                                  f3 -> { line 399 -> { 5 } } }),
                                process analysis end
passed to: { this -> { Object.<init>() -> { line 398 -> { 2 } } } }
{ proc_name= Specialization$Box2.<init>(Specialization$Box3)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization$Box2*);  (f2,
            codetoanalyze.java.infer.Specialization$Box3*)]
; is_defined= true
; loc= DynamicDispatch.java:390
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.Specialization$Box2.<init>(codetoanalyze.java.infer.Specialization$Box3) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$Box2* [line 390];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization$Box2*) [line 390];
      EXIT_SCOPE(n$0,n$1); [line 390];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization$Box2* [line 391];
      n$3=*&f2:codetoanalyze.java.infer.Specialization$Box3* [line 391];
      *n$2.f2:codetoanalyze.java.infer.Specialization$Box3*=n$3 [line 391];
      NULLIFY(&f2); [line 391];
      NULLIFY(&this); [line 391];
      EXIT_SCOPE(n$2,n$3,f2,this); [line 391];
      
    #n6:
      APPLY_ABSTRACTION; [line 392];
      
    process analysis
#n2:
      
    
    Specialization$Box2.<init>1 disjuncts:
                              #0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
                                   { roots={ &f2=v2, &this=v1 };
                                     mem  ={ v1 -> { * -> v3 },
                                             v2 -> { * -> v4 },
                                             v3 -> { f2 -> v7, * -> v5 },
                                             v7 -> { * -> v4 } };
                                     attrs={ v1 -> { MustBeValid(, None, t=0) },
                                             v2 -> { MustBeValid(, None, t=0) },
                                             v3 -> { DynamicType codetoanalyze.java.infer.Specialization$Box2, SourceFile [None],
                                                     MustBeValid(, None, t=0),
                                                     UnknownEffect(function `Object.<init>()` with no summary,
                                                                   in call to function `Object.<init>()` with no summary at line 390 :t2
                                                                   [] ) },
                                             v4 -> { StaticType class codetoanalyze.java.infer.Specialization$Box3 },
                                             v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                   PRE=[{ roots={ &f2=v2, &this=v1 };
                                          mem  ={ v1 -> { * -> v3 },
                                                  v2 -> { * -> v4 },
                                                  v3 -> { f2 -> v7, * -> v5 },
                                                  v4 -> { },
                                                  v5 -> { },
                                                  v7 -> { } };
                                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v2 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v3 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v7 -> { MustBeValid(, None, t=6) } };}]
                                   need_closure_specialization=false
                                   need_dynamic_type_specialization={ }
                                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                   Topl={len=0;content=
                                          [  ]},
                                  conditions= [] timestamp= 12)
                              
                              Non-disj state:
                                copy map: { }, parameter map: { }, destructor checked: { },
                                captured: { }, locked: false,
                                loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f2 } },
                                { f2 -> { line 391 -> { 5 } },
                                  this -> { line 390 -> { 1 }, line 391 -> { 4 } } }),
                                process analysis end
passed to: { this -> { Object.<init>() -> { line 390 -> { 2 } } } }
{ proc_name= Specialization$Box1.<init>(Specialization$Box2)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization$Box1*);  (f1,
            codetoanalyze.java.infer.Specialization$Box2*)]
; is_defined= true
; loc= DynamicDispatch.java:382
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.Specialization$Box1.<init>(codetoanalyze.java.infer.Specialization$Box2) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$Box1* [line 382];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization$Box1*) [line 382];
      EXIT_SCOPE(n$0,n$1); [line 382];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization$Box1* [line 383];
      n$3=*&f1:codetoanalyze.java.infer.Specialization$Box2* [line 383];
      *n$2.f1:codetoanalyze.java.infer.Specialization$Box2*=n$3 [line 383];
      NULLIFY(&f1); [line 383];
      NULLIFY(&this); [line 383];
      EXIT_SCOPE(n$2,n$3,f1,this); [line 383];
      
    #n6:
      APPLY_ABSTRACTION; [line 384];
      
    process analysis
#n2:
      
    
    Specialization$Box1.<init>1 disjuncts:
                              #0: (conditions: (empty) phi: term_eqs: Object.<init>()([v3])=v6
                                   { roots={ &f1=v2, &this=v1 };
                                     mem  ={ v1 -> { * -> v3 },
                                             v2 -> { * -> v4 },
                                             v3 -> { f1 -> v7, * -> v5 },
                                             v7 -> { * -> v4 } };
                                     attrs={ v1 -> { MustBeValid(, None, t=0) },
                                             v2 -> { MustBeValid(, None, t=0) },
                                             v3 -> { DynamicType codetoanalyze.java.infer.Specialization$Box1, SourceFile [None],
                                                     MustBeValid(, None, t=0),
                                                     UnknownEffect(function `Object.<init>()` with no summary,
                                                                   in call to function `Object.<init>()` with no summary at line 382 :t2
                                                                   [] ) },
                                             v4 -> { StaticType class codetoanalyze.java.infer.Specialization$Box2 },
                                             v7 -> { MustBeValid(, None, t=6), WrittenTo (6, ) } };}
                                   PRE=[{ roots={ &f1=v2, &this=v1 };
                                          mem  ={ v1 -> { * -> v3 },
                                                  v2 -> { * -> v4 },
                                                  v3 -> { f1 -> v7, * -> v5 },
                                                  v4 -> { },
                                                  v5 -> { },
                                                  v7 -> { } };
                                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v2 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v3 -> { MustBeInitialized(, t=0),
                                                          MustBeValid(, None, t=0) },
                                                  v7 -> { MustBeValid(, None, t=6) } };}]
                                   need_closure_specialization=false
                                   need_dynamic_type_specialization={ }
                                   skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                   Topl={len=0;content=
                                          [  ]},
                                  conditions= [] timestamp= 12)
                              
                              Non-disj state:
                                copy map: { }, parameter map: { }, destructor checked: { },
                                captured: { }, locked: false,
                                loads: ({ n$0 -> { this }, n$2 -> { this }, n$3 -> { f1 } },
                                { f1 -> { line 383 -> { 5 } },
                                  this -> { line 382 -> { 1 }, line 383 -> { 4 } } }),
                                process analysis end
passed to: { this -> { Object.<init>() -> { line 382 -> { 2 } } } }
{ proc_name= Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*);  (box,
            codetoanalyze.java.infer.Specialization$Box1*)]
; is_defined= true
; loc= DynamicDispatch.java:403
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.callBuildCOnBoxGood(codetoanalyze.java.infer.Specialization$Box1):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&box:codetoanalyze.java.infer.Specialization$Box1* [line 404];
      n$1=*n$0.f1:codetoanalyze.java.infer.Specialization$Box2* [line 404];
      n$2=*n$1.f2:codetoanalyze.java.infer.Specialization$Box3* [line 404];
      n$3=*n$2.f3:codetoanalyze.java.infer.Specialization$A* [line 404];
      _=*n$3:codetoanalyze.java.infer.Specialization$A [line 404];
      n$5=_fun_Specialization$C Specialization$A.buildC()(n$3:codetoanalyze.java.infer.Specialization$A*) virtual [line 404];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$5 [line 404];
      NULLIFY(&box); [line 404];
      EXIT_SCOPE(_,n$0,n$1,n$2,n$3,n$5,box); [line 404];
      
    #n5:
      n$6=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 404];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$6 [line 404];
      NULLIFY(&$irvar0); [line 404];
      EXIT_SCOPE(n$6,$irvar0); [line 404];
      APPLY_ABSTRACTION; [line 404];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCOnBoxGood1 disjuncts:
                                      #0: (conditions: (empty)
                                           phi: term_eqs: Specialization$C Specialization$A.buildC()([v11])=v13
                                           { roots={ &box=v2, &this=v1, &return=v15 };
                                             mem  ={ v1 -> { * -> v3 },
                                                     v2 -> { * -> v4 },
                                                     v3 -> { * -> v5 },
                                                     v4 -> { f1 -> v6 },
                                                     v6 -> { * -> v7 },
                                                     v7 -> { f2 -> v8 },
                                                     v8 -> { * -> v9 },
                                                     v9 -> { f3 -> v10 },
                                                     v10 -> { * -> v11 },
                                                     v11 -> { * -> v12 },
                                                     v14 -> { * -> v13 },
                                                     v15 -> { * -> v13 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeValid(, None, t=2),
                                                             StaticType class codetoanalyze.java.infer.Specialization$Box1 },
                                                     v6 -> { MustBeValid(, None, t=2) },
                                                     v7 -> { MustBeValid(, None, t=3) },
                                                     v8 -> { MustBeValid(, None, t=3) },
                                                     v9 -> { MustBeValid(, None, t=4) },
                                                     v10 -> { MustBeValid(, None, t=4) },
                                                     v11 -> { MustBeValid(, None, t=5),
                                                              UnknownEffect(function `Specialization$C Specialization$A.buildC()` with no summary,
                                                                    in call to function `Specialization$C Specialization$A.buildC()` with no summary at line 404 :t6
                                                                    [
                                                                    ] ) },
                                                     v13 -> { PropagateTaintFrom([{v= v11}]),
                                                              ReturnedFromUnknown([v11]) },
                                                     v14 -> { MustBeValid(, None, t=7),
                                                              WrittenTo (7, ) },
                                                     v15 -> { MustBeValid(, None, t=11),
                                                              WrittenTo (11, ) } };}
                                           PRE=[{ roots={ &box=v2, &this=v1 };
                                                  mem  ={ v1 -> { * -> v3 },
                                                          v2 -> { * -> v4 },
                                                          v3 -> { * -> v5 },
                                                          v4 -> { f1 -> v6 },
                                                          v5 -> { },
                                                          v6 -> { * -> v7 },
                                                          v7 -> { f2 -> v8 },
                                                          v8 -> { * -> v9 },
                                                          v9 -> { f3 -> v10 },
                                                          v10 -> { * -> v11 },
                                                          v11 -> { * -> v12 },
                                                          v12 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2) },
                                                          v6 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2) },
                                                          v7 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v8 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v9 -> { MustBeInitialized(, t=4),
                                                                  MustBeValid(, None, t=4) },
                                                          v10 -> { MustBeInitialized(, t=4),
                                                                   MustBeValid(, None, t=4) },
                                                          v11 -> { MustBeInitialized(, t=5),
                                                                   MustBeValid(, None, t=5) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { v11 }
                                           skipped_calls={ Specialization$C Specialization$A.buildC() -> call to skipped function occurs here }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 16)
                                      
                                      Non-disj state:
                                        copy map: { }, parameter map: { }, 
                                        destructor checked: { }, captured: { }, 
                                        locked: false,
                                        loads: ({ n$0 -> { box }, n$6 -> { $irvar0 } },
                                        { box -> { line 404 -> { 1 } },
                                          $irvar0 -> { line 404 -> { 10 } } }),process analysis end

                                        passed to: { }{ proc_name= Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)
                                                      ; translation_unit= DynamicDispatch.java
                                                      ; formals= [(this,
                                                                  codetoanalyze.java.infer.Specialization*); 
                                                                  (box,
                                                                  codetoanalyze.java.infer.Specialization$Box1*)]
                                                      ; is_defined= true
                                                      ; loc= DynamicDispatch.java:403
                                                      ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
                                                      ; ret_type= codetoanalyze.java.infer.Specialization$C* 
                                                      ; proc_id= codetoanalyze.java.infer.Specialization.callBuildCOnBoxGood(codetoanalyze.java.infer.Specialization$Box1):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&box:codetoanalyze.java.infer.Specialization$Box1* [line 404];
      n$1=*n$0.f1:codetoanalyze.java.infer.Specialization$Box2* [line 404];
      n$2=*n$1.f2:codetoanalyze.java.infer.Specialization$Box3* [line 404];
      n$3=*n$2.f3:codetoanalyze.java.infer.Specialization$A* [line 404];
      _=*n$3:codetoanalyze.java.infer.Specialization$A [line 404];
      n$5=_fun_Specialization$C Specialization$A.buildC()(n$3:codetoanalyze.java.infer.Specialization$A*) virtual [line 404];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$5 [line 404];
      NULLIFY(&box); [line 404];
      EXIT_SCOPE(_,n$0,n$1,n$2,n$3,n$5,box); [line 404];
      
    #n5:
      n$6=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 404];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$6 [line 404];
      NULLIFY(&$irvar0); [line 404];
      EXIT_SCOPE(n$6,$irvar0); [line 404];
      APPLY_ABSTRACTION; [line 404];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCOnBoxGood1 disjuncts:
                                      #0: (conditions: (empty)
                                           phi: linear_eqs: v13 = a1 +1
                                                && term_eqs: Specialization$C.<init>()([v13])=v15
                                                             ∧[a1 +1]=v13
                                                && intervals: v13≥1
                                           { roots={ &box=v2, &this=v1, &return=v17 };
                                             mem  ={ v1 -> { * -> v3 },
                                                     v2 -> { * -> v4 },
                                                     v3 -> { * -> v11 },
                                                     v4 -> { f1 -> v5 },
                                                     v5 -> { * -> v6 },
                                                     v6 -> { f2 -> v7 },
                                                     v7 -> { * -> v8 },
                                                     v8 -> { f3 -> v9 },
                                                     v9 -> { * -> v10 },
                                                     v10 -> { * -> v12 },
                                                     v13 -> { * -> v14 },
                                                     v16 -> { * -> v13 },
                                                     v17 -> { * -> v13 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeValid(, None, t=2),
                                                             StaticType class codetoanalyze.java.infer.Specialization$Box1 },
                                                     v5 -> { MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeValid(, None, t=3) },
                                                     v7 -> { MustBeValid(, None, t=3) },
                                                     v8 -> { MustBeValid(, None, t=4) },
                                                     v9 -> { MustBeValid(, None, t=4) },
                                                     v10 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                              MustBeValid(, None, t=5) },
                                                     v13 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                              UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 404 :t6
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                     v16 -> { MustBeValid(, None, t=7),
                                                              WrittenTo (7, ) },
                                                     v17 -> { MustBeValid(, None, t=11),
                                                              WrittenTo (11, ) } };}
                                           PRE=[{ roots={ &box=v2, &this=v1 };
                                                  mem  ={ v1 -> { * -> v3 },
                                                          v2 -> { * -> v4 },
                                                          v3 -> { * -> v11 },
                                                          v4 -> { f1 -> v5 },
                                                          v5 -> { * -> v6 },
                                                          v6 -> { f2 -> v7 },
                                                          v7 -> { * -> v8 },
                                                          v8 -> { f3 -> v9 },
                                                          v9 -> { * -> v10 },
                                                          v10 -> { * -> v12 },
                                                          v11 -> { },
                                                          v12 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                  MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2),
                                                                  StaticType class codetoanalyze.java.infer.Specialization$Box1 },
                                                          v5 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2) },
                                                          v6 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v7 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v8 -> { MustBeInitialized(, t=4),
                                                                  MustBeValid(, None, t=4) },
                                                          v9 -> { MustBeInitialized(, t=4),
                                                                  MustBeValid(, None, t=4) },
                                                          v10 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                                   MustBeInitialized(, t=5),
                                                                   MustBeValid(, None, t=5) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { }
                                           skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 16)
                                      
                                      Non-disj state:
                                        copy map: { }, parameter map: { }, 
                                        destructor checked: { }, captured: { }, 
                                        locked: false,
                                        loads: ({ n$0 -> { box }, n$6 -> { $irvar0 } },
                                        { box -> { line 404 -> { 1 } },
                                          $irvar0 -> { line 404 -> { 10 } } }),process analysis end
process analysis

                                        passed to: { }Specialization.buildCOnBoxAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v10 = a2 +1 ∧ v16 = a3 +1 ∧ v22 = a4 +1 ∧ v28 = a5 +1
          && term_eqs: Object.<init>()([v10])=v13∧Object.<init>()([v16])=v19
                       ∧Object.<init>()([v22])=v25∧Specialization$A_Good.<init>()([v5])=v7
                       ∧Specialization$C.<init>()([v28])=v30∧[a1 +1]=v5
                       ∧[a2 +1]=v10∧[a3 +1]=v16∧[a4 +1]=v22∧[a5 +1]=v28
          && intervals: v5≥1 ∧ v10≥1 ∧ v16≥1 ∧ v22≥1 ∧ v28≥1
     { roots={ &this=v1, &return=v34 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v10 -> { f3 -> v11, * -> v12 },
               v11 -> { * -> v5 },
               v14 -> { * -> v10 },
               v16 -> { f2 -> v17, * -> v18 },
               v17 -> { * -> v10 },
               v20 -> { * -> v16 },
               v22 -> { f1 -> v23, * -> v24 },
               v23 -> { * -> v16 },
               v26 -> { * -> v22 },
               v28 -> { f -> v32, * -> v29 },
               v31 -> { * -> v28 },
               v32 -> { * -> v33 },
               v34 -> { * -> v33 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.Specialization$A,
                       UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 412 :t2
                                     [in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v10 -> { DynamicType codetoanalyze.java.infer.Specialization$Box3, SourceFile [None],
                        MustBeValid(, None, t=7),
                        StaticType class codetoanalyze.java.infer.Specialization$Box3,
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box3.<init>(Specialization$A)` at line 412 :t7
                                      [in call to function `Object.<init>()` with no summary at line 398 :t2
                                       [] ]
                                      ) },
               v11 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v14 -> { MustBeValid(, None, t=8), WrittenTo (8, ) },
               v16 -> { DynamicType codetoanalyze.java.infer.Specialization$Box2, SourceFile [None],
                        MustBeValid(, None, t=13),
                        StaticType class codetoanalyze.java.infer.Specialization$Box2,
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box2.<init>(Specialization$Box3)` at line 412 :t13
                                      [in call to function `Object.<init>()` with no summary at line 390 :t2
                                       [] ]
                                      ) },
               v17 -> { MustBeValid(, None, t=13), WrittenTo (13, ) },
               v20 -> { MustBeValid(, None, t=14), WrittenTo (14, ) },
               v22 -> { DynamicType codetoanalyze.java.infer.Specialization$Box1, SourceFile [None],
                        MustBeValid(, None, t=19),
                        UnknownEffect(function `Object.<init>()` with no summary,
                                      in call to `Specialization$Box1.<init>(Specialization$Box2)` at line 412 :t19
                                      [in call to function `Object.<init>()` with no summary at line 382 :t2
                                       [] ]
                                      ) },
               v23 -> { MustBeValid(, None, t=19), WrittenTo (19, ) },
               v26 -> { MustBeValid(, None, t=20), WrittenTo (20, ) },
               v28 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                        MustBeValid(, None, t=32),
                        UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)` at line 412 :t26
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 404 :t6
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v31 -> { MustBeValid(, None, t=27), WrittenTo (27, ) },
               v32 -> { MustBeValid(, None, t=32) },
               v34 -> { MustBeValid(, None, t=33), WrittenTo (33, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     Specialization$A_Good.<init>() -> call to skipped function occurs here,
                     Specialization$C.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 38)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$3 -> { $irvar0 },
            n$6 -> { $irvar1 },
            n$9 -> { $irvar2 },
            n$11 -> { this },
            n$13 -> { $irvar3 },
            n$15 -> { $irvar4 } },
  { $irvar4 -> { line 412 -> { 31 } },
    $irvar1 -> { line 412 -> { 12 } },
    $irvar3 -> { line 412 -> { 25 } },
    $irvar2 -> { line 412 -> { 18 } },
    this -> { line 412 -> { 23 } },
    $irvar0 -> { line 412 -> { 6 } } }),
  passed to: { $irvar1 -> { Specialization$Box2.<init>(Specialization$Box3) -> { line 412 -> { 13 } } },
               $irvar3 -> { Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1) -> { line 412 -> { 26 } } },
               $irvar2 -> { Specialization$Box1.<init>(Specialization$Box2) -> { line 412 -> { 19 } } },
               this -> { Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1) -> { line 412 -> { 26 } } },
               $irvar0 -> { Specialization$Box3.<init>(Specialization$A) -> { line 412 -> { 7 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCAndDerefGood()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:374
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCAndDerefGood():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 375];
      n$1=_fun_Specialization$A_Good.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 375];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Good*=n$0 [line 375];
      EXIT_SCOPE(n$0,n$1); [line 375];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization* [line 375];
      _=*n$2:codetoanalyze.java.infer.Specialization [line 375];
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Good* [line 375];
      n$5=_fun_Specialization$C Specialization.callBuildCGood(Specialization$A)(n$2:codetoanalyze.java.infer.Specialization*,n$4:codetoanalyze.java.infer.Specialization$A_Good*) virtual [line 375];
      *&$irvar1:codetoanalyze.java.infer.Specialization$C*=n$5 [line 375];
      NULLIFY(&this); [line 375];
      NULLIFY(&$irvar0); [line 375];
      EXIT_SCOPE(_,n$2,n$4,n$5,this,$irvar0); [line 375];
      
    #n6:
      n$6=*&$irvar1:codetoanalyze.java.infer.Specialization$C* [line 375];
      n$7=*n$6.f:codetoanalyze.java.infer.Specialization$C* [line 375];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$7 [line 375];
      NULLIFY(&$irvar1); [line 375];
      EXIT_SCOPE(n$6,n$7,$irvar1); [line 375];
      APPLY_ABSTRACTION; [line 375];
      
    #n2:
      
    
    { proc_name= Specialization$C Specialization.callBuildCGood(Specialization$A)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a,
                codetoanalyze.java.infer.Specialization$A*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:366
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.Specialization$C* 
    ; proc_id= codetoanalyze.java.infer.Specialization.callBuildCGood(codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&a:codetoanalyze.java.infer.Specialization$A* [line 367];
      _=*n$0:codetoanalyze.java.infer.Specialization$A [line 367];
      n$2=_fun_Specialization$C Specialization$A.buildC()(n$0:codetoanalyze.java.infer.Specialization$A*) virtual [line 367];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$2 [line 367];
      NULLIFY(&a); [line 367];
      EXIT_SCOPE(_,n$0,n$2,a); [line 367];
      
    #n5:
      n$3=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 367];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$3 [line 367];
      NULLIFY(&$irvar0); [line 367];
      EXIT_SCOPE(n$3,$irvar0); [line 367];
      APPLY_ABSTRACTION; [line 367];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCGood2 disjuncts:
                                 #0: (conditions: (empty)
                                      phi: linear_eqs: v10 = 0
                                           && term_eqs: 0=v10
                                           && intervals: v10=null
                                      { roots={ &a=v2, &this=v1, &return=v13 };
                                        mem  ={ v1 -> { * -> v3 },
                                                v2 -> { * -> v4 },
                                                v3 -> { * -> v5 },
                                                v4 -> { * -> v6 },
                                                v11 -> { * -> v10 },
                                                v13 -> { * -> v10 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v10 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                v11 -> { MustBeValid(, None, t=4),
                                                         WrittenTo (4, ) },
                                                v13 -> { MustBeValid(, None, t=8),
                                                         WrittenTo (8, ) } };}
                                      PRE=[{ roots={ &a=v2, &this=v1 };
                                             mem  ={ v1 -> { * -> v3 },
                                                     v2 -> { * -> v4 },
                                                     v3 -> { * -> v5 },
                                                     v4 -> { * -> v6 },
                                                     v5 -> { },
                                                     v6 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 13)
                                 #1: (conditions: (empty)
                                      phi: linear_eqs: v7 = a1 +1
                                           && term_eqs: Specialization$C.<init>()([v7])=v9
                                                        ∧[a1 +1]=v7
                                           && intervals: v7≥1
                                      { roots={ &a=v2, &this=v1, &return=v14 };
                                        mem  ={ v1 -> { * -> v3 },
                                                v2 -> { * -> v4 },
                                                v3 -> { * -> v5 },
                                                v4 -> { * -> v6 },
                                                v7 -> { * -> v8 },
                                                v12 -> { * -> v7 },
                                                v14 -> { * -> v7 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v7 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                        UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 367 :t3
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                v12 -> { MustBeValid(, None, t=4),
                                                         WrittenTo (4, ) },
                                                v14 -> { MustBeValid(, None, t=8),
                                                         WrittenTo (8, ) } };}
                                      PRE=[{ roots={ &a=v2, &this=v1 };
                                             mem  ={ v1 -> { * -> v3 },
                                                     v2 -> { * -> v4 },
                                                     v3 -> { * -> v5 },
                                                     v4 -> { * -> v6 },
                                                     v5 -> { },
                                                     v6 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 13)
                                 
                                 Non-disj state:
                                   copy map: { }, parameter map: { }, 
                                   destructor checked: { }, captured: { }, 
                                   locked: false,
                                   loads: ({ n$0 -> { a }, n$3 -> { $irvar0 } },
                                   { a -> { line 367 -> { 1 } }, $irvar0 -> { line 367 -> { 7 } } }),
                                   passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 367 -> { 3 } } } }process analysis end
process analysis
Specialization.buildCAndDerefGood
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1 ∧ v9 = a2 +1
          && term_eqs: Specialization$A_Good.<init>()([v5])=v7∧Specialization$C.<init>()([v9])=v11
                       ∧[a1 +1]=v5∧[a2 +1]=v9
          && intervals: v5≥1 ∧ v9≥1
     { roots={ &this=v1, &return=v15 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v6 },
               v8 -> { * -> v5 },
               v9 -> { f -> v13, * -> v10 },
               v12 -> { * -> v9 },
               v13 -> { * -> v14 },
               v15 -> { * -> v14 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 375 :t2
                                     [in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v9 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                       MustBeValid(, None, t=14),
                       UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                     in call to `Specialization$C Specialization.callBuildCGood(Specialization$A)` at line 375 :t8
                                     [in call to `Specialization$C Specialization$A_Good.buildC()` at line 367 :t3
                                      [in call to `Specialization$C.<init>()` at line 353 :t2
                                       [in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                        [] ]
                                       ]
                                      ]
                                     ) },
               v12 -> { MustBeValid(, None, t=9), WrittenTo (9, ) },
               v13 -> { MustBeValid(, None, t=14) },
               v15 -> { MustBeValid(, None, t=15), WrittenTo (15, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Specialization$A_Good.<init>() -> call to skipped function occurs here,
                     Specialization$C.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 20)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { $irvar0 }, n$6 -> { $irvar1 } },
  { $irvar1 -> { line 375 -> { 13 } },
    this -> { line 375 -> { 5 } },
    $irvar0 -> { line 375 -> { 7 } } }),
  passed to: { this -> { Specialization$C Specialization.callBuildCGood(Specialization$A) -> { line 375 -> { 8 } } },
               $irvar0 -> { Specialization$C Specialization.callBuildCGood(Specialization$A) -> { line 375 -> { 8 } } } }process analysis end

{ proc_name= void DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(DynamicDispatch$Interface)
; translation_unit= DynamicDispatch.java
; formals= [(i,codetoanalyze.java.infer.DynamicDispatch$Interface*)]
; is_defined= true
; loc= DynamicDispatch.java:151
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(codetoanalyze.java.infer.DynamicDispatch$Interface):void }
    #n1:
      
    #n4:
      n$0=*&i:codetoanalyze.java.infer.DynamicDispatch$Interface* [line 152];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Interface [line 152];
      n$2=_fun_Object DynamicDispatch$Interface.foo()(n$0:codetoanalyze.java.infer.DynamicDispatch$Interface*) interface virtual [line 152];
      *&$irvar0:java.lang.Object*=n$2 [line 152];
      NULLIFY(&i); [line 152];
      EXIT_SCOPE(_,n$0,n$2,i); [line 152];
      
    #n5:
      n$3=*&$irvar0:java.lang.Object* [line 152];
      _=*n$3:java.lang.Object [line 152];
      n$5=_fun_String Object.toString()(n$3:java.lang.Object*) virtual [line 152];
      *&$irvar1:java.lang.String*=n$5 [line 152];
      NULLIFY(&$irvar1); [line 152];
      NULLIFY(&$irvar0); [line 152];
      EXIT_SCOPE(_,n$3,n$5,$irvar1,$irvar0); [line 152];
      
    #n6:
      APPLY_ABSTRACTION; [line 153];
      
    process analysis
#n2:
      
    
    DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK1 disjuncts:
                                                                 #0: 
                                                                 ({AbortProgram 
                                                                 conditions: (empty) phi: (empty)
                                                                 { roots=
                                                                   { &i=v1 };
                                                                   mem  =
                                                                   { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 } };
                                                                   attrs=
                                                                   { v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Impl, SourceFile [None],
                                                                    StaticType class codetoanalyze.java.infer.DynamicDispatch$Interface } };}
                                                                 PRE=[{
                                                                  roots=
                                                                  { &i=v1 };
                                                                  mem  =
                                                                  { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 } };
                                                                  attrs=
                                                                  { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                                 need_closure_specialization=false
                                                                 need_dynamic_type_specialization=
                                                                 { }
                                                                 skipped_calls=
                                                                 { }
                                                                 Topl=
                                                                 {len=0;content=
                                                                   [  ]}},
                                                                 conditions= [] timestamp= 16)
                                                                 process analysis end

                                                                 Non-disj state: ⊤
{ proc_name= void DynamicDispatch.dynamicDispatchShouldNotCauseFalseNegativeEasyBad()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:181
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchShouldNotCauseFalseNegativeEasyBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 182];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 182];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 182];
      EXIT_SCOPE(n$0,n$1); [line 182];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 184];
      _=*n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype [line 184];
      n$4=_fun_Object DynamicDispatch$Subtype.foo()(n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 184];
      *&$irvar0:java.lang.Object*=n$4 [line 184];
      NULLIFY(&o); [line 184];
      EXIT_SCOPE(_,n$2,n$4,o); [line 184];
      
    #n6:
      n$5=*&$irvar0:java.lang.Object* [line 184];
      _=*n$5:java.lang.Object [line 184];
      n$7=_fun_String Object.toString()(n$5:java.lang.Object*) virtual [line 184];
      *&$irvar1:java.lang.String*=n$7 [line 184];
      NULLIFY(&$irvar1); [line 184];
      NULLIFY(&$irvar0); [line 184];
      EXIT_SCOPE(_,n$5,n$7,$irvar1,$irvar0); [line 184];
      
    #n7:
      APPLY_ABSTRACTION; [line 185];
      
    #n2:
      
    
    { proc_name= DynamicDispatch$Subtype.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Subtype*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:169
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Subtype.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 169];
      n$1=_fun_DynamicDispatch$Supertype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 169];
      NULLIFY(&this); [line 169];
      EXIT_SCOPE(n$0,n$1,this); [line 169];
      
    #n5:
      APPLY_ABSTRACTION; [line 169];
      
    process analysis
#n2:
      
    
    DynamicDispatch$Subtype.<init>1 disjuncts:
                                  #0: (conditions: (empty)
                                       phi: term_eqs: DynamicDispatch$Subtype.<init>()([v2])=v4
                                       { roots={ &this=v1 };
                                         mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                         attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                 v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                         MustBeValid(, None, t=0),
                                                         UnknownEffect(function `DynamicDispatch$Subtype.<init>()` with no summary,
                                                                    in call to function `DynamicDispatch$Subtype.<init>()` with no summary at line 169 :t2
                                                                    [
                                                                    ] ) } };}
                                       PRE=[{ roots={ &this=v1 };
                                              mem  ={ v1 -> { * -> v2 },
                                                      v2 -> { * -> v3 },
                                                      v3 -> { } };
                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v2 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) } };}]
                                       need_closure_specialization=false
                                       need_dynamic_type_specialization=
                                       { }
                                       skipped_calls={ DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here }
                                       Topl={len=0;content=
                                              [  ]},
                                      conditions= [] timestamp= 7)
                                  
                                  Non-disj state:
                                    copy map: { }, parameter map: { }, 
                                    destructor checked: { }, captured: { }, 
                                    locked: false,
                                    loads: ({ n$0 -> { this } },{ this -> { line 169 -> { 1 } } }),
                                    passed to: { this -> { DynamicDispatch$Subtype.<init>() -> { line 169 -> { 2 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchShouldNotCauseFalseNegativeEasyBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 20)
process analysis end

Non-disj state: ⊤{ proc_name= void DynamicDispatch.callWithBadImplementationBad_FN(DynamicDispatch$Impl)
                   ; translation_unit= DynamicDispatch.java
                   ; formals= [(impl,codetoanalyze.java.infer.DynamicDispatch$Impl*)]
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:155
                   ; locals= []
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.DynamicDispatch.callWithBadImplementationBad_FN(codetoanalyze.java.infer.DynamicDispatch$Impl):void }
    #n1:
      
    #n4:
      n$0=*&impl:codetoanalyze.java.infer.DynamicDispatch$Impl* [line 156];
      n$1=_fun_void DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(DynamicDispatch$Interface)(n$0:codetoanalyze.java.infer.DynamicDispatch$Impl*) [line 156];
      NULLIFY(&impl); [line 156];
      EXIT_SCOPE(n$0,n$1,impl); [line 156];
      
    #n5:
      APPLY_ABSTRACTION; [line 157];
      
    process analysis
#n2:
      
    
    DynamicDispatch.callWithBadImplementationBad_FN1 disjuncts:
                                                   #0: ({AbortProgram 
                                                       conditions: (empty) phi: (empty)
                                                       { roots={ &impl=v1 };
                                                         mem  ={ v1 -> { * -> v2 },
                                                                 v2 -> { * -> v3 } };
                                                         attrs={ v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Impl, SourceFile [None],
                                                                    StaticType class codetoanalyze.java.infer.DynamicDispatch$Impl } };}
                                                       PRE=[{ roots={ &impl=v1 };
                                                              mem  ={ v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 } };
                                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                       need_closure_specialization=false
                                                       need_dynamic_type_specialization=
                                                       { }
                                                       skipped_calls=
                                                       { }
                                                       Topl={len=0;content=
                                                              [  ]}},
                                                       conditions= [] timestamp= 7)
                                                   process analysis end

                                                   Non-disj state: ⊤
{ proc_name= Specialization$C Specialization.buildCAndDerefNeedPartialSpecializationGood(Specialization$A)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a,
            codetoanalyze.java.infer.Specialization$A*)]
; is_defined= true
; loc= DynamicDispatch.java:449
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCAndDerefNeedPartialSpecializationGood(codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 450];
      n$1=_fun_Specialization$A_Good.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 450];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Good*=n$0 [line 450];
      EXIT_SCOPE(n$0,n$1); [line 450];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization* [line 450];
      _=*n$2:codetoanalyze.java.infer.Specialization [line 450];
      n$4=*&a:codetoanalyze.java.infer.Specialization$A* [line 450];
      n$5=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Good* [line 450];
      n$6=_fun_Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)(n$2:codetoanalyze.java.infer.Specialization*,n$4:codetoanalyze.java.infer.Specialization$A*,n$5:codetoanalyze.java.infer.Specialization$A_Good*) virtual [line 450];
      *&$irvar1:codetoanalyze.java.infer.Specialization$C*=n$6 [line 450];
      NULLIFY(&a); [line 450];
      NULLIFY(&this); [line 450];
      NULLIFY(&$irvar0); [line 450];
      EXIT_SCOPE(_,n$2,n$4,n$5,n$6,a,this,$irvar0); [line 450];
      
    #n6:
      n$7=*&$irvar1:codetoanalyze.java.infer.Specialization$C* [line 450];
      n$8=*n$7.f:codetoanalyze.java.infer.Specialization$C* [line 450];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$8 [line 450];
      NULLIFY(&$irvar1); [line 450];
      EXIT_SCOPE(n$7,n$8,$irvar1); [line 450];
      APPLY_ABSTRACTION; [line 450];
      
    #n2:
      
    
    { proc_name= Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a1,
                codetoanalyze.java.infer.Specialization$A*);  (a2,
                codetoanalyze.java.infer.Specialization$A*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:440
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
               { name= $T0_12; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.Specialization$C* 
    ; proc_id= codetoanalyze.java.infer.Specialization.callBuildCTwiceGood(codetoanalyze.java.infer.Specialization$A,codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&a1:codetoanalyze.java.infer.Specialization$A* [line 442];
      PRUNE(!(n$0 != null), true); [line 442];
      NULLIFY(&a1); [line 442];
      EXIT_SCOPE(n$0,a1); [line 442];
      
    #n6:
      *&$T0_12:java.lang.Object*=null [line 442];
      APPLY_ABSTRACTION; [line 442];
      
    #n5:
      n$0=*&a1:codetoanalyze.java.infer.Specialization$A* [line 442];
      PRUNE((n$0 != null), false); [line 442];
      NULLIFY(&a1); [line 442];
      EXIT_SCOPE(n$0,a1); [line 442];
      
    #n7:
      n$1=*&a2:codetoanalyze.java.infer.Specialization$A* [line 442];
      _=*n$1:codetoanalyze.java.infer.Specialization$A [line 442];
      n$3=_fun_Specialization$C Specialization$A.buildC()(n$1:codetoanalyze.java.infer.Specialization$A*) virtual [line 442];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$3 [line 442];
      NULLIFY(&a2); [line 442];
      EXIT_SCOPE(_,n$1,n$3,a2); [line 442];
      
    #n8:
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 442];
      *&$T0_12:codetoanalyze.java.infer.Specialization$C*=n$4 [line 442];
      NULLIFY(&$irvar0); [line 442];
      EXIT_SCOPE(n$4,$irvar0); [line 442];
      APPLY_ABSTRACTION; [line 442];
      
    #n9:
      n$5=*&$T0_12:codetoanalyze.java.infer.Specialization$C* [line 442];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$5 [line 442];
      NULLIFY(&$T0_12); [line 442];
      EXIT_SCOPE(n$5,$T0_12); [line 442];
      APPLY_ABSTRACTION; [line 442];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCTwiceGood3 disjuncts:
                                      #0: (conditions: {[v5] = 0}
                                           phi: var_eqs: v5=v8
                                                && linear_eqs: v5 = 0
                                                && term_eqs: 0=v5
                                                && intervals: v5=null ∧ v8=null
                                           { roots={ &a2=v3, &this=v1, &return=v19, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v9 -> { * -> v8 },
                                                     v19 -> { * -> v5 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeValid(, None, t=0) },
                                                     v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { Invalid ConstantDereference(is assigned to the null pointer),
                                                             StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v6 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v9 -> { MustBeValid(, None, t=5),
                                                             WrittenTo (5, ) },
                                                     v19 -> { MustBeValid(, None, t=8),
                                                              WrittenTo (8, ) } };}
                                           PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v6 },
                                                          v4 -> { * -> v7 },
                                                          v5 -> { },
                                                          v6 -> { },
                                                          v7 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { }
                                           skipped_calls={ }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 13)
                                      #1: (conditions: {[v5] ≠ 0}
                                           phi: linear_eqs: v14 = 0
                                                && term_eqs: 0=v14
                                                && intervals: v5≠null ∧ v14=null
                                                && atoms: {[v5] ≠ 0}
                                           { roots={ &a2=v3, &this=v1, &return=v20, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v6 -> { * -> v10 },
                                                     v15 -> { * -> v14 },
                                                     v17 -> { * -> v14 },
                                                     v20 -> { * -> v14 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeValid(, None, t=0) },
                                                     v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                             MustBeValid(, None, t=6),
                                                             StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v14 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                     v15 -> { MustBeValid(, None, t=8),
                                                              WrittenTo (8, ) },
                                                     v17 -> { MustBeValid(, None, t=12),
                                                              WrittenTo (12, ) },
                                                     v20 -> { MustBeValid(, None, t=17),
                                                              WrittenTo (17, ) } };}
                                           PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v6 },
                                                          v4 -> { * -> v7 },
                                                          v5 -> { },
                                                          v6 -> { * -> v10 },
                                                          v7 -> { },
                                                          v10 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) },
                                                          v6 -> { MustBeInitialized(, t=6),
                                                                  MustBeValid(, None, t=6) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { }
                                           skipped_calls={ }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 22)
                                      #2: (conditions: {[v5] ≠ 0}
                                           phi: linear_eqs: v11 = a1 +1
                                                && term_eqs: Specialization$C.<init>()([v11])=v13
                                                             ∧[a1 +1]=v11
                                                && intervals: v5≠null ∧ v11≥1
                                                && atoms: {[v5] ≠ 0}
                                           { roots={ &a2=v3, &this=v1, &return=v21, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v6 -> { * -> v10 },
                                                     v11 -> { * -> v12 },
                                                     v16 -> { * -> v11 },
                                                     v18 -> { * -> v11 },
                                                     v21 -> { * -> v11 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeValid(, None, t=0) },
                                                     v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                             MustBeValid(, None, t=6),
                                                             StaticType class codetoanalyze.java.infer.Specialization$A },
                                                     v11 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                              UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 442 :t7
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                     v16 -> { MustBeValid(, None, t=8),
                                                              WrittenTo (8, ) },
                                                     v18 -> { MustBeValid(, None, t=12),
                                                              WrittenTo (12, ) },
                                                     v21 -> { MustBeValid(, None, t=17),
                                                              WrittenTo (17, ) } };}
                                           PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v6 },
                                                          v4 -> { * -> v7 },
                                                          v5 -> { },
                                                          v6 -> { * -> v10 },
                                                          v7 -> { },
                                                          v10 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) },
                                                          v6 -> { MustBeInitialized(, t=6),
                                                                  MustBeValid(, None, t=6) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { }
                                           skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 22)
                                      
                                      Non-disj state:
                                        copy map: { }, parameter map: { }, 
                                        destructor checked: { }, captured: { }, 
                                        locked: false,
                                        loads: ({ n$0 -> { a1 },
                                                  n$1 -> { a2 },
                                                  n$4 -> { $irvar0 },
                                                  n$5 -> { $T0_12 } },
                                        { a2 -> { line 442 -> { 5 } },
                                          $irvar0 -> { line 442 -> { 11 } },
                                          $T0_12 -> { line 442 -> { 7, 16 } },
                                          a1 -> { line 442 -> { 1 } } }),
                                        passed to: { a2 -> { Specialization$C Specialization$A.buildC() -> { line 442 -> { 7 } } } }process analysis end
process analysis
Specialization.buildCAndDerefNeedPartialSpecializationGood
2 disjuncts:
#0: (conditions: {[v4] ≠ 0}
     phi: linear_eqs: v7 = a1 +1 ∧ v11 = a2 +1
          && term_eqs: Specialization$A_Good.<init>()([v7])=v9∧Specialization$C.<init>()([v11])=v13
                       ∧[a1 +1]=v7∧[a2 +1]=v11
          && intervals: v4≠null ∧ v7≥1 ∧ v11≥1
          && atoms: {[v4] ≠ 0}
     { roots={ &a=v2, &this=v1, &return=v18 };
       mem  ={ v1 -> { * -> v3 },
               v2 -> { * -> v4 },
               v3 -> { * -> v5 },
               v7 -> { * -> v8 },
               v10 -> { * -> v7 },
               v11 -> { f -> v16, * -> v12 },
               v14 -> { * -> v11 },
               v16 -> { * -> v17 },
               v18 -> { * -> v17 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { MustBeValid(, None, t=0) },
               v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                       MustBeValid(, None, t=0) },
               v4 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
               v7 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                     in call to `Specialization$A_Good.<init>()` at line 450 :t2
                                     [in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                      [] ]
                                     ) },
               v10 -> { MustBeValid(, None, t=3), WrittenTo (3, ) },
               v11 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                        MustBeValid(, None, t=16),
                        UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                      in call to `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` at line 450 :t9
                                      [in call to `Specialization$C Specialization$A_Good.buildC()` at line 442 :t7
                                       [in call to `Specialization$C.<init>()` at line 353 :t2
                                        [in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                         [] ]
                                        ]
                                       ]
                                      ) },
               v14 -> { MustBeValid(, None, t=10), WrittenTo (10, ) },
               v16 -> { MustBeValid(, None, t=16) },
               v18 -> { MustBeValid(, None, t=17), WrittenTo (17, ) } };}
     PRE=[{ roots={ &a=v2, &this=v1 };
            mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 }, v4 -> { }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Specialization$A_Good.<init>() -> call to skipped function occurs here,
                     Specialization$C.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)
#1: ({LatentAbortProgram(line 450: `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 450) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v4]:Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A);
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: {[v4] = 0} phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
    { roots={ &a=v2, &this=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
      attrs={ v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] },
              v4 -> { Invalid ConstantDereference(is assigned to the null pointer),
                      StaticType class codetoanalyze.java.infer.Specialization$A } };}
    PRE=[{ roots={ &a=v2, &this=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v4 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ }
    skipped_calls={ Specialization$A_Good.<init>() -> call to skipped function occurs here }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { a }, n$5 -> { $irvar0 }, n$7 -> { $irvar1 } },
  { $irvar1 -> { line 450 -> { 15 } },
    a -> { line 450 -> { 7 } },
    this -> { line 450 -> { 5 } },
    $irvar0 -> { line 450 -> { 8 } } }),
  passed to: { a -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } },
               this -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } },
               $irvar0 -> { Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A) -> { line 450 -> { 9 } } } }process analysis end

{ proc_name= Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch*);  (args,
            codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*))]
; is_defined= true
; loc= DynamicDispatch.java:267
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= java.lang.Object* 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.variadicMethod(codetoanalyze.java.infer.DynamicDispatch$Supertype[]):java.lang.Object }
    #n1:
      
    #n4:
      n$0=*&args:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 268];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_] [line 268];
      n$2=_fun___get_array_length(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*)) [line 268];
      PRUNE(!(n$2 != 0), true); [line 268];
      NULLIFY(&args); [line 268];
      EXIT_SCOPE(_,n$0,n$2,args); [line 268];
      
    #n6:
      *&return:java.lang.Object*=null [line 269];
      APPLY_ABSTRACTION; [line 269];
      
    #n5:
      n$0=*&args:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 268];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_] [line 268];
      n$2=_fun___get_array_length(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*)) [line 268];
      PRUNE((n$2 != 0), false); [line 268];
      EXIT_SCOPE(_,n$0,n$2); [line 268];
      
    #n7:
      n$3=*&args:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 271];
      _=*n$3:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_] [line 271];
      n$5=*n$3[0]:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 271];
      _=*n$5:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 271];
      n$7=_fun_Object DynamicDispatch$Supertype.foo()(n$5:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 271];
      *&$irvar0:java.lang.Object*=n$7 [line 271];
      NULLIFY(&args); [line 271];
      EXIT_SCOPE(_,_,n$3,n$5,n$7,args); [line 271];
      
    #n8:
      n$8=*&$irvar0:java.lang.Object* [line 271];
      *&return:java.lang.Object*=n$8 [line 271];
      NULLIFY(&$irvar0); [line 271];
      EXIT_SCOPE(n$8,$irvar0); [line 271];
      APPLY_ABSTRACTION; [line 271];
      
    process analysis
#n2:
      
    
    DynamicDispatch.variadicMethod2 disjuncts:
                                  #0: (conditions: {[a1] = 0}
                                       phi: var_eqs: a1=v7=v8
                                            && linear_eqs: a1 = 0
                                            && term_eqs: 0=a1
                                            && intervals: a1=0 ∧ v7≥0 ∧ v8=null
                                       { roots={ &this=v1, &args=v2, &return=v9 };
                                         mem  ={ v1 -> { * -> v3 },
                                                 v2 -> { * -> v5 },
                                                 v3 -> { * -> v4 },
                                                 v5 -> { * -> v6 },
                                                 v9 -> { * -> v8 } };
                                         attrs={ a1 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                 v1 -> { MustBeValid(, None, t=0) },
                                                 v2 -> { MustBeValid(, None, t=0) },
                                                 v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                                                         MustBeValid(, None, t=0) },
                                                 v5 -> { MustBeValid(, None, t=2) },
                                                 v9 -> { MustBeValid(, None, t=7),
                                                         WrittenTo (7, ) } };}
                                       PRE=[{ roots={ &this=v1, &args=v2 };
                                              mem  ={ v1 -> { * -> v3 },
                                                      v2 -> { * -> v5 },
                                                      v3 -> { * -> v4 },
                                                      v4 -> { },
                                                      v5 -> { * -> v6 },
                                                      v6 -> { } };
                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v2 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v3 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v5 -> { MustBeInitialized(, t=2),
                                                              MustBeValid(, None, t=2) } };}]
                                       need_closure_specialization=false
                                       need_dynamic_type_specialization=
                                       { }
                                       skipped_calls={ }
                                       Topl={len=0;content=
                                              [  ]},
                                      conditions= [] timestamp= 10)
                                  #1: (conditions: {[a2] ≠ 0}
                                       phi: var_eqs: a2=v11
                                            && linear_eqs: v8 = 0 ∧ v15 = a3 +1
                                            && term_eqs: 0=v8∧Object.<init>()([v15])=v16
                                                         ∧[a3 +1]=v15
                                            && intervals: a2≠0 ∧ v8=0 ∧ v11≥0 ∧ v15≥1
                                            && atoms: {[a2] ≠ 0}
                                       { roots={ &this=v1, &args=v2, &return=v18 };
                                         mem  ={ v1 -> { * -> v3 },
                                                 v2 -> { * -> v5 },
                                                 v3 -> { * -> v4 },
                                                 v5 -> { [v8] -> v12, * -> v10 },
                                                 v12 -> { * -> v13 },
                                                 v13 -> { * -> v14 },
                                                 v17 -> { * -> v15 },
                                                 v18 -> { * -> v15 } };
                                         attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                 v2 -> { MustBeValid(, None, t=0) },
                                                 v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                                                         MustBeValid(, None, t=0) },
                                                 v5 -> { MustBeValid(, None, t=2) },
                                                 v8 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                 v12 -> { MustBeValid(, None, t=8) },
                                                 v13 -> { MustBeValid(, None, t=9) },
                                                 v15 -> { DynamicType java.lang.Object, SourceFile [None],
                                                          UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Supertype.foo()` at line 271 :t10
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ] ) },
                                                 v17 -> { MustBeValid(, None, t=11),
                                                          WrittenTo (11, ) },
                                                 v18 -> { MustBeValid(, None, t=15),
                                                          WrittenTo (15, ) } };}
                                       PRE=[{ roots={ &this=v1, &args=v2 };
                                              mem  ={ v1 -> { * -> v3 },
                                                      v2 -> { * -> v5 },
                                                      v3 -> { * -> v4 },
                                                      v4 -> { },
                                                      v5 -> { [v8] -> v12, * -> v10 },
                                                      v10 -> { },
                                                      v12 -> { * -> v13 },
                                                      v13 -> { * -> v14 },
                                                      v14 -> { } };
                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v2 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v3 -> { MustBeInitialized(, t=0),
                                                              MustBeValid(, None, t=0) },
                                                      v5 -> { MustBeInitialized(, t=2),
                                                              MustBeValid(, None, t=2) },
                                                      v12 -> { MustBeInitialized(, t=8),
                                                               MustBeValid(, None, t=8) },
                                                      v13 -> { MustBeInitialized(, t=9),
                                                               MustBeValid(, None, t=9) } };}]
                                       need_closure_specialization=false
                                       need_dynamic_type_specialization=
                                       { v13 }
                                       skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                       Topl={len=0;content=
                                              [  ]},
                                      conditions= [] timestamp= 20)
                                  
                                  Non-disj state:
                                    copy map: { }, parameter map: { }, 
                                    destructor checked: { }, captured: { }, 
                                    locked: false,
                                    loads: ({ n$0 -> { args },
                                              n$3 -> { args },
                                              n$8 -> { $irvar0 } },
                                    { $irvar0 -> { line 271 -> { 14 } },
                                      args -> { line 268 -> { 1 }, line 271 -> { 6 } } }),
                                    passed to: { args -> { __get_array_length -> { line 268 -> { 3 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCAndDerefNeedPartialSpecializationBad(Specialization$A)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a,
            codetoanalyze.java.infer.Specialization$A*)]
; is_defined= true
; loc= DynamicDispatch.java:445
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCAndDerefNeedPartialSpecializationBad(codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$A_Bad*) [line 446];
      n$1=_fun_Specialization$A_Bad.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Bad*) [line 446];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad*=n$0 [line 446];
      EXIT_SCOPE(n$0,n$1); [line 446];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization* [line 446];
      _=*n$2:codetoanalyze.java.infer.Specialization [line 446];
      n$4=*&a:codetoanalyze.java.infer.Specialization$A* [line 446];
      n$5=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad* [line 446];
      n$6=_fun_Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)(n$2:codetoanalyze.java.infer.Specialization*,n$4:codetoanalyze.java.infer.Specialization$A*,n$5:codetoanalyze.java.infer.Specialization$A_Bad*) virtual [line 446];
      *&$irvar1:codetoanalyze.java.infer.Specialization$C*=n$6 [line 446];
      NULLIFY(&a); [line 446];
      NULLIFY(&this); [line 446];
      NULLIFY(&$irvar0); [line 446];
      EXIT_SCOPE(_,n$2,n$4,n$5,n$6,a,this,$irvar0); [line 446];
      
    #n6:
      n$7=*&$irvar1:codetoanalyze.java.infer.Specialization$C* [line 446];
      n$8=*n$7.f:codetoanalyze.java.infer.Specialization$C* [line 446];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$8 [line 446];
      NULLIFY(&$irvar1); [line 446];
      EXIT_SCOPE(n$7,n$8,$irvar1); [line 446];
      APPLY_ABSTRACTION; [line 446];
      
    #n2:
      
    
    { proc_name= Specialization$A_Bad.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization$A_Bad*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:358
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.Specialization$A_Bad.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$A_Bad* [line 358];
      n$1=_fun_Specialization$A.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Bad*) [line 358];
      NULLIFY(&this); [line 358];
      EXIT_SCOPE(n$0,n$1,this); [line 358];
      
    #n5:
      APPLY_ABSTRACTION; [line 358];
      
    process analysis
#n2:
      
    
    Specialization$A_Bad.<init>1 disjuncts:
                               #0: (conditions: (empty)
                                    phi: term_eqs: Specialization$A_Bad.<init>()([v2])=v4
                                    { roots={ &this=v1 };
                                      mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                      attrs={ v1 -> { MustBeValid(, None, t=0) },
                                              v2 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                      MustBeValid(, None, t=0),
                                                      UnknownEffect(function `Specialization$A_Bad.<init>()` with no summary,
                                                                    in call to function `Specialization$A_Bad.<init>()` with no summary at line 358 :t2
                                                                    [
                                                                    ] ) } };}
                                    PRE=[{ roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { * -> v3 },
                                                   v3 -> { } };
                                           attrs={ v1 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) },
                                                   v2 -> { MustBeInitialized(, t=0),
                                                           MustBeValid(, None, t=0) } };}]
                                    need_closure_specialization=false
                                    need_dynamic_type_specialization=
                                    { }
                                    skipped_calls={ Specialization$A_Bad.<init>() -> call to skipped function occurs here }
                                    Topl={len=0;content=
                                           [  ]},
                                   conditions= [] timestamp= 7)
                               
                               Non-disj state:
                                 copy map: { }, parameter map: { }, destructor checked: { },
                                 captured: { }, locked: false,
                                 loads: ({ n$0 -> { this } },{ this -> { line 358 -> { 1 } } }),
                                 passed to: { this -> { Specialization$A_Bad.<init>() -> { line 358 -> { 2 } } } }process analysis end
process analysis
Specialization.buildCAndDerefNeedPartialSpecializationBad
2 disjuncts:
#0: ({LatentAbortProgram(line 446: `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 446) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v11]:Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A);
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: {[v4] ≠ 0} phi: intervals: v4≠null && atoms: {[v4] ≠ 0}
    { roots={ &a=v2, &this=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
      attrs={ v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] },
              v4 -> { StaticType class codetoanalyze.java.infer.Specialization$A } };}
    PRE=[{ roots={ &a=v2, &this=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v4 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ }
    skipped_calls={ Specialization$A_Bad.<init>() -> call to skipped function occurs here }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 22)
#1: ({AbortProgram conditions: {[v4] = 0}
                   phi: linear_eqs: v4 = 0 && term_eqs: 0=v4 && intervals: v4=null
                   { roots={ &a=v2, &this=v1 };
                     mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
                     attrs={ v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] },
                             v4 -> { Invalid ConstantDereference(is assigned to the null pointer),
                                     StaticType class codetoanalyze.java.infer.Specialization$A } };}
                   PRE=[{ roots={ &a=v2, &this=v1 };
                          mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 }, v3 -> { * -> v5 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v3 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v4 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A), line 442, ) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Specialization$A_Bad.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 22)
process analysis end

Non-disj state: ⊤{ proc_name= Specialization.<init>()
                   ; translation_unit= DynamicDispatch.java
                   ; formals= [(this,codetoanalyze.java.infer.Specialization*)]
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:337
                   ; locals= []
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.Specialization.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization* [line 337];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization*) [line 337];
      NULLIFY(&this); [line 337];
      EXIT_SCOPE(n$0,n$1,this); [line 337];
      
    #n5:
      APPLY_ABSTRACTION; [line 337];
      
    process analysis
#n2:
      
    
    Specialization.<init>1 disjuncts:
                         #0: (conditions: (empty) phi: term_eqs: Specialization.<init>()([v2])=v4
                              { roots={ &this=v1 };
                                mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                attrs={ v1 -> { MustBeValid(, None, t=0) },
                                        v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                MustBeValid(, None, t=0),
                                                UnknownEffect(function `Specialization.<init>()` with no summary,
                                                              in call to function `Specialization.<init>()` with no summary at line 337 :t2
                                                              [] ) } };}
                              PRE=[{ roots={ &this=v1 };
                                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                     attrs={ v1 -> { MustBeInitialized(, t=0),
                                                     MustBeValid(, None, t=0) },
                                             v2 -> { MustBeInitialized(, t=0),
                                                     MustBeValid(, None, t=0) } };}]
                              need_closure_specialization=false
                              need_dynamic_type_specialization={ }
                              skipped_calls={ Specialization.<init>() -> call to skipped function occurs here }
                              Topl={len=0;content=
                                     [  ]},
                             conditions= [] timestamp= 7)
                         
                         Non-disj state:
                           copy map: { }, parameter map: { }, destructor checked: { },
                           captured: { }, locked: false,
                           loads: ({ n$0 -> { this } },{ this -> { line 337 -> { 1 } } }),
                           passed to: { this -> { Specialization.<init>() -> { line 337 -> { 2 } } } }process analysis end

{ proc_name= Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a,
            codetoanalyze.java.infer.Specialization$A*);  (b,_Bool)]
; is_defined= true
; loc= DynamicDispatch.java:428
; locals= [{ name= $T0_12; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.callBuildCWithEmptyPaths(codetoanalyze.java.infer.Specialization$A,boolean):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&b:_Bool [line 429];
      PRUNE(!(n$0 == 0), true); [line 429];
      NULLIFY(&b); [line 429];
      EXIT_SCOPE(n$0,b); [line 429];
      
    #n6:
      n$1=*&a:codetoanalyze.java.infer.Specialization$A* [line 429];
      _=*n$1:codetoanalyze.java.infer.Specialization$A [line 429];
      n$3=_fun_Specialization$C Specialization$A.buildC()(n$1:codetoanalyze.java.infer.Specialization$A*) virtual [line 429];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$3 [line 429];
      NULLIFY(&a); [line 429];
      EXIT_SCOPE(_,n$1,n$3,a); [line 429];
      
    #n7:
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 429];
      *&$T0_12:codetoanalyze.java.infer.Specialization$C*=n$4 [line 429];
      NULLIFY(&$irvar0); [line 429];
      EXIT_SCOPE(n$4,$irvar0); [line 429];
      APPLY_ABSTRACTION; [line 429];
      
    #n5:
      n$0=*&b:_Bool [line 429];
      PRUNE((n$0 == 0), false); [line 429];
      NULLIFY(&b); [line 429];
      EXIT_SCOPE(n$0,b); [line 429];
      
    #n8:
      *&$T0_12:java.lang.Object*=null [line 429];
      APPLY_ABSTRACTION; [line 429];
      
    #n9:
      n$5=*&$T0_12:java.lang.Object* [line 429];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$5 [line 429];
      NULLIFY(&$T0_12); [line 429];
      EXIT_SCOPE(n$5,$T0_12); [line 429];
      APPLY_ABSTRACTION; [line 429];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCWithEmptyPaths3 disjuncts:
                                           #0: (conditions: {[v7] ≠ 0}
                                                phi: linear_eqs: v12 = 0
                                                     && term_eqs: 0=v12
                                                     && intervals: v7≠0 ∧ v12=null
                                                     && atoms: {is_int([v7]) = 1}∧{[v7] ≠ 0}
                                                { roots={ &b=v3, &a=v2, &this=v1, &return=v19 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v7 },
                                                          v4 -> { * -> v6 },
                                                          v5 -> { * -> v8 },
                                                          v13 -> { * -> v12 },
                                                          v15 -> { * -> v12 },
                                                          v19 -> { * -> v12 } };
                                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeValid(, None, t=0) },
                                                          v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                                  MustBeValid(, None, t=6),
                                                                  StaticType class codetoanalyze.java.infer.Specialization$A },
                                                          v12 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                          v13 -> { MustBeValid(, None, t=8),
                                                                   WrittenTo (8, ) },
                                                          v15 -> { MustBeValid(, None, t=12),
                                                                   WrittenTo (12, ) },
                                                          v19 -> { MustBeValid(, None, t=17),
                                                                   WrittenTo (17, ) } };}
                                                PRE=[{ roots={ &b=v3, &a=v2, &this=v1 };
                                                       mem  ={ v1 -> { * -> v4 },
                                                               v2 -> { * -> v5 },
                                                               v3 -> { * -> v7 },
                                                               v4 -> { * -> v6 },
                                                               v5 -> { * -> v8 },
                                                               v6 -> { },
                                                               v7 -> { },
                                                               v8 -> { } };
                                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v5 -> { MustBeInitialized(, t=6),
                                                                    MustBeValid(, None, t=6) },
                                                               v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean), line 429, ) } };}]
                                                need_closure_specialization=false
                                                need_dynamic_type_specialization=
                                                { }
                                                skipped_calls={ }
                                                Topl={len=0;content=
                                                       [  ]},
                                               conditions= [] timestamp= 22)
                                           #1: (conditions: {[v7] = 0}
                                                phi: var_eqs: v7=v17
                                                     && linear_eqs: v7 = 0
                                                     && term_eqs: 0=v7
                                                     && intervals: v7=0 ∧ v17=null
                                                     && atoms: {is_int([v7]) = 1}
                                                { roots={ &b=v3, &a=v2, &this=v1, &return=v20 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v7 },
                                                          v4 -> { * -> v6 },
                                                          v18 -> { * -> v17 },
                                                          v20 -> { * -> v7 } };
                                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeValid(, None, t=0) },
                                                          v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { StaticType class codetoanalyze.java.infer.Specialization$A },
                                                          v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                          v18 -> { MustBeValid(, None, t=5),
                                                                   WrittenTo (5, ) },
                                                          v20 -> { MustBeValid(, None, t=8),
                                                                   WrittenTo (8, ) } };}
                                                PRE=[{ roots={ &b=v3, &a=v2, &this=v1 };
                                                       mem  ={ v1 -> { * -> v4 },
                                                               v2 -> { * -> v5 },
                                                               v3 -> { * -> v7 },
                                                               v4 -> { * -> v6 },
                                                               v5 -> { },
                                                               v6 -> { },
                                                               v7 -> { } };
                                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean), line 429, ) } };}]
                                                need_closure_specialization=false
                                                need_dynamic_type_specialization=
                                                { }
                                                skipped_calls={ }
                                                Topl={len=0;content=
                                                       [  ]},
                                               conditions= [] timestamp= 13)
                                           #2: (conditions: {[v7] ≠ 0}
                                                phi: linear_eqs: v9 = a1 +1
                                                     && term_eqs: Specialization$C.<init>()([v9])=v11
                                                                  ∧[a1 +1]=v9
                                                     && intervals: v7≠0 ∧ v9≥1
                                                     && atoms: {is_int([v7]) = 1}∧{[v7] ≠ 0}
                                                { roots={ &b=v3, &a=v2, &this=v1, &return=v21 };
                                                  mem  ={ v1 -> { * -> v4 },
                                                          v2 -> { * -> v5 },
                                                          v3 -> { * -> v7 },
                                                          v4 -> { * -> v6 },
                                                          v5 -> { * -> v8 },
                                                          v9 -> { * -> v10 },
                                                          v14 -> { * -> v9 },
                                                          v16 -> { * -> v9 },
                                                          v21 -> { * -> v9 } };
                                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeValid(, None, t=0) },
                                                          v3 -> { MustBeValid(, None, t=0) },
                                                          v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                  MustBeValid(, None, t=0) },
                                                          v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                                  MustBeValid(, None, t=6),
                                                                  StaticType class codetoanalyze.java.infer.Specialization$A },
                                                          v9 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                                  UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 429 :t7
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                          v14 -> { MustBeValid(, None, t=8),
                                                                   WrittenTo (8, ) },
                                                          v16 -> { MustBeValid(, None, t=12),
                                                                   WrittenTo (12, ) },
                                                          v21 -> { MustBeValid(, None, t=17),
                                                                   WrittenTo (17, ) } };}
                                                PRE=[{ roots={ &b=v3, &a=v2, &this=v1 };
                                                       mem  ={ v1 -> { * -> v4 },
                                                               v2 -> { * -> v5 },
                                                               v3 -> { * -> v7 },
                                                               v4 -> { * -> v6 },
                                                               v5 -> { * -> v8 },
                                                               v6 -> { },
                                                               v7 -> { },
                                                               v8 -> { } };
                                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                               v5 -> { MustBeInitialized(, t=6),
                                                                    MustBeValid(, None, t=6) },
                                                               v7 -> { UsedAsBranchCond(Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean), line 429, ) } };}]
                                                need_closure_specialization=false
                                                need_dynamic_type_specialization=
                                                { }
                                                skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                                Topl={len=0;content=
                                                       [  ]},
                                               conditions= [] timestamp= 22)
                                           
                                           Non-disj state:
                                             copy map: { }, parameter map: { },
                                             destructor checked: { }, 
                                             captured: { }, locked: false,
                                             loads: ({ n$0 -> { b },
                                                       n$1 -> { a },
                                                       n$4 -> { $irvar0 },
                                                       n$5 -> { $T0_12 } },
                                             { b -> { line 429 -> { 1 } },
                                               a -> { line 429 -> { 5 } },
                                               $irvar0 -> { line 429 -> { 11 } },
                                               $T0_12 -> { line 429 -> { 7, 16 } } }),
                                             passed to: { a -> { Specialization$C Specialization$A.buildC() -> { line 429 -> { 7 } } } }process analysis end

{ proc_name= InheritanceDispatch$C.<init>(InheritanceDispatch)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch$C*);  (this$0,
            codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:294
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch$C.<init>(codetoanalyze.java.infer.InheritanceDispatch) }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch$C* [line 294];
      n$1=*&this$0:codetoanalyze.java.infer.InheritanceDispatch* [line 294];
      n$2=_fun_InheritanceDispatch$B.<init>(InheritanceDispatch)(n$0:codetoanalyze.java.infer.InheritanceDispatch$C*,n$1:codetoanalyze.java.infer.InheritanceDispatch*) [line 294];
      NULLIFY(&this); [line 294];
      NULLIFY(&this$0); [line 294];
      EXIT_SCOPE(n$0,n$1,n$2,this,this$0); [line 294];
      
    #n5:
      APPLY_ABSTRACTION; [line 294];
      
    process analysis
#n2:
      
    
    InheritanceDispatch$C.<init>1 disjuncts:
                                #0: (conditions: (empty)
                                     phi: term_eqs: InheritanceDispatch$C.<init>(InheritanceDispatch)([v3],[v4])=v6
                                     { roots={ &this=v1, &this$0=v2 };
                                       mem  ={ v1 -> { * -> v3 },
                                               v2 -> { * -> v4 },
                                               v3 -> { * -> v5 } };
                                       attrs={ v1 -> { MustBeValid(, None, t=0) },
                                               v2 -> { MustBeValid(, None, t=0) },
                                               v3 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$C, SourceFile [None],
                                                       MustBeValid(, None, t=0),
                                                       PropagateTaintFrom([{v= v4}]),
                                                       UnknownEffect(function `InheritanceDispatch$C.<init>(InheritanceDispatch)` with no summary,
                                                                    in call to function `InheritanceDispatch$C.<init>(InheritanceDispatch)` with no summary at line 294 :t3
                                                                    [
                                                                    ] ) },
                                               v4 -> { StaticType class codetoanalyze.java.infer.InheritanceDispatch },
                                               v5 -> { Tainted{ } } };}
                                     PRE=[{ roots={ &this=v1, &this$0=v2 };
                                            mem  ={ v1 -> { * -> v3 },
                                                    v2 -> { * -> v4 },
                                                    v3 -> { * -> v5 },
                                                    v4 -> { },
                                                    v5 -> { } };
                                            attrs={ v1 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v2 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) },
                                                    v3 -> { MustBeInitialized(, t=0),
                                                            MustBeValid(, None, t=0) } };}]
                                     need_closure_specialization=false
                                     need_dynamic_type_specialization=
                                     { }
                                     skipped_calls={ InheritanceDispatch$C.<init>(InheritanceDispatch) -> call to skipped function occurs here }
                                     Topl={len=0;content=
                                            [  ]},
                                    conditions= [] timestamp= 9)
                                
                                Non-disj state:
                                  copy map: { }, parameter map: { }, 
                                  destructor checked: { }, captured: { }, 
                                  locked: false,
                                  loads: ({ n$0 -> { this }, n$1 -> { this$0 } },
                                  { this -> { line 294 -> { 1 } },
                                    this$0 -> { line 294 -> { 2 } } }),
                                  passed to: { this -> { InheritanceDispatch$C.<init>(InheritanceDispatch) -> { line 294 -> { 3 } } },
                                               this$0 -> { InheritanceDispatch$C.<init>(InheritanceDispatch) -> { line 294 -> { 3 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCTransitivelyAndDerefBad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:420
; locals= [{ name= $irvar2; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCTransitivelyAndDerefBad():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 421];
      n$1=_fun_Specialization$A_Good.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 421];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Good*=n$0 [line 421];
      EXIT_SCOPE(n$0,n$1); [line 421];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$A_Bad*) [line 421];
      n$3=_fun_Specialization$A_Bad.<init>()(n$2:codetoanalyze.java.infer.Specialization$A_Bad*) [line 421];
      *&$irvar1:codetoanalyze.java.infer.Specialization$A_Bad*=n$2 [line 421];
      EXIT_SCOPE(n$2,n$3); [line 421];
      
    #n6:
      n$4=*&this:codetoanalyze.java.infer.Specialization* [line 421];
      _=*n$4:codetoanalyze.java.infer.Specialization [line 421];
      n$6=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Good* [line 421];
      n$7=*&$irvar1:codetoanalyze.java.infer.Specialization$A_Bad* [line 421];
      n$8=_fun_Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)(n$4:codetoanalyze.java.infer.Specialization*,n$6:codetoanalyze.java.infer.Specialization$A_Good*,n$7:codetoanalyze.java.infer.Specialization$A_Bad*) virtual [line 421];
      *&$irvar2:codetoanalyze.java.infer.Specialization$C*=n$8 [line 421];
      NULLIFY(&$irvar1); [line 421];
      NULLIFY(&this); [line 421];
      NULLIFY(&$irvar0); [line 421];
      EXIT_SCOPE(_,n$4,n$6,n$7,n$8,$irvar1,this,$irvar0); [line 421];
      
    #n7:
      n$9=*&$irvar2:codetoanalyze.java.infer.Specialization$C* [line 421];
      n$10=*n$9.f:codetoanalyze.java.infer.Specialization$C* [line 421];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$10 [line 421];
      NULLIFY(&$irvar2); [line 421];
      EXIT_SCOPE(n$9,n$10,$irvar2); [line 421];
      APPLY_ABSTRACTION; [line 421];
      
    #n2:
      
    
    { proc_name= Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a1,
                codetoanalyze.java.infer.Specialization$A*);  (a2,
                codetoanalyze.java.infer.Specialization$A*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:416
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.Specialization$C* 
    ; proc_id= codetoanalyze.java.infer.Specialization.callCallBuildC(codetoanalyze.java.infer.Specialization$A,codetoanalyze.java.infer.Specialization$A):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&a1:codetoanalyze.java.infer.Specialization$A* [line 417];
      _=*n$0:codetoanalyze.java.infer.Specialization$A [line 417];
      n$2=*&a2:codetoanalyze.java.infer.Specialization$A* [line 417];
      n$3=_fun_Specialization$C Specialization$A.callBuildC(Specialization$A)(n$0:codetoanalyze.java.infer.Specialization$A*,n$2:codetoanalyze.java.infer.Specialization$A*) virtual [line 417];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$3 [line 417];
      NULLIFY(&a2); [line 417];
      NULLIFY(&a1); [line 417];
      EXIT_SCOPE(_,n$0,n$2,n$3,a2,a1); [line 417];
      
    #n5:
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 417];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$4 [line 417];
      NULLIFY(&$irvar0); [line 417];
      EXIT_SCOPE(n$4,$irvar0); [line 417];
      APPLY_ABSTRACTION; [line 417];
      
    process analysis
#n2:
      
    
    Specialization.callCallBuildC4 disjuncts:
                                 #0: (conditions: (empty)
                                      phi: linear_eqs: v16 = a2 +1
                                           && term_eqs: Specialization$C.<init>()([v16])=v18
                                                        ∧[a2 +1]=v16
                                           && intervals: v16≥1
                                      { roots={ &a2=v3, &this=v1, &return=v25, &a1=v2 };
                                        mem  ={ v1 -> { * -> v4 },
                                                v2 -> { * -> v5 },
                                                v3 -> { * -> v6 },
                                                v4 -> { * -> v7 },
                                                v5 -> { * -> v8 },
                                                v6 -> { * -> v15 },
                                                v16 -> { * -> v17 },
                                                v21 -> { * -> v16 },
                                                v25 -> { * -> v16 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                        MustBeValid(, None, t=4),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v16 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                         UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                                                    [
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ] ) },
                                                v21 -> { MustBeValid(, None, t=5),
                                                         WrittenTo (5, ) },
                                                v25 -> { MustBeValid(, None, t=10),
                                                         WrittenTo (10, ) } };}
                                      PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v5 -> { * -> v8 },
                                                     v6 -> { * -> v15 },
                                                     v7 -> { },
                                                     v8 -> { },
                                                     v15 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeInitialized(, t=4),
                                                             MustBeValid(, None, t=4) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 15)
                                 #1: (conditions: (empty)
                                      phi: linear_eqs: v20 = 0
                                           && term_eqs: 0=v20
                                           && intervals: v20=null
                                      { roots={ &a2=v3, &this=v1, &return=v26, &a1=v2 };
                                        mem  ={ v1 -> { * -> v4 },
                                                v2 -> { * -> v5 },
                                                v3 -> { * -> v6 },
                                                v4 -> { * -> v7 },
                                                v5 -> { * -> v8 },
                                                v6 -> { * -> v19 },
                                                v22 -> { * -> v20 },
                                                v26 -> { * -> v20 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                        MustBeValid(, None, t=4),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v20 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                v22 -> { MustBeValid(, None, t=5),
                                                         WrittenTo (5, ) },
                                                v26 -> { MustBeValid(, None, t=10),
                                                         WrittenTo (10, ) } };}
                                      PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v5 -> { * -> v8 },
                                                     v6 -> { * -> v19 },
                                                     v7 -> { },
                                                     v8 -> { },
                                                     v19 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeInitialized(, t=4),
                                                             MustBeValid(, None, t=4) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 15)
                                 #2: (conditions: (empty)
                                      phi: linear_eqs: v10 = a1 +1
                                           && term_eqs: Specialization$C.<init>()([v10])=v12
                                                        ∧[a1 +1]=v10
                                           && intervals: v10≥1
                                      { roots={ &a2=v3, &this=v1, &return=v27, &a1=v2 };
                                        mem  ={ v1 -> { * -> v4 },
                                                v2 -> { * -> v5 },
                                                v3 -> { * -> v6 },
                                                v4 -> { * -> v7 },
                                                v5 -> { * -> v8 },
                                                v6 -> { * -> v9 },
                                                v10 -> { * -> v11 },
                                                v23 -> { * -> v10 },
                                                v27 -> { * -> v10 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                        MustBeValid(, None, t=4),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v10 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                         UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                                                    [
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ] ) },
                                                v23 -> { MustBeValid(, None, t=5),
                                                         WrittenTo (5, ) },
                                                v27 -> { MustBeValid(, None, t=10),
                                                         WrittenTo (10, ) } };}
                                      PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v5 -> { * -> v8 },
                                                     v6 -> { * -> v9 },
                                                     v7 -> { },
                                                     v8 -> { },
                                                     v9 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeInitialized(, t=4),
                                                             MustBeValid(, None, t=4) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ Specialization$C.<init>() -> call to skipped function occurs here }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 15)
                                 #3: (conditions: (empty)
                                      phi: linear_eqs: v14 = 0
                                           && term_eqs: 0=v14
                                           && intervals: v14=null
                                      { roots={ &a2=v3, &this=v1, &return=v28, &a1=v2 };
                                        mem  ={ v1 -> { * -> v4 },
                                                v2 -> { * -> v5 },
                                                v3 -> { * -> v6 },
                                                v4 -> { * -> v7 },
                                                v5 -> { * -> v8 },
                                                v6 -> { * -> v13 },
                                                v24 -> { * -> v14 },
                                                v28 -> { * -> v14 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { MustBeValid(, None, t=0) },
                                                v3 -> { MustBeValid(, None, t=0) },
                                                v4 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                        MustBeValid(, None, t=2),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v6 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                        MustBeValid(, None, t=4),
                                                        StaticType class codetoanalyze.java.infer.Specialization$A },
                                                v14 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                v24 -> { MustBeValid(, None, t=5),
                                                         WrittenTo (5, ) },
                                                v28 -> { MustBeValid(, None, t=10),
                                                         WrittenTo (10, ) } };}
                                      PRE=[{ roots={ &a2=v3, &this=v1, &a1=v2 };
                                             mem  ={ v1 -> { * -> v4 },
                                                     v2 -> { * -> v5 },
                                                     v3 -> { * -> v6 },
                                                     v4 -> { * -> v7 },
                                                     v5 -> { * -> v8 },
                                                     v6 -> { * -> v13 },
                                                     v7 -> { },
                                                     v8 -> { },
                                                     v13 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v3 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v5 -> { MustBeInitialized(, t=2),
                                                             MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeInitialized(, t=4),
                                                             MustBeValid(, None, t=4) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 15)
                                 
                                 Non-disj state:
                                   copy map: { }, parameter map: { }, 
                                   destructor checked: { }, captured: { }, 
                                   locked: false,
                                   loads: ({ n$0 -> { a1 }, n$2 -> { a2 }, n$4 -> { $irvar0 } },
                                   { a2 -> { line 417 -> { 3 } },
                                     $irvar0 -> { line 417 -> { 9 } },
                                     a1 -> { line 417 -> { 1 } } }),
                                   passed to: { a2 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } },
                                                a1 -> { Specialization$C Specialization$A.callBuildC(Specialization$A) -> { line 417 -> { 4 } } } }process analysis end
process analysis
Specialization.buildCTransitivelyAndDerefBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] } };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Specialization$A_Bad.<init>() -> call to skipped function occurs here,
                                   Specialization$A_Good.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 26)
process analysis end

Non-disj state: ⊤{ proc_name= void DynamicDispatch.dynamicResolutionWithPrivateMethodBad()
                   ; translation_unit= DynamicDispatch.java
                   ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch*)]
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:262
                   ; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= subtype; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicResolutionWithPrivateMethodBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 263];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 263];
      *&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 263];
      EXIT_SCOPE(n$0,n$1); [line 263];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.DynamicDispatch* [line 264];
      _=*n$2:codetoanalyze.java.infer.DynamicDispatch [line 264];
      n$4=*&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 264];
      n$5=_fun_Object DynamicDispatch.callFoo(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch*,n$4:codetoanalyze.java.infer.DynamicDispatch$Subtype*) virtual [line 264];
      *&$irvar0:java.lang.Object*=n$5 [line 264];
      NULLIFY(&this); [line 264];
      NULLIFY(&subtype); [line 264];
      EXIT_SCOPE(_,n$2,n$4,n$5,this,subtype); [line 264];
      
    #n6:
      n$6=*&$irvar0:java.lang.Object* [line 264];
      _=*n$6:java.lang.Object [line 264];
      n$8=_fun_String Object.toString()(n$6:java.lang.Object*) virtual [line 264];
      *&$irvar1:java.lang.String*=n$8 [line 264];
      NULLIFY(&$irvar1); [line 264];
      NULLIFY(&$irvar0); [line 264];
      EXIT_SCOPE(_,n$6,n$8,$irvar1,$irvar0); [line 264];
      
    #n7:
      APPLY_ABSTRACTION; [line 265];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicResolutionWithPrivateMethodBad1 disjuncts:
                                                         #0: ({AbortProgram 
                                                             conditions: (empty) phi: (empty)
                                                             { roots=
                                                               { &this=v1 };
                                                               mem  =
                                                               { v1 -> { * -> v3 },
                                                                 v3 -> { * -> v4 } };
                                                               attrs=
                                                               { v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None] } };}
                                                             PRE=[{ roots=
                                                                    { &this=v1 };
                                                                    mem  =
                                                                    { v1 -> { * -> v3 },
                                                                    v3 -> { * -> v4 } };
                                                                    attrs=
                                                                    { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                             need_closure_specialization=false
                                                             need_dynamic_type_specialization=
                                                             { }
                                                             skipped_calls=
                                                             { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here }
                                                             Topl={len=0;content=
                                                                    [  ]}},
                                                             conditions= [] timestamp= 22)
                                                         process analysis end

                                                         Non-disj state: ⊤
{ proc_name= void DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeBad()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:219
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Supertype):codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 221];
      n$1=_fun_DynamicDispatch$Supertype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 221];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Supertype*=n$0 [line 221];
      EXIT_SCOPE(n$0,n$1); [line 221];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 222];
      n$3=_fun_Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 222];
      *&$irvar0:java.lang.Object*=n$3 [line 222];
      NULLIFY(&o); [line 222];
      EXIT_SCOPE(n$2,n$3,o); [line 222];
      
    #n6:
      n$4=*&$irvar0:java.lang.Object* [line 222];
      _=*n$4:java.lang.Object [line 222];
      n$6=_fun_String Object.toString()(n$4:java.lang.Object*) virtual [line 222];
      *&$irvar1:java.lang.String*=n$6 [line 222];
      NULLIFY(&$irvar1); [line 222];
      NULLIFY(&$irvar0); [line 222];
      EXIT_SCOPE(_,n$4,n$6,$irvar1,$irvar0); [line 222];
      
    #n7:
      APPLY_ABSTRACTION; [line 223];
      
    #n2:
      
    
    { proc_name= DynamicDispatch$Supertype.<init>()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:159
    ; locals= []
    ; ret_type= void 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Supertype.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 159];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 159];
      NULLIFY(&this); [line 159];
      EXIT_SCOPE(n$0,n$1,this); [line 159];
      
    #n5:
      APPLY_ABSTRACTION; [line 159];
      
    process analysis
#n2:
      
    
    DynamicDispatch$Supertype.<init>1 disjuncts:
                                    #0: (conditions: (empty)
                                         phi: term_eqs: DynamicDispatch$Supertype.<init>()([v2])=v4
                                         { roots={ &this=v1 };
                                           mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                           attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                   v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                                                           MustBeValid(, None, t=0),
                                                           UnknownEffect(function `DynamicDispatch$Supertype.<init>()` with no summary,
                                                                    in call to function `DynamicDispatch$Supertype.<init>()` with no summary at line 159 :t2
                                                                    [
                                                                    ] ) } };}
                                         PRE=[{ roots={ &this=v1 };
                                                mem  ={ v1 -> { * -> v2 },
                                                        v2 -> { * -> v3 },
                                                        v3 -> { } };
                                                attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) },
                                                        v2 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) } };}]
                                         need_closure_specialization=false
                                         need_dynamic_type_specialization=
                                         { }
                                         skipped_calls={ DynamicDispatch$Supertype.<init>() -> call to skipped function occurs here }
                                         Topl={len=0;content=
                                                [  ]},
                                        conditions= [] timestamp= 7)
                                    
                                    Non-disj state:
                                      copy map: { }, parameter map: { }, 
                                      destructor checked: { }, captured: { }, 
                                      locked: false,
                                      loads: ({ n$0 -> { this } },
                                      { this -> { line 159 -> { 1 } } }),
                                      passed to: { this -> { DynamicDispatch$Supertype.<init>() -> { line 159 -> { 2 } } } }process analysis end

{ proc_name= Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)
; translation_unit= DynamicDispatch.java
; formals= [(o,codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
; is_defined= true
; loc= DynamicDispatch.java:209
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= java.lang.Object* 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchWrapperBar(codetoanalyze.java.infer.DynamicDispatch$Supertype):java.lang.Object }
    #n1:
      
    #n4:
      n$0=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 210];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 210];
      n$2=_fun_Object DynamicDispatch$Supertype.bar()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 210];
      *&$irvar0:java.lang.Object*=n$2 [line 210];
      NULLIFY(&o); [line 210];
      EXIT_SCOPE(_,n$0,n$2,o); [line 210];
      
    #n5:
      n$3=*&$irvar0:java.lang.Object* [line 210];
      *&return:java.lang.Object*=n$3 [line 210];
      NULLIFY(&$irvar0); [line 210];
      EXIT_SCOPE(n$3,$irvar0); [line 210];
      APPLY_ABSTRACTION; [line 210];
      
    #n2:
      
    
    { proc_name= Object DynamicDispatch$Supertype.bar()
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:164
    ; locals= []
    ; ret_type= java.lang.Object* 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch$Supertype.bar():java.lang.Object }
    process analysis
#n1:
      
    #n4:
      *&return:java.lang.Object*=null [line 165];
      APPLY_ABSTRACTION; [line 165];
      
    #n2:
      
    
    DynamicDispatch$Supertype.bar1 disjuncts:
                                 #0: (conditions: (empty)
                                      phi: linear_eqs: v4 = 0
                                           && term_eqs: 0=v4
                                           && intervals: v4=null
                                      { roots={ &this=v1, &return=v5 };
                                        mem  ={ v1 -> { * -> v2 },
                                                v2 -> { * -> v3 },
                                                v5 -> { * -> v4 } };
                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                                                        MustBeValid(, None, t=0) },
                                                v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                v5 -> { MustBeValid(, None, t=1), WrittenTo (1, ) } };}
                                      PRE=[{ roots={ &this=v1 };
                                             mem  ={ v1 -> { * -> v2 },
                                                     v2 -> { * -> v3 },
                                                     v3 -> { } };
                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeInitialized(, t=0),
                                                             MustBeValid(, None, t=0) } };}]
                                      need_closure_specialization=false
                                      need_dynamic_type_specialization=
                                      { }
                                      skipped_calls={ }
                                      Topl={len=0;content=
                                             [  ]},
                                     conditions= [] timestamp= 4)
                                 
                                 Non-disj state:
                                   copy map: { }, parameter map: { }, 
                                   destructor checked: { }, captured: { }, 
                                   locked: false, loads: ({ },{ }),process analysis end
process analysis
 passed to: { }DynamicDispatch.dynamicDispatchWrapperBar
2 disjuncts:
#0: (conditions: (empty) phi: linear_eqs: v6 = 0 && term_eqs: 0=v6 && intervals: v6=null
     { roots={ &o=v1, &return=v9 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v7 -> { * -> v6 }, v9 -> { * -> v6 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
               v6 -> { Invalid ConstantDereference(is assigned to the null pointer) },
               v7 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)
#1: (conditions: (empty)
     phi: linear_eqs: v4 = a1 +1
          && term_eqs: Object.<init>()([v4])=v5∧[a1 +1]=v4
          && intervals: v4≥1
     { roots={ &o=v1, &return=v10 };
       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v8 -> { * -> v4 }, v10 -> { * -> v4 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
               v4 -> { DynamicType java.lang.Object, SourceFile [None],
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Subtype.bar()` at line 210 :t3
                                     [in call to function `Object.<init>()` with no summary at line 177 :t2
                                      [] ]
                                     ) },
               v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v10 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 13)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 210 -> { 1 } }, $irvar0 -> { line 210 -> { 7 } } }),
  process analysis end
process analysis
passed to: { o -> { Object DynamicDispatch$Supertype.bar() -> { line 210 -> { 3 } } } }DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ };
                     mem  ={ };
                     attrs={ };}
                   PRE=[{ roots={ };
                          mem  ={ };
                          attrs={ };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ DynamicDispatch$Supertype.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 19)
process analysis end

Non-disj state: ⊤{ proc_name= void DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeOK()
                   ; translation_unit= DynamicDispatch.java
                   ; formals= []
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:213
                   ; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeOK():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Supertype):codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 215];
      n$1=_fun_DynamicDispatch$Supertype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 215];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Supertype*=n$0 [line 215];
      EXIT_SCOPE(n$0,n$1); [line 215];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 216];
      n$3=_fun_Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$Supertype*) [line 216];
      *&$irvar0:java.lang.Object*=n$3 [line 216];
      NULLIFY(&o); [line 216];
      EXIT_SCOPE(n$2,n$3,o); [line 216];
      
    #n6:
      n$4=*&$irvar0:java.lang.Object* [line 216];
      _=*n$4:java.lang.Object [line 216];
      n$6=_fun_String Object.toString()(n$4:java.lang.Object*) virtual [line 216];
      *&$irvar1:java.lang.String*=n$6 [line 216];
      NULLIFY(&$irvar1); [line 216];
      NULLIFY(&$irvar0); [line 216];
      EXIT_SCOPE(_,n$4,n$6,$irvar1,$irvar0); [line 216];
      
    #n7:
      APPLY_ABSTRACTION; [line 217];
      
    #n2:
      
    
    { proc_name= Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(o,codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:205
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= java.lang.Object* 
    ; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchWrapperFoo(codetoanalyze.java.infer.DynamicDispatch$Supertype):java.lang.Object }
    #n1:
      
    #n4:
      n$0=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 206];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 206];
      n$2=_fun_Object DynamicDispatch$Supertype.foo()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 206];
      *&$irvar0:java.lang.Object*=n$2 [line 206];
      NULLIFY(&o); [line 206];
      EXIT_SCOPE(_,n$0,n$2,o); [line 206];
      
    #n5:
      n$3=*&$irvar0:java.lang.Object* [line 206];
      *&return:java.lang.Object*=n$3 [line 206];
      NULLIFY(&$irvar0); [line 206];
      EXIT_SCOPE(n$3,$irvar0); [line 206];
      APPLY_ABSTRACTION; [line 206];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchWrapperFoo2 disjuncts:
                                             #0: (conditions: (empty)
                                                  phi: linear_eqs: v5 = a1 +1
                                                       && term_eqs: Object.<init>()([v5])=v6
                                                                    ∧[a1 +1]=v5
                                                       && intervals: 
                                                       v5≥1
                                                  { roots={ &o=v1, &return=v9 };
                                                    mem  ={ v1 -> { * -> v2 },
                                                            v2 -> { * -> v3 },
                                                            v7 -> { * -> v5 },
                                                            v9 -> { * -> v5 } };
                                                    attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                            v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
                                                            v5 -> { DynamicType java.lang.Object, SourceFile [None],
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Supertype.foo()` at line 206 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ] ) },
                                                            v7 -> { MustBeValid(, None, t=4),
                                                                    WrittenTo (4, ) },
                                                            v9 -> { MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) } };}
                                                  PRE=[{ roots={ &o=v1 };
                                                         mem  ={ v1 -> { * -> v2 },
                                                                 v2 -> { * -> v3 },
                                                                 v3 -> { } };
                                                         attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                 v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                  need_closure_specialization=false
                                                  need_dynamic_type_specialization=
                                                  { }
                                                  skipped_calls={ Object.<init>() -> call to skipped function occurs here }
                                                  Topl={len=0;content=
                                                         [  ]},
                                                 conditions= [] timestamp= 13)
                                             #1: (conditions: (empty)
                                                  phi: linear_eqs: v4 = 0
                                                       && term_eqs: 0=v4
                                                       && intervals: 
                                                       v4=null
                                                  { roots={ &o=v1, &return=v10 };
                                                    mem  ={ v1 -> { * -> v2 },
                                                            v2 -> { * -> v3 },
                                                            v8 -> { * -> v4 },
                                                            v10 -> { * -> v4 } };
                                                    attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                            v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
                                                            v4 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                            v8 -> { MustBeValid(, None, t=4),
                                                                    WrittenTo (4, ) },
                                                            v10 -> { MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) } };}
                                                  PRE=[{ roots={ &o=v1 };
                                                         mem  ={ v1 -> { * -> v2 },
                                                                 v2 -> { * -> v3 },
                                                                 v3 -> { } };
                                                         attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                 v2 -> { MustBeInitialized(, t=2),
                                                                    MustBeValid(, None, t=2) } };}]
                                                  need_closure_specialization=false
                                                  need_dynamic_type_specialization=
                                                  { }
                                                  skipped_calls={ }
                                                  Topl={len=0;content=
                                                         [  ]},
                                                 conditions= [] timestamp= 13)
                                             
                                             Non-disj state:
                                               copy map: { }, parameter map: { },
                                               destructor checked: { }, 
                                               captured: { }, locked: false,
                                               loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
                                               { o -> { line 206 -> { 1 } },
                                                 $irvar0 -> { line 206 -> { 7 } } }),
                                               passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 206 -> { 3 } } } }process analysis end
process analysis
DynamicDispatch.dynamicDispatchCallsWrapperWithSupertypeOK
1 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v3 = a1 +1 ∧ v6 = a2 +1
          && term_eqs: DynamicDispatch$Supertype.<init>()([v3])=v5∧Object.<init>()([v6])=v7
                       ∧String Object.toString()([v6])=v10∧[a1 +1]=v3
                       ∧[a2 +1]=v6
          && intervals: v3≥1 ∧ v6≥1
     { roots={ };
       mem  ={ v1 -> { * -> v3 },
               v3 -> { * -> v4 },
               v6 -> { * -> v9 },
               v8 -> { * -> v6 },
               v11 -> { * -> v10 } };
       attrs={ v1 -> { s&o (variable `o` declared here at line 213 :t0 ) at line 216,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       UnknownEffect(function `DynamicDispatch$Supertype.<init>()` with no summary,
                                     in call to `DynamicDispatch$Supertype.<init>()` at line 215 :t2
                                     [in call to function `DynamicDispatch$Supertype.<init>()` with no summary at line 159 :t2
                                      [] ]
                                     ) },
               v6 -> { DynamicType java.lang.Object, SourceFile [None],
                       MustBeValid(, None, t=11),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` at line 216 :t6
                                     [in call to `Object DynamicDispatch$Supertype.foo()` at line 206 :t3
                                      [in call to function `Object.<init>()` with no summary at line 161 :t2
                                       [] ]
                                      ]
                                     ) },
               v8 -> { MustBeValid(, None, t=7), WrittenTo (7, ) },
               v10 -> { PropagateTaintFrom([{v= v6}]), ReturnedFromUnknown([v6]) },
               v11 -> { MustBeValid(, None, t=13), WrittenTo (13, ) } };}
     PRE=[{ roots={ };
            mem  ={ };
            attrs={ };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v6 }
     skipped_calls={ DynamicDispatch$Supertype.<init>() -> call to skipped function occurs here,
                     Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 19)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { o }, n$4 -> { $irvar0 } },
  { o -> { line 216 -> { 5 } }, $irvar0 -> { line 216 -> { 10 } } }),
  passed to: { o -> { Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype) -> { line 216 -> { 6 } } },
               $irvar0 -> { String Object.toString() -> { line 216 -> { 12 } } } }process analysis end

{ proc_name= void InheritanceDispatch.dispatch_to_A_bad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:320
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= a; typ= codetoanalyze.java.infer.InheritanceDispatch$A*; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= java.lang.Object*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch.dispatch_to_A_bad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.InheritanceDispatch$A):codetoanalyze.java.infer.InheritanceDispatch$A*) [line 321];
      n$1=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 321];
      n$2=_fun_InheritanceDispatch$A.<init>(InheritanceDispatch)(n$0:codetoanalyze.java.infer.InheritanceDispatch$A*,n$1:codetoanalyze.java.infer.InheritanceDispatch*) [line 321];
      *&a:codetoanalyze.java.infer.InheritanceDispatch$A*=n$0 [line 321];
      NULLIFY(&this); [line 321];
      EXIT_SCOPE(n$0,n$1,n$2,this); [line 321];
      
    #n5:
      n$3=*&a:codetoanalyze.java.infer.InheritanceDispatch$A* [line 322];
      _=*n$3:codetoanalyze.java.infer.InheritanceDispatch$A [line 322];
      n$5=_fun_int InheritanceDispatch$A.foo()(n$3:codetoanalyze.java.infer.InheritanceDispatch$A*) [line 322];
      *&$irvar0:int=n$5 [line 322];
      NULLIFY(&a); [line 322];
      EXIT_SCOPE(_,n$3,n$5,a); [line 322];
      
    #n6:
      n$6=*&$irvar0:int [line 322];
      PRUNE(!(n$6 != 32), true); [line 322];
      NULLIFY(&$irvar0); [line 322];
      EXIT_SCOPE(n$6,$irvar0); [line 322];
      
    #n8:
      *&o:java.lang.Object*=null [line 323];
      
    #n9:
      n$7=*&o:java.lang.Object* [line 324];
      _=*n$7:java.lang.Object [line 324];
      n$9=_fun_String Object.toString()(n$7:java.lang.Object*) virtual [line 324];
      *&$irvar1:java.lang.String*=n$9 [line 324];
      NULLIFY(&o); [line 324];
      NULLIFY(&$irvar1); [line 324];
      EXIT_SCOPE(_,n$7,n$9,o,$irvar1); [line 324];
      APPLY_ABSTRACTION; [line 324];
      
    #n7:
      n$6=*&$irvar0:int [line 322];
      PRUNE((n$6 != 32), false); [line 322];
      NULLIFY(&$irvar0); [line 322];
      EXIT_SCOPE(n$6,$irvar0); [line 322];
      APPLY_ABSTRACTION; [line 322];
      
    #n10:
      APPLY_ABSTRACTION; [line 326];
      
    process analysis
#n2:
      
    
    InheritanceDispatch.dispatch_to_A_bad1 disjuncts:
                                         #0: ({AbortProgram conditions: (empty) phi: (empty)
                                                            { roots={ &this=v1 };
                                                              mem  ={ v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                              attrs={ v4 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None],
                                                                    StaticType class codetoanalyze.java.infer.InheritanceDispatch } };}
                                                            PRE=[{ roots=
                                                                   { &this=v1 };
                                                                   mem  =
                                                                   { v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                                   attrs=
                                                                   { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                            need_closure_specialization=false
                                                            need_dynamic_type_specialization=
                                                            { }
                                                            skipped_calls=
                                                            { Object.<init>() -> call to skipped function occurs here }
                                                            Topl={len=0;content=
                                                                   [  ]}},
                                             conditions= [] timestamp= 28)
                                         process analysis end

                                         Non-disj state: ⊤{ proc_name= InheritanceDispatch$A InheritanceDispatch.getC()
                                                            ; translation_unit= DynamicDispatch.java
                                                            ; formals= [
                                                            (this,
                                                            codetoanalyze.java.infer.InheritanceDispatch*)]
                                                            ; is_defined= true
                                                            ; loc= DynamicDispatch.java:300
                                                            ; locals= [
                                                            { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
                                                            ; ret_type= codetoanalyze.java.infer.InheritanceDispatch$A* 
                                                            ; proc_id= codetoanalyze.java.infer.InheritanceDispatch.getC():codetoanalyze.java.infer.InheritanceDispatch$A }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.InheritanceDispatch$C):codetoanalyze.java.infer.InheritanceDispatch$C*) [line 301];
      n$1=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 301];
      n$2=_fun_InheritanceDispatch$C.<init>(InheritanceDispatch)(n$0:codetoanalyze.java.infer.InheritanceDispatch$C*,n$1:codetoanalyze.java.infer.InheritanceDispatch*) [line 301];
      *&$irvar0:codetoanalyze.java.infer.InheritanceDispatch$C*=n$0 [line 301];
      NULLIFY(&this); [line 301];
      EXIT_SCOPE(n$0,n$1,n$2,this); [line 301];
      
    #n5:
      n$3=*&$irvar0:codetoanalyze.java.infer.InheritanceDispatch$C* [line 301];
      *&return:codetoanalyze.java.infer.InheritanceDispatch$A*=n$3 [line 301];
      NULLIFY(&$irvar0); [line 301];
      EXIT_SCOPE(n$3,$irvar0); [line 301];
      APPLY_ABSTRACTION; [line 301];
      
    process analysis
#n2:
      
    
    InheritanceDispatch.getC1 disjuncts:
                            #0: (conditions: (empty)
                                 phi: linear_eqs: v5 = a1 +1
                                      && term_eqs: InheritanceDispatch$C.<init>(InheritanceDispatch)([v5],[v2])=v7
                                                   ∧[a1 +1]=v5
                                      && intervals: v5≥1
                                 { roots={ &this=v1, &return=v9 };
                                   mem  ={ v1 -> { * -> v2 },
                                           v2 -> { * -> v3 },
                                           v5 -> { * -> v6 },
                                           v8 -> { * -> v5 },
                                           v9 -> { * -> v5 } };
                                   attrs={ v1 -> { MustBeValid(, None, t=0) },
                                           v2 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None],
                                                   MustBeValid(, None, t=0),
                                                   StaticType class codetoanalyze.java.infer.InheritanceDispatch },
                                           v5 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch$C, SourceFile [None],
                                                   MustBeValid(, None, t=3),
                                                   PropagateTaintFrom([{v= v2}]),
                                                   UnknownEffect(function `InheritanceDispatch$C.<init>(InheritanceDispatch)` with no summary,
                                                                 in call to `InheritanceDispatch$C.<init>(InheritanceDispatch)` at line 301 :t3
                                                                 [in call to function `InheritanceDispatch$C.<init>(InheritanceDispatch)` with no summary at line 294 :t3
                                                                  [] ]
                                                                 ) },
                                           v8 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
                                           v9 -> { MustBeValid(, None, t=8), WrittenTo (8, ) } };}
                                 PRE=[{ roots={ &this=v1 };
                                        mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                        attrs={ v1 -> { MustBeInitialized(, t=0),
                                                        MustBeValid(, None, t=0) },
                                                v2 -> { MustBeInitialized(, t=0),
                                                        MustBeValid(, None, t=0) } };}]
                                 need_closure_specialization=false
                                 need_dynamic_type_specialization={ }
                                 skipped_calls={ InheritanceDispatch$C.<init>(InheritanceDispatch) -> call to skipped function occurs here }
                                 Topl={len=0;content=
                                        [  ]},
                                conditions= [] timestamp= 13)
                            
                            Non-disj state:
                              copy map: { }, parameter map: { }, destructor checked: { },
                              captured: { }, locked: false,
                              loads: ({ n$1 -> { this }, n$3 -> { $irvar0 } },
                              { this -> { line 301 -> { 2 } }, $irvar0 -> { line 301 -> { 7 } } }),
                              passed to: { this -> { InheritanceDispatch$C.<init>(InheritanceDispatch) -> { line 301 -> { 3 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCAndDerefBad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:370
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCAndDerefBad():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$A_Bad*) [line 371];
      n$1=_fun_Specialization$A_Bad.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Bad*) [line 371];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad*=n$0 [line 371];
      EXIT_SCOPE(n$0,n$1); [line 371];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization* [line 371];
      _=*n$2:codetoanalyze.java.infer.Specialization [line 371];
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad* [line 371];
      n$5=_fun_Specialization$C Specialization.callBuildCGood(Specialization$A)(n$2:codetoanalyze.java.infer.Specialization*,n$4:codetoanalyze.java.infer.Specialization$A_Bad*) virtual [line 371];
      *&$irvar1:codetoanalyze.java.infer.Specialization$C*=n$5 [line 371];
      NULLIFY(&this); [line 371];
      NULLIFY(&$irvar0); [line 371];
      EXIT_SCOPE(_,n$2,n$4,n$5,this,$irvar0); [line 371];
      
    #n6:
      n$6=*&$irvar1:codetoanalyze.java.infer.Specialization$C* [line 371];
      n$7=*n$6.f:codetoanalyze.java.infer.Specialization$C* [line 371];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$7 [line 371];
      NULLIFY(&$irvar1); [line 371];
      EXIT_SCOPE(n$6,n$7,$irvar1); [line 371];
      APPLY_ABSTRACTION; [line 371];
      
    process analysis
#n2:
      
    
    Specialization.buildCAndDerefBad1 disjuncts:
                                    #0: ({AbortProgram conditions: (empty) phi: (empty)
                                                       { roots={ &this=v1 };
                                                         mem  ={ v1 -> { * -> v2 },
                                                                 v2 -> { * -> v3 } };
                                                         attrs={ v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] } };}
                                                       PRE=[{ roots={ &this=v1 };
                                                              mem  ={ v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 } };
                                                              attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                       need_closure_specialization=false
                                                       need_dynamic_type_specialization=
                                                       { }
                                                       skipped_calls=
                                                       { Specialization$A_Bad.<init>() -> call to skipped function occurs here }
                                                       Topl={len=0;content=
                                                              [  ]}},
                                        conditions= [] timestamp= 20)
                                    process analysis end

                                    Non-disj state: ⊤{ proc_name= Specialization$A.<init>()
                                                       ; translation_unit= DynamicDispatch.java
                                                       ; formals= [(this,
                                                                   codetoanalyze.java.infer.Specialization$A*)]
                                                       ; is_defined= true
                                                       ; loc= DynamicDispatch.java:343
                                                       ; locals= []
                                                       ; ret_type= void 
                                                       ; proc_id= codetoanalyze.java.infer.Specialization$A.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization$A* [line 343];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.Specialization$A*) [line 343];
      NULLIFY(&this); [line 343];
      EXIT_SCOPE(n$0,n$1,this); [line 343];
      
    #n5:
      APPLY_ABSTRACTION; [line 343];
      
    process analysis
#n2:
      
    
    Specialization$A.<init>1 disjuncts:
                           #0: (conditions: (empty)
                                phi: term_eqs: Specialization$A.<init>()([v2])=v4
                                { roots={ &this=v1 };
                                  mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                  attrs={ v1 -> { MustBeValid(, None, t=0) },
                                          v2 -> { DynamicType codetoanalyze.java.infer.Specialization$A, SourceFile [None],
                                                  MustBeValid(, None, t=0),
                                                  UnknownEffect(function `Specialization$A.<init>()` with no summary,
                                                                in call to function `Specialization$A.<init>()` with no summary at line 343 :t2
                                                                [] ) } };}
                                PRE=[{ roots={ &this=v1 };
                                       mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                       attrs={ v1 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) },
                                               v2 -> { MustBeInitialized(, t=0),
                                                       MustBeValid(, None, t=0) } };}]
                                need_closure_specialization=false
                                need_dynamic_type_specialization={ }
                                skipped_calls={ Specialization$A.<init>() -> call to skipped function occurs here }
                                Topl={len=0;content=
                                       [  ]},
                               conditions= [] timestamp= 7)
                           
                           Non-disj state:
                             copy map: { }, parameter map: { }, destructor checked: { },
                             captured: { }, locked: false,
                             loads: ({ n$0 -> { this } },{ this -> { line 343 -> { 1 } } }),
                             passed to: { this -> { Specialization$A.<init>() -> { line 343 -> { 2 } } } }process analysis end

{ proc_name= void DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(DynamicDispatch$Supertype)
; translation_unit= DynamicDispatch.java
; formals= [(o,codetoanalyze.java.infer.DynamicDispatch$Supertype*)]
; is_defined= true
; loc= DynamicDispatch.java:193
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(codetoanalyze.java.infer.DynamicDispatch$Supertype):void }
    #n1:
      
    #n4:
      n$0=*&o:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 196];
      _=*n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 196];
      n$2=_fun_Object DynamicDispatch$Supertype.foo()(n$0:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 196];
      *&$irvar0:java.lang.Object*=n$2 [line 196];
      NULLIFY(&o); [line 196];
      EXIT_SCOPE(_,n$0,n$2,o); [line 196];
      
    #n5:
      n$3=*&$irvar0:java.lang.Object* [line 196];
      _=*n$3:java.lang.Object [line 196];
      n$5=_fun_String Object.toString()(n$3:java.lang.Object*) virtual [line 196];
      *&$irvar1:java.lang.String*=n$5 [line 196];
      NULLIFY(&$irvar1); [line 196];
      NULLIFY(&$irvar0); [line 196];
      EXIT_SCOPE(_,n$3,n$5,$irvar1,$irvar0); [line 196];
      
    #n6:
      APPLY_ABSTRACTION; [line 197];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK
2 disjuncts:
#0: (conditions: (empty)
     phi: linear_eqs: v5 = a1 +1
          && term_eqs: Object.<init>()([v5])=v6∧String Object.toString()([v5])=v10∧[a1 +1]=v5
          && intervals: v5≥1
     { roots={ &o=v1 };
       mem  ={ v1 -> { * -> v2 },
               v2 -> { * -> v3 },
               v5 -> { * -> v9 },
               v7 -> { * -> v5 },
               v11 -> { * -> v10 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype },
               v5 -> { DynamicType java.lang.Object, SourceFile [None],
                       MustBeValid(, None, t=8),
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object DynamicDispatch$Supertype.foo()` at line 196 :t3
                                     [in call to function `Object.<init>()` with no summary at line 161 :t2
                                      [] ]
                                     ) },
               v7 -> { MustBeValid(, None, t=4), WrittenTo (4, ) },
               v10 -> { PropagateTaintFrom([{v= v5}]), ReturnedFromUnknown([v5]) },
               v11 -> { MustBeValid(, None, t=10), WrittenTo (10, ) } };}
     PRE=[{ roots={ &o=v1 };
            mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v5 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String Object.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 16)
#1: ({LatentAbortProgram(line 196: `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 196) and is dereferenced)
    AccessToInvalidAddress {calling_context=[];
                            invalid_address=[Some v4]:Object DynamicDispatch$Subtype.foo();
                            invalidation=ConstantDereference(is assigned to the null pointer);
                            invalidation_trace=immediate; access_trace=immediate;
                            must_be_valid_reason=None; }
    conditions: (empty) phi: (empty)
    { roots={ &o=v1 };
      mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
      attrs={ v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                      StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype } };}
    PRE=[{ roots={ &o=v1 };
           mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
           attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
    need_closure_specialization=false
    need_dynamic_type_specialization={ }
    skipped_calls={ }
    Topl={len=0;content=
           [  ]}},
    conditions= [] timestamp= 16)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$0 -> { o }, n$3 -> { $irvar0 } },
  { o -> { line 196 -> { 1 } }, $irvar0 -> { line 196 -> { 7 } } }),
  passed to: { o -> { Object DynamicDispatch$Supertype.foo() -> { line 196 -> { 3 } } },
               $irvar0 -> { String Object.toString() -> { line 196 -> { 9 } } } }process analysis end

{ proc_name= void DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeOK()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:231
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeOK():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 233];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 233];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 233];
      EXIT_SCOPE(n$0,n$1); [line 233];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 234];
      n$3=_fun_Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 234];
      *&$irvar0:java.lang.Object*=n$3 [line 234];
      NULLIFY(&o); [line 234];
      EXIT_SCOPE(n$2,n$3,o); [line 234];
      
    #n6:
      n$4=*&$irvar0:java.lang.Object* [line 234];
      _=*n$4:java.lang.Object [line 234];
      n$6=_fun_String Object.toString()(n$4:java.lang.Object*) virtual [line 234];
      *&$irvar1:java.lang.String*=n$6 [line 234];
      NULLIFY(&$irvar1); [line 234];
      NULLIFY(&$irvar0); [line 234];
      EXIT_SCOPE(_,n$4,n$6,$irvar1,$irvar0); [line 234];
      
    #n7:
      APPLY_ABSTRACTION; [line 235];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeOK1 disjuncts:
                                                            #0: (conditions: (empty)
                                                                 phi: 
                                                                 linear_eqs: 
                                                                 v3 = a1 +1
                                                                  ∧ v6 = a2 +1
                                                                 && term_eqs: 
                                                                 DynamicDispatch$Subtype.<init>()([v3])=v5
                                                                 ∧Object.<init>()([v6])=v7
                                                                 ∧String Object.toString()([v6])=v10
                                                                 ∧[a1 +1]=v3
                                                                 ∧[a2 +1]=v6
                                                                 && intervals: 
                                                                 v3≥1 ∧ v6≥1
                                                                 { roots=
                                                                   { };
                                                                   mem  =
                                                                   { v1 -> { * -> v3 },
                                                                    v3 -> { * -> v4 },
                                                                    v6 -> { * -> v9 },
                                                                    v8 -> { * -> v6 },
                                                                    v11 -> { * -> v10 } };
                                                                   attrs=
                                                                   { v1 -> { s&o (variable `o` declared here at line 231 :t0
                                                                    ) at line 234,
                                                                    MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                                    v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `DynamicDispatch$Subtype.<init>()` with no summary,
                                                                    in call to `DynamicDispatch$Subtype.<init>()` at line 233 :t2
                                                                    [
                                                                    in call to function `DynamicDispatch$Subtype.<init>()` with no summary at line 169 :t2
                                                                    [
                                                                    ] ] ) },
                                                                    v6 -> { DynamicType java.lang.Object, SourceFile [None],
                                                                    MustBeValid(, None, t=11),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` at line 234 :t6
                                                                    [
                                                                    in call to `Object DynamicDispatch$Subtype.bar()` at line 210 :t3
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 177 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                                    v8 -> { MustBeValid(, None, t=7),
                                                                    WrittenTo (7, ) },
                                                                    v10 -> { PropagateTaintFrom([{v= v6}]),
                                                                    ReturnedFromUnknown([v6]) },
                                                                    v11 -> { MustBeValid(, None, t=13),
                                                                    WrittenTo (13, ) } };}
                                                                 PRE=[{
                                                                  roots=
                                                                  { };
                                                                  mem  =
                                                                  { };
                                                                  attrs=
                                                                  { };}]
                                                                 need_closure_specialization=false
                                                                 need_dynamic_type_specialization=
                                                                 { v6 }
                                                                 skipped_calls=
                                                                 { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here,
                                                                   Object.<init>() -> call to skipped function occurs here,
                                                                   String Object.toString() -> call to skipped function occurs here }
                                                                 Topl=
                                                                 {len=0;content=
                                                                   [  ]},
                                                                conditions= [] timestamp= 19)
                                                            
                                                            Non-disj state:
                                                              copy map: { }, 
                                                              parameter map: { },
                                                              destructor checked: { },
                                                              captured: { }, 
                                                              locked: false,
                                                              loads: (
                                                              { n$2 -> { o },
                                                                n$4 -> { $irvar0 } },
                                                              { o -> { line 234 -> { 5 } },
                                                                $irvar0 -> { line 234 -> { 10 } } }),
                                                              passed to: 
                                                              { o -> { Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype) -> { line 234 -> { 6 } } },
                                                                $irvar0 -> { String Object.toString() -> { line 234 -> { 12 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCWithInfeasiblePathsAndDerefBad(Specialization$A_Bad)
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*);  (a,
            codetoanalyze.java.infer.Specialization$A_Bad*)]
; is_defined= true
; loc= DynamicDispatch.java:432
; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCWithInfeasiblePathsAndDerefBad(codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.Specialization* [line 433];
      _=*n$0:codetoanalyze.java.infer.Specialization [line 433];
      n$2=*&a:codetoanalyze.java.infer.Specialization$A_Bad* [line 433];
      n$3=_fun_Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)(n$0:codetoanalyze.java.infer.Specialization*,n$2:codetoanalyze.java.infer.Specialization$A_Bad*,1:int) virtual [line 433];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$3 [line 433];
      NULLIFY(&a); [line 433];
      NULLIFY(&this); [line 433];
      EXIT_SCOPE(_,n$0,n$2,n$3,a,this); [line 433];
      
    #n5:
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 433];
      n$5=*n$4.f:codetoanalyze.java.infer.Specialization$C* [line 433];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$5 [line 433];
      NULLIFY(&$irvar0); [line 433];
      EXIT_SCOPE(n$4,n$5,$irvar0); [line 433];
      APPLY_ABSTRACTION; [line 433];
      
    process analysis
#n2:
      
    
    Specialization.buildCWithInfeasiblePathsAndDerefBad1 disjuncts:
                                                       #0: ({AbortProgram 
                                                           conditions: (empty) phi: (empty)
                                                           { roots={ &a=v2, &this=v1 };
                                                             mem  ={ v1 -> { * -> v3 },
                                                                    v2 -> { * -> v4 },
                                                                    v3 -> { * -> v5 },
                                                                    v4 -> { * -> v8 } };
                                                             attrs={ v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] },
                                                                    v4 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                                    StaticType class codetoanalyze.java.infer.Specialization$A_Bad } };}
                                                           PRE=[{ roots=
                                                                  { &a=v2, &this=v1 };
                                                                  mem  =
                                                                  { v1 -> { * -> v3 },
                                                                    v2 -> { * -> v4 },
                                                                    v3 -> { * -> v5 },
                                                                    v4 -> { * -> v8 } };
                                                                  attrs=
                                                                  { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v4 -> { MustBeInitialized(, t=4),
                                                                    MustBeValid(, None, t=4) } };}]
                                                           need_closure_specialization=false
                                                           need_dynamic_type_specialization=
                                                           { }
                                                           skipped_calls=
                                                           { }
                                                           Topl={len=0;content=
                                                                  [  ]}},
                                                           conditions= [] timestamp= 16)
                                                       process analysis end

                                                       Non-disj state: ⊤
{ proc_name= void DynamicDispatch$WithField.dispatchOnFieldOK()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:245
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= object; typ= codetoanalyze.java.infer.DynamicDispatch$WithField*; modify_in_block= false; is_declared_unused= false }; 
           { name= subtype; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch$WithField.dispatchOnFieldOK():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 246];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 246];
      *&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 246];
      EXIT_SCOPE(n$0,n$1); [line 246];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$WithField):codetoanalyze.java.infer.DynamicDispatch$WithField*) [line 247];
      n$3=*&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 247];
      n$4=_fun_DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$WithField*,n$3:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 247];
      *&object:codetoanalyze.java.infer.DynamicDispatch$WithField*=n$2 [line 247];
      NULLIFY(&subtype); [line 247];
      EXIT_SCOPE(n$2,n$3,n$4,subtype); [line 247];
      
    #n6:
      n$5=*&object:codetoanalyze.java.infer.DynamicDispatch$WithField* [line 248];
      n$6=*n$5.mField:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 248];
      _=*n$6:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 248];
      n$8=_fun_Object DynamicDispatch$Supertype.bar()(n$6:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 248];
      *&$irvar0:java.lang.Object*=n$8 [line 248];
      NULLIFY(&object); [line 248];
      EXIT_SCOPE(_,n$5,n$6,n$8,object); [line 248];
      
    #n7:
      n$9=*&$irvar0:java.lang.Object* [line 248];
      _=*n$9:java.lang.Object [line 248];
      n$11=_fun_String Object.toString()(n$9:java.lang.Object*) virtual [line 248];
      *&$irvar1:java.lang.String*=n$11 [line 248];
      NULLIFY(&$irvar1); [line 248];
      NULLIFY(&$irvar0); [line 248];
      EXIT_SCOPE(_,n$9,n$11,$irvar1,$irvar0); [line 248];
      
    #n8:
      APPLY_ABSTRACTION; [line 249];
      
    process analysis
#n2:
      
    
    DynamicDispatch$WithField.dispatchOnFieldOK1 disjuncts:
                                               #0: (conditions: (empty)
                                                    phi: linear_eqs: 
                                                         v4 = a1 +1 ∧ v8 = a2 +1
                                                          ∧ v12 = a3 +1
                                                         && term_eqs: 
                                                         DynamicDispatch$Subtype.<init>()([v4])=v6
                                                         ∧Object.<init>()([v8])=v11
                                                         ∧Object.<init>()([v12])=v13
                                                         ∧String Object.toString()([v12])=v16
                                                         ∧[a1 +1]=v4
                                                         ∧[a2 +1]=v8
                                                         ∧[a3 +1]=v12
                                                         && intervals: 
                                                         v4≥1 ∧ v8≥1
                                                          ∧ v12≥1
                                                    { roots={ };
                                                      mem  ={ v1 -> { * -> v8 },
                                                              v2 -> { * -> v4 },
                                                              v4 -> { * -> v5 },
                                                              v8 -> { mField -> v9, * -> v10 },
                                                              v9 -> { * -> v4 },
                                                              v12 -> { * -> v15 },
                                                              v14 -> { * -> v12 },
                                                              v17 -> { * -> v16 } };
                                                      attrs={ v1 -> { s&object (variable `object` declared here at line 245 :t0
                                                                    ) at line 248,
                                                                    MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) },
                                                              v2 -> { s&subtype (variable `subtype` declared here at line 245 :t0
                                                                    ) at line 247,
                                                                    MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                              v4 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    StaticType class codetoanalyze.java.infer.DynamicDispatch$Supertype,
                                                                    UnknownEffect(function `DynamicDispatch$Subtype.<init>()` with no summary,
                                                                    in call to `DynamicDispatch$Subtype.<init>()` at line 246 :t2
                                                                    [
                                                                    in call to function `DynamicDispatch$Subtype.<init>()` with no summary at line 169 :t2
                                                                    [
                                                                    ] ] ) },
                                                              v8 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$WithField, SourceFile [None],
                                                                    MustBeValid(, None, t=7),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype)` at line 247 :t7
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 241 :t2
                                                                    [
                                                                    ] ] ) },
                                                              v9 -> { MustBeValid(, None, t=7),
                                                                    WrittenTo (7, ) },
                                                              v12 -> { DynamicType java.lang.Object, SourceFile [None],
                                                                    MustBeValid(, None, t=19),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Subtype.bar()` at line 248 :t14
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 177 :t2
                                                                    [
                                                                    ] ] ) },
                                                              v14 -> { MustBeValid(, None, t=15),
                                                                    WrittenTo (15, ) },
                                                              v16 -> { PropagateTaintFrom([{v= v12}]),
                                                                    ReturnedFromUnknown([v12]) },
                                                              v17 -> { MustBeValid(, None, t=21),
                                                                    WrittenTo (21, ) } };}
                                                    PRE=[{ roots={ };
                                                           mem  ={ };
                                                           attrs={ };}]
                                                    need_closure_specialization=false
                                                    need_dynamic_type_specialization=
                                                    { v12 }
                                                    skipped_calls={ DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here,
                                                                    Object.<init>() -> call to skipped function occurs here,
                                                                    String Object.toString() -> call to skipped function occurs here }
                                                    Topl={len=0;content=
                                                           [  ]},
                                                   conditions= [] timestamp= 27)
                                               
                                               Non-disj state:
                                                 copy map: { }, parameter map: { },
                                                 destructor checked: { }, 
                                                 captured: { }, locked: false,
                                                 loads: ({ n$3 -> { subtype },
                                                           n$5 -> { object },
                                                           n$9 -> { $irvar0 } },
                                                 { object -> { line 248 -> { 11 } },
                                                   $irvar0 -> { line 248 -> { 18 } },
                                                   subtype -> { line 247 -> { 6 } } }),
                                                 passed to: { $irvar0 -> { String Object.toString() -> { line 248 -> { 20 } } },
                                                              subtype -> { DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype) -> { line 247 -> { 7 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCTransitivelyAndDerefGood()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:424
; locals= [{ name= $irvar2; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCTransitivelyAndDerefGood():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$A_Bad*) [line 425];
      n$1=_fun_Specialization$A_Bad.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Bad*) [line 425];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad*=n$0 [line 425];
      EXIT_SCOPE(n$0,n$1); [line 425];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 425];
      n$3=_fun_Specialization$A_Good.<init>()(n$2:codetoanalyze.java.infer.Specialization$A_Good*) [line 425];
      *&$irvar1:codetoanalyze.java.infer.Specialization$A_Good*=n$2 [line 425];
      EXIT_SCOPE(n$2,n$3); [line 425];
      
    #n6:
      n$4=*&this:codetoanalyze.java.infer.Specialization* [line 425];
      _=*n$4:codetoanalyze.java.infer.Specialization [line 425];
      n$6=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad* [line 425];
      n$7=*&$irvar1:codetoanalyze.java.infer.Specialization$A_Good* [line 425];
      n$8=_fun_Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)(n$4:codetoanalyze.java.infer.Specialization*,n$6:codetoanalyze.java.infer.Specialization$A_Bad*,n$7:codetoanalyze.java.infer.Specialization$A_Good*) virtual [line 425];
      *&$irvar2:codetoanalyze.java.infer.Specialization$C*=n$8 [line 425];
      NULLIFY(&$irvar1); [line 425];
      NULLIFY(&this); [line 425];
      NULLIFY(&$irvar0); [line 425];
      EXIT_SCOPE(_,n$4,n$6,n$7,n$8,$irvar1,this,$irvar0); [line 425];
      
    #n7:
      n$9=*&$irvar2:codetoanalyze.java.infer.Specialization$C* [line 425];
      n$10=*n$9.f:codetoanalyze.java.infer.Specialization$C* [line 425];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$10 [line 425];
      NULLIFY(&$irvar2); [line 425];
      EXIT_SCOPE(n$9,n$10,$irvar2); [line 425];
      APPLY_ABSTRACTION; [line 425];
      
    process analysis
#n2:
      
    
    Specialization.buildCTransitivelyAndDerefGood1 disjuncts:
                                                 #0: (conditions: (empty)
                                                      phi: linear_eqs: 
                                                           v5 = a1 +1
                                                            ∧ v10 = a2 +1
                                                            ∧ v14 = a3 +1
                                                           && term_eqs: 
                                                           Specialization$A_Bad.<init>()([v5])=v7
                                                           ∧Specialization$A_Good.<init>()([v10])=v12
                                                           ∧Specialization$C.<init>()([v14])=v16
                                                           ∧[a1 +1]=v5
                                                           ∧[a2 +1]=v10
                                                           ∧[a3 +1]=v14
                                                           && intervals: 
                                                           v5≥1 ∧ v10≥1
                                                            ∧ v14≥1
                                                      { roots={ &this=v1, &return=v20 };
                                                        mem  ={ v1 -> { * -> v2 },
                                                                v2 -> { * -> v3 },
                                                                v5 -> { * -> v6 },
                                                                v8 -> { * -> v5 },
                                                                v10 -> { * -> v11 },
                                                                v13 -> { * -> v10 },
                                                                v14 -> { f -> v18, * -> v15 },
                                                                v17 -> { * -> v14 },
                                                                v18 -> { * -> v19 },
                                                                v20 -> { * -> v19 } };
                                                        attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                                v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                    MustBeValid(, None, t=0) },
                                                                v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `Specialization$A_Bad.<init>()` with no summary,
                                                                    in call to `Specialization$A_Bad.<init>()` at line 425 :t2
                                                                    [
                                                                    in call to function `Specialization$A_Bad.<init>()` with no summary at line 358 :t2
                                                                    [
                                                                    ] ] ) },
                                                                v8 -> { MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                                v10 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                                    MustBeValid(, None, t=6),
                                                                    UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                                                    in call to `Specialization$A_Good.<init>()` at line 425 :t6
                                                                    [
                                                                    in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                                                    [
                                                                    ] ] ) },
                                                                v13 -> { MustBeValid(, None, t=7),
                                                                    WrittenTo (7, ) },
                                                                v14 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                                    MustBeValid(, None, t=20),
                                                                    UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)` at line 425 :t13
                                                                    [
                                                                    in call to `Specialization$C Specialization$A.callBuildC(Specialization$A)` at line 417 :t4
                                                                    [
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 347 :t3
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ] ] ) },
                                                                v17 -> { MustBeValid(, None, t=14),
                                                                    WrittenTo (14, ) },
                                                                v18 -> { MustBeValid(, None, t=20) },
                                                                v20 -> { MustBeValid(, None, t=21),
                                                                    WrittenTo (21, ) } };}
                                                      PRE=[{ roots={ &this=v1 };
                                                             mem  ={ v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                             attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                      need_closure_specialization=false
                                                      need_dynamic_type_specialization=
                                                      { }
                                                      skipped_calls={ Specialization$A_Bad.<init>() -> call to skipped function occurs here,
                                                                    Specialization$A_Good.<init>() -> call to skipped function occurs here,
                                                                    Specialization$C.<init>() -> call to skipped function occurs here }
                                                      Topl={len=0;content=
                                                             [  ]},
                                                     conditions= [] timestamp= 26)
                                                 
                                                 Non-disj state:
                                                   copy map: { }, parameter map: { },
                                                   destructor checked: { }, 
                                                   captured: { }, locked: false,
                                                   loads: ({ n$4 -> { this },
                                                             n$6 -> { $irvar0 },
                                                             n$7 -> { $irvar1 },
                                                             n$9 -> { $irvar2 } },
                                                   { $irvar1 -> { line 425 -> { 12 } },
                                                     $irvar2 -> { line 425 -> { 19 } },
                                                     this -> { line 425 -> { 9 } },
                                                     $irvar0 -> { line 425 -> { 11 } } }),
                                                   passed to: { $irvar1 -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } },
                                                                this -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } },
                                                                $irvar0 -> { Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A) -> { line 425 -> { 13 } } } }process analysis end

{ proc_name= Specialization$C Specialization.buildCWithInfeasiblePathsAndDerefGood()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:436
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCWithInfeasiblePathsAndDerefGood():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Good):codetoanalyze.java.infer.Specialization$A_Good*) [line 437];
      n$1=_fun_Specialization$A_Good.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Good*) [line 437];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Good*=n$0 [line 437];
      EXIT_SCOPE(n$0,n$1); [line 437];
      
    #n5:
      n$2=*&this:codetoanalyze.java.infer.Specialization* [line 437];
      _=*n$2:codetoanalyze.java.infer.Specialization [line 437];
      n$4=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Good* [line 437];
      n$5=_fun_Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)(n$2:codetoanalyze.java.infer.Specialization*,n$4:codetoanalyze.java.infer.Specialization$A_Good*,1:int) virtual [line 437];
      *&$irvar1:codetoanalyze.java.infer.Specialization$C*=n$5 [line 437];
      NULLIFY(&this); [line 437];
      NULLIFY(&$irvar0); [line 437];
      EXIT_SCOPE(_,n$2,n$4,n$5,this,$irvar0); [line 437];
      
    #n6:
      n$6=*&$irvar1:codetoanalyze.java.infer.Specialization$C* [line 437];
      n$7=*n$6.f:codetoanalyze.java.infer.Specialization$C* [line 437];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$7 [line 437];
      NULLIFY(&$irvar1); [line 437];
      EXIT_SCOPE(n$6,n$7,$irvar1); [line 437];
      APPLY_ABSTRACTION; [line 437];
      
    process analysis
#n2:
      
    
    Specialization.buildCWithInfeasiblePathsAndDerefGood1 disjuncts:
                                                        #0: (conditions: (empty)
                                                             phi: linear_eqs: 
                                                                  v5 = a1 +1
                                                                   ∧ v9 = 1
                                                                   ∧ v10 = a2 +1
                                                                  && term_eqs: 
                                                                  1=v9
                                                                  ∧Specialization$A_Good.<init>()([v5])=v7
                                                                  ∧Specialization$C.<init>()([v10])=v12
                                                                  ∧[a1 +1]=v5
                                                                  ∧[a2 +1]=v10
                                                                  && intervals: 
                                                                  v5≥1
                                                                   ∧ v9=1
                                                                   ∧ v10≥1
                                                             { roots=
                                                               { &this=v1, &return=v16 };
                                                               mem  =
                                                               { v1 -> { * -> v2 },
                                                                 v2 -> { * -> v3 },
                                                                 v5 -> { * -> v6 },
                                                                 v8 -> { * -> v5 },
                                                                 v10 -> { f -> v14, * -> v11 },
                                                                 v13 -> { * -> v10 },
                                                                 v14 -> { * -> v15 },
                                                                 v16 -> { * -> v15 } };
                                                               attrs=
                                                               { v1 -> { MustBeValid(, None, t=0) },
                                                                 v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                    MustBeValid(, None, t=0) },
                                                                 v5 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Good, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `Specialization$A_Good.<init>()` with no summary,
                                                                    in call to `Specialization$A_Good.<init>()` at line 437 :t2
                                                                    [
                                                                    in call to function `Specialization$A_Good.<init>()` with no summary at line 351 :t2
                                                                    [
                                                                    ] ] ) },
                                                                 v8 -> { MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                                 v9 -> { Invalid ConstantDereference(is assigned to the constant 1) },
                                                                 v10 -> { DynamicType codetoanalyze.java.infer.Specialization$C, SourceFile [None],
                                                                    MustBeValid(, None, t=14),
                                                                    UnknownEffect(function `Specialization$C.<init>()` with no summary,
                                                                    in call to `Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)` at line 437 :t8
                                                                    [
                                                                    in call to `Specialization$C Specialization$A_Good.buildC()` at line 429 :t7
                                                                    [
                                                                    in call to `Specialization$C.<init>()` at line 353 :t2
                                                                    [
                                                                    in call to function `Specialization$C.<init>()` with no summary at line 339 :t2
                                                                    [
                                                                    ] ] ] ] ) },
                                                                 v13 -> { MustBeValid(, None, t=9),
                                                                    WrittenTo (9, ) },
                                                                 v14 -> { MustBeValid(, None, t=14) },
                                                                 v16 -> { MustBeValid(, None, t=15),
                                                                    WrittenTo (15, ) } };}
                                                             PRE=[{ roots=
                                                                    { &this=v1 };
                                                                    mem  =
                                                                    { v1 -> { * -> v2 },
                                                                    v2 -> { * -> v3 },
                                                                    v3 -> { } };
                                                                    attrs=
                                                                    { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v2 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                             need_closure_specialization=false
                                                             need_dynamic_type_specialization=
                                                             { }
                                                             skipped_calls=
                                                             { Specialization$A_Good.<init>() -> call to skipped function occurs here,
                                                               Specialization$C.<init>() -> call to skipped function occurs here }
                                                             Topl={len=0;content=
                                                                    [  ]},
                                                            conditions= [] timestamp= 20)
                                                        
                                                        Non-disj state:
                                                          copy map: { }, 
                                                          parameter map: { },
                                                          destructor checked: { }, 
                                                          captured: { }, 
                                                          locked: false,
                                                          loads: ({ n$2 -> { this },
                                                                    n$4 -> { $irvar0 },
                                                                    n$6 -> { $irvar1 } },
                                                          { $irvar1 -> { line 437 -> { 13 } },
                                                            this -> { line 437 -> { 5 } },
                                                            $irvar0 -> { line 437 -> { 7 } } }),
                                                          passed to: 
                                                          { this -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 437 -> { 8 } } },
                                                            $irvar0 -> { Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean) -> { line 437 -> { 8 } } } }process analysis end

{ proc_name= void DynamicDispatch.dynamicResolutionWithVariadicMethodBad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:275
; locals= [{ name= $irvar2; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= subtype; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicResolutionWithVariadicMethodBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 276];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 276];
      *&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 276];
      EXIT_SCOPE(n$0,n$1); [line 276];
      
    #n5:
      n$2=_fun___new_array(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_];len=[3]):codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*)) [line 277];
      *&$irvar0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*)=n$2 [line 277];
      EXIT_SCOPE(n$2); [line 277];
      
    #n6:
      n$3=*&$irvar0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 277];
      n$4=*&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 277];
      *n$3[0]:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$4 [line 277];
      NULLIFY(&subtype); [line 277];
      EXIT_SCOPE(n$3,n$4,subtype); [line 277];
      
    #n7:
      n$5=*&$irvar0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 277];
      *n$5[1]:java.lang.Object*=null [line 277];
      EXIT_SCOPE(n$5); [line 277];
      
    #n8:
      n$6=*&$irvar0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 277];
      *n$6[2]:java.lang.Object*=null [line 277];
      EXIT_SCOPE(n$6); [line 277];
      
    #n9:
      n$7=*&this:codetoanalyze.java.infer.DynamicDispatch* [line 277];
      _=*n$7:codetoanalyze.java.infer.DynamicDispatch [line 277];
      n$9=*&$irvar0:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*) [line 277];
      n$10=_fun_Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])(n$7:codetoanalyze.java.infer.DynamicDispatch*,n$9:codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_](*)) virtual [line 277];
      *&$irvar1:java.lang.Object*=n$10 [line 277];
      NULLIFY(&this); [line 277];
      NULLIFY(&$irvar0); [line 277];
      EXIT_SCOPE(_,n$7,n$9,n$10,this,$irvar0); [line 277];
      
    #n10:
      n$11=*&$irvar1:java.lang.Object* [line 277];
      _=*n$11:java.lang.Object [line 277];
      n$13=_fun_String Object.toString()(n$11:java.lang.Object*) virtual [line 277];
      *&$irvar2:java.lang.String*=n$13 [line 277];
      NULLIFY(&$irvar1); [line 277];
      NULLIFY(&$irvar2); [line 277];
      EXIT_SCOPE(_,n$11,n$13,$irvar1,$irvar2); [line 277];
      
    #n11:
      APPLY_ABSTRACTION; [line 278];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicResolutionWithVariadicMethodBad2 disjuncts:
                                                          #0: (conditions: (empty)
                                                               phi: var_eqs: 
                                                                    v6=v20
                                                                     ∧ v7=v21
                                                                     ∧ v12=v18
                                                                     ∧ v13=v19
                                                                    && linear_eqs: 
                                                                    v6 = a1 +1
                                                                     ∧ v10 = a2 +1
                                                                     ∧ v12 = 0
                                                                     ∧ v14 = 1
                                                                     ∧ v16 = 2
                                                                     ∧ v23 = a3 +1
                                                                    && term_eqs: 
                                                                    0=v12
                                                                    ∧1=v14
                                                                    ∧2=v16
                                                                    ∧DynamicDispatch$Subtype.<init>()([v6])=v8
                                                                    ∧Object.<init>()([v23])=v24
                                                                    ∧String Object.toString()([v23])=v29
                                                                    ∧[a1 +1]=v6
                                                                    ∧[a2 +1]=v10
                                                                    ∧[a3 +1]=v23
                                                                    && intervals: 
                                                                    v6≥1
                                                                     ∧ v10≥1
                                                                     ∧ v12=null
                                                                     ∧ v14=1
                                                                     ∧ v16=2
                                                                     ∧ v18=0
                                                                     ∧ v23≥1
                                                               { roots=
                                                                 { &this=v1 };
                                                                 mem  =
                                                                 { v1 -> { * -> v3 },
                                                                   v2 -> { * -> v6 },
                                                                   v3 -> { * -> v4 },
                                                                   v10 -> { * -> v22,
                                                                    [v18] -> v19,
                                                                    [v16] -> v17,
                                                                    [v14] -> v15,
                                                                    [v12] -> v13 },
                                                                   v11 -> { * -> v10 },
                                                                   v15 -> { * -> v12 },
                                                                   v17 -> { * -> v12 },
                                                                   v19 -> { * -> v20 },
                                                                   v20 -> { * -> v21 },
                                                                   v23 -> { * -> v28 },
                                                                   v26 -> { * -> v23 },
                                                                   v30 -> { * -> v29 } };
                                                                 attrs=
                                                                 { v1 -> { MustBeValid(, None, t=0) },
                                                                   v2 -> { s&subtype (variable `subtype` declared here at line 275 :t0
                                                                    ) at line 277,
                                                                    MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                                   v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                                                                    MustBeValid(, None, t=0) },
                                                                   v6 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `DynamicDispatch$Subtype.<init>()` with no summary,
                                                                    in call to `DynamicDispatch$Subtype.<init>()` at line 276 :t2
                                                                    [
                                                                    in call to function `DynamicDispatch$Subtype.<init>()` with no summary at line 169 :t2
                                                                    [
                                                                    ] ] ) },
                                                                   v10 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Supertype*[_*_], SourceFile [None],
                                                                    MustBeValid(, None, t=10) },
                                                                   v11 -> { MustBeValid(, None, t=6),
                                                                    WrittenTo (6, ) },
                                                                   v12 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                                   v13 -> { MustBeValid(, None, t=10),
                                                                    WrittenTo (10, ) },
                                                                   v14 -> { Invalid ConstantDereference(is assigned to the constant 1) },
                                                                   v15 -> { MustBeValid(, None, t=14),
                                                                    WrittenTo (14, ) },
                                                                   v16 -> { Invalid ConstantDereference(is assigned to the constant 2) },
                                                                   v17 -> { MustBeValid(, None, t=17),
                                                                    WrittenTo (17, ) },
                                                                   v18 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                                   v19 -> { MustBeValid(, None, t=22) },
                                                                   v20 -> { MustBeValid(, None, t=22) },
                                                                   v23 -> { DynamicType java.lang.Object, SourceFile [None],
                                                                    MustBeValid(, None, t=28),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])` at line 277 :t22
                                                                    [
                                                                    in call to `Object DynamicDispatch$Supertype.foo()` at line 271 :t10
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 161 :t2
                                                                    [
                                                                    ] ] ] ) },
                                                                   v26 -> { MustBeValid(, None, t=23),
                                                                    WrittenTo (23, ) },
                                                                   v29 -> { PropagateTaintFrom([{v= v23}]),
                                                                    ReturnedFromUnknown([v23]) },
                                                                   v30 -> { MustBeValid(, None, t=30),
                                                                    WrittenTo (30, ) } };}
                                                               PRE=[{
                                                                roots=
                                                                { &this=v1 };
                                                                mem  =
                                                                { v1 -> { * -> v3 },
                                                                  v3 -> { * -> v4 },
                                                                  v4 -> { } };
                                                                attrs=
                                                                { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                  v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                               need_closure_specialization=false
                                                               need_dynamic_type_specialization=
                                                               { v23 }
                                                               skipped_calls=
                                                               { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here,
                                                                 Object.<init>() -> call to skipped function occurs here,
                                                                 String Object.toString() -> call to skipped function occurs here }
                                                               Topl={len=0;content=
                                                                    [  ]},
                                                              conditions= [] timestamp= 36)
                                                          #1: ({AbortProgram 
                                                              conditions: (empty) phi: (empty)
                                                              { roots=
                                                                { &this=v1 };
                                                                mem  =
                                                                { v1 -> { * -> v3 },
                                                                  v3 -> { * -> v4 } };
                                                                attrs=
                                                                { v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None] } };}
                                                              PRE=[{ roots=
                                                                    { &this=v1 };
                                                                    mem  =
                                                                    { v1 -> { * -> v3 },
                                                                    v3 -> { * -> v4 } };
                                                                    attrs=
                                                                    { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v3 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                              need_closure_specialization=false
                                                              need_dynamic_type_specialization=
                                                              { }
                                                              skipped_calls=
                                                              { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here }
                                                              Topl={len=0;content=
                                                                    [  ]}},
                                                              conditions= [] timestamp= 36)
                                                          
                                                          Non-disj state:
                                                            copy map: { }, 
                                                            parameter map: { },
                                                            destructor checked: { }, 
                                                            captured: { }, 
                                                            locked: false,
                                                            loads: ({ n$3 -> { $irvar0 },
                                                                    n$4 -> { subtype },
                                                                    n$5 -> { $irvar0 },
                                                                    n$6 -> { $irvar0 },
                                                                    n$7 -> { this },
                                                                    n$9 -> { $irvar0 },
                                                                    n$11 -> { $irvar1 } },
                                                            { $irvar1 -> { line 277 -> { 27 } },
                                                              this -> { line 277 -> { 19 } },
                                                              $irvar0 -> { line 277 -> { 8,
                                                                    13,
                                                                    16,
                                                                    21 } },
                                                              subtype -> { line 277 -> { 9 } } }),
                                                            passed to: 
                                                            { $irvar1 -> { String Object.toString() -> { line 277 -> { 29 } } },
                                                              this -> { Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[]) -> { line 277 -> { 22 } } },
                                                              $irvar0 -> { Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[]) -> { line 277 -> { 22 } } } }process analysis end

{ proc_name= void DynamicDispatch.dynamicDispatchShouldNotCauseFalsePositiveEasyOK()
; translation_unit= DynamicDispatch.java
; formals= []
; is_defined= true
; loc= DynamicDispatch.java:187
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchShouldNotCauseFalsePositiveEasyOK():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 188];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 188];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 188];
      EXIT_SCOPE(n$0,n$1); [line 188];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 190];
      _=*n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype [line 190];
      n$4=_fun_Object DynamicDispatch$Subtype.bar()(n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 190];
      *&$irvar0:java.lang.Object*=n$4 [line 190];
      NULLIFY(&o); [line 190];
      EXIT_SCOPE(_,n$2,n$4,o); [line 190];
      
    #n6:
      n$5=*&$irvar0:java.lang.Object* [line 190];
      _=*n$5:java.lang.Object [line 190];
      n$7=_fun_String Object.toString()(n$5:java.lang.Object*) virtual [line 190];
      *&$irvar1:java.lang.String*=n$7 [line 190];
      NULLIFY(&$irvar1); [line 190];
      NULLIFY(&$irvar0); [line 190];
      EXIT_SCOPE(_,n$5,n$7,$irvar1,$irvar0); [line 190];
      
    #n7:
      APPLY_ABSTRACTION; [line 191];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchShouldNotCauseFalsePositiveEasyOK1 disjuncts:
                                                                    #0: 
                                                                    (
                                                                    conditions: (empty)
                                                                    phi: 
                                                                    linear_eqs: 
                                                                    v3 = a1 +1
                                                                     ∧ v6 = a2 +1
                                                                    && term_eqs: 
                                                                    DynamicDispatch$Subtype.<init>()([v3])=v5
                                                                    ∧Object.<init>()([v6])=v7
                                                                    ∧String Object.toString()([v6])=v10
                                                                    ∧[a1 +1]=v3
                                                                    ∧[a2 +1]=v6
                                                                    && intervals: 
                                                                    v3≥1 ∧ v6≥1
                                                                    {
                                                                     roots=
                                                                    { };
                                                                    mem  =
                                                                    { v1 -> { * -> v3 },
                                                                    v3 -> { * -> v4 },
                                                                    v6 -> { * -> v9 },
                                                                    v8 -> { * -> v6 },
                                                                    v11 -> { * -> v10 } };
                                                                    attrs=
                                                                    { v1 -> { s&o (variable `o` declared here at line 187 :t0
                                                                    ) at line 190,
                                                                    MustBeValid(, None, t=3),
                                                                    WrittenTo (3, ) },
                                                                    v3 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                                                    MustBeValid(, None, t=2),
                                                                    UnknownEffect(function `DynamicDispatch$Subtype.<init>()` with no summary,
                                                                    in call to `DynamicDispatch$Subtype.<init>()` at line 188 :t2
                                                                    [
                                                                    in call to function `DynamicDispatch$Subtype.<init>()` with no summary at line 169 :t2
                                                                    [
                                                                    ] ] ) },
                                                                    v6 -> { DynamicType java.lang.Object, SourceFile [None],
                                                                    MustBeValid(, None, t=12),
                                                                    UnknownEffect(function `Object.<init>()` with no summary,
                                                                    in call to `Object DynamicDispatch$Subtype.bar()` at line 190 :t7
                                                                    [
                                                                    in call to function `Object.<init>()` with no summary at line 177 :t2
                                                                    [
                                                                    ] ] ) },
                                                                    v8 -> { MustBeValid(, None, t=8),
                                                                    WrittenTo (8, ) },
                                                                    v10 -> { PropagateTaintFrom([{v= v6}]),
                                                                    ReturnedFromUnknown([v6]) },
                                                                    v11 -> { MustBeValid(, None, t=14),
                                                                    WrittenTo (14, ) } };}
                                                                    PRE=[{
                                                                     roots=
                                                                    { };
                                                                    mem  =
                                                                    { };
                                                                    attrs=
                                                                    { };}]
                                                                    need_closure_specialization=false
                                                                    need_dynamic_type_specialization=
                                                                    { v6 }
                                                                    skipped_calls=
                                                                    { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here,
                                                                    Object.<init>() -> call to skipped function occurs here,
                                                                    String Object.toString() -> call to skipped function occurs here }
                                                                    Topl=
                                                                    {len=0;content=
                                                                    [  ]},conditions= []
                                                                    timestamp= 20)
                                                                    
                                                                    Non-disj state:
                                                                    copy map: { },
                                                                    parameter map: { },
                                                                    destructor checked: { },
                                                                    captured: { }, 
                                                                    locked: false,
                                                                    loads: (
                                                                    { n$2 -> { o },
                                                                    n$5 -> { $irvar0 } },
                                                                    { o -> { line 190 -> { 5 } },
                                                                    $irvar0 -> { line 190 -> { 11 } } }),
                                                                    passed to: 
                                                                    { o -> { Object DynamicDispatch$Subtype.bar() -> { line 190 -> { 7 } } },
                                                                    $irvar0 -> { String Object.toString() -> { line 190 -> { 13 } } } }process analysis end

{ proc_name= DynamicDispatch.<init>()
; translation_unit= DynamicDispatch.java
; access= Public
; formals= [(this,codetoanalyze.java.infer.DynamicDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:132
; locals= []
; ret_type= void 
; proc_id= codetoanalyze.java.infer.DynamicDispatch.<init>() }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.DynamicDispatch* [line 132];
      n$1=_fun_Object.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch*) [line 132];
      NULLIFY(&this); [line 132];
      EXIT_SCOPE(n$0,n$1,this); [line 132];
      
    #n5:
      APPLY_ABSTRACTION; [line 132];
      
    process analysis
#n2:
      
    
    DynamicDispatch.<init>1 disjuncts:
                          #0: (conditions: (empty) phi: term_eqs: DynamicDispatch.<init>()([v2])=v4
                               { roots={ &this=v1 };
                                 mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                                 attrs={ v1 -> { MustBeValid(, None, t=0) },
                                         v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch, SourceFile [None],
                                                 MustBeValid(, None, t=0),
                                                 UnknownEffect(function `DynamicDispatch.<init>()` with no summary,
                                                               in call to function `DynamicDispatch.<init>()` with no summary at line 132 :t2
                                                               [] ) } };}
                               PRE=[{ roots={ &this=v1 };
                                      mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 }, v3 -> { } };
                                      attrs={ v1 -> { MustBeInitialized(, t=0),
                                                      MustBeValid(, None, t=0) },
                                              v2 -> { MustBeInitialized(, t=0),
                                                      MustBeValid(, None, t=0) } };}]
                               need_closure_specialization=false
                               need_dynamic_type_specialization={ }
                               skipped_calls={ DynamicDispatch.<init>() -> call to skipped function occurs here }
                               Topl={len=0;content=
                                      [  ]},
                              conditions= [] timestamp= 7)
                          
                          Non-disj state:
                            copy map: { }, parameter map: { }, destructor checked: { },
                            captured: { }, locked: false,
                            loads: ({ n$0 -> { this } },{ this -> { line 132 -> { 1 } } }),
                            passed to: { this -> { DynamicDispatch.<init>() -> { line 132 -> { 2 } } } }process analysis end

{ proc_name= void InheritanceDispatch.dispatch_to_C_bad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.InheritanceDispatch*)]
; is_defined= true
; loc= DynamicDispatch.java:328
; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= c; typ= codetoanalyze.java.infer.InheritanceDispatch$A*; modify_in_block= false; is_declared_unused= false }; 
           { name= o; typ= java.lang.Object*; modify_in_block= false; is_declared_unused= false }]
; ret_type= void 
; proc_id= codetoanalyze.java.infer.InheritanceDispatch.dispatch_to_C_bad():void }
    #n1:
      
    #n4:
      n$0=*&this:codetoanalyze.java.infer.InheritanceDispatch* [line 329];
      _=*n$0:codetoanalyze.java.infer.InheritanceDispatch [line 329];
      n$2=_fun_InheritanceDispatch$A InheritanceDispatch.getC()(n$0:codetoanalyze.java.infer.InheritanceDispatch*) virtual [line 329];
      *&c:codetoanalyze.java.infer.InheritanceDispatch$A*=n$2 [line 329];
      NULLIFY(&this); [line 329];
      EXIT_SCOPE(_,n$0,n$2,this); [line 329];
      
    #n5:
      n$3=*&c:codetoanalyze.java.infer.InheritanceDispatch$A* [line 330];
      _=*n$3:codetoanalyze.java.infer.InheritanceDispatch$A [line 330];
      n$5=_fun_int InheritanceDispatch$A.foo()(n$3:codetoanalyze.java.infer.InheritanceDispatch$A*) virtual [line 330];
      *&$irvar0:int=n$5 [line 330];
      NULLIFY(&c); [line 330];
      EXIT_SCOPE(_,n$3,n$5,c); [line 330];
      
    #n6:
      n$6=*&$irvar0:int [line 330];
      PRUNE(!(n$6 != 52), true); [line 330];
      NULLIFY(&$irvar0); [line 330];
      EXIT_SCOPE(n$6,$irvar0); [line 330];
      
    #n8:
      *&o:java.lang.Object*=null [line 331];
      
    #n9:
      n$7=*&o:java.lang.Object* [line 332];
      _=*n$7:java.lang.Object [line 332];
      n$9=_fun_String Object.toString()(n$7:java.lang.Object*) virtual [line 332];
      *&$irvar1:java.lang.String*=n$9 [line 332];
      NULLIFY(&o); [line 332];
      NULLIFY(&$irvar1); [line 332];
      EXIT_SCOPE(_,n$7,n$9,o,$irvar1); [line 332];
      APPLY_ABSTRACTION; [line 332];
      
    #n7:
      n$6=*&$irvar0:int [line 330];
      PRUNE((n$6 != 52), false); [line 330];
      NULLIFY(&$irvar0); [line 330];
      EXIT_SCOPE(n$6,$irvar0); [line 330];
      APPLY_ABSTRACTION; [line 330];
      
    #n10:
      APPLY_ABSTRACTION; [line 334];
      
    process analysis
#n2:
      
    
    InheritanceDispatch.dispatch_to_C_bad1 disjuncts:
                                         #0: ({AbortProgram conditions: (empty)
                                                            phi: linear_eqs: 
                                                                 v6 = a1 +1
                                                                 && term_eqs: 
                                                                 InheritanceDispatch$C.<init>(InheritanceDispatch)([v6],[v4])=v8
                                                                 ∧[a1 +1]=v6
                                                                 && intervals: 
                                                                 v6≥1
                                                            { roots={ &this=v1 };
                                                              mem  ={ v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                              attrs={ v4 -> { DynamicType codetoanalyze.java.infer.InheritanceDispatch, SourceFile [None] } };}
                                                            PRE=[{ roots=
                                                                   { &this=v1 };
                                                                   mem  =
                                                                   { v1 -> { * -> v4 },
                                                                    v4 -> { * -> v5 } };
                                                                   attrs=
                                                                   { v1 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) },
                                                                    v4 -> { MustBeInitialized(, t=0),
                                                                    MustBeValid(, None, t=0) } };}]
                                                            need_closure_specialization=false
                                                            need_dynamic_type_specialization=
                                                            { }
                                                            skipped_calls=
                                                            { InheritanceDispatch$C.<init>(InheritanceDispatch) -> call to skipped function occurs here }
                                                            Topl={len=0;content=
                                                                   [  ]}},
                                             conditions= [] timestamp= 28)
                                         process analysis end

                                         Non-disj state: ⊤{ proc_name= void DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeBad()
                                                            ; translation_unit= DynamicDispatch.java
                                                            ; formals= [
                                                            ]
                                                            ; is_defined= true
                                                            ; loc= DynamicDispatch.java:225
                                                            ; locals= [
                                                            { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                            { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
                                                            { name= o; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
                                                            ; ret_type= void 
                                                            ; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 227];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 227];
      *&o:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 227];
      EXIT_SCOPE(n$0,n$1); [line 227];
      
    #n5:
      n$2=*&o:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 228];
      n$3=_fun_Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 228];
      *&$irvar0:java.lang.Object*=n$3 [line 228];
      NULLIFY(&o); [line 228];
      EXIT_SCOPE(n$2,n$3,o); [line 228];
      
    #n6:
      n$4=*&$irvar0:java.lang.Object* [line 228];
      _=*n$4:java.lang.Object [line 228];
      n$6=_fun_String Object.toString()(n$4:java.lang.Object*) virtual [line 228];
      *&$irvar1:java.lang.String*=n$6 [line 228];
      NULLIFY(&$irvar1); [line 228];
      NULLIFY(&$irvar0); [line 228];
      EXIT_SCOPE(_,n$4,n$6,$irvar1,$irvar0); [line 228];
      
    #n7:
      APPLY_ABSTRACTION; [line 229];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchCallsWrapperWithSubtypeBad1 disjuncts:
                                                             #0: ({AbortProgram 
                                                                 conditions: (empty) phi: (empty)
                                                                 { roots=
                                                                   { };
                                                                   mem  =
                                                                   { };
                                                                   attrs=
                                                                   { };}
                                                                 PRE=[{
                                                                  roots=
                                                                  { };
                                                                  mem  =
                                                                  { };
                                                                  attrs=
                                                                  { };}]
                                                                 need_closure_specialization=false
                                                                 need_dynamic_type_specialization=
                                                                 { }
                                                                 skipped_calls=
                                                                 { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here }
                                                                 Topl=
                                                                 {len=0;content=
                                                                   [  ]}},
                                                                 conditions= [] timestamp= 19)
                                                             process analysis end

                                                             Non-disj state: ⊤
{ proc_name= Specialization$C Specialization.buildCOnBoxAndDerefBad()
; translation_unit= DynamicDispatch.java
; formals= [(this,codetoanalyze.java.infer.Specialization*)]
; is_defined= true
; loc= DynamicDispatch.java:407
; locals= [{ name= $irvar4; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar3; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar2; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
           { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
; ret_type= codetoanalyze.java.infer.Specialization$C* 
; proc_id= codetoanalyze.java.infer.Specialization.buildCOnBoxAndDerefBad():codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$A_Bad):codetoanalyze.java.infer.Specialization$A_Bad*) [line 408];
      n$1=_fun_Specialization$A_Bad.<init>()(n$0:codetoanalyze.java.infer.Specialization$A_Bad*) [line 408];
      *&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad*=n$0 [line 408];
      EXIT_SCOPE(n$0,n$1); [line 408];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box3):codetoanalyze.java.infer.Specialization$Box3*) [line 408];
      n$3=*&$irvar0:codetoanalyze.java.infer.Specialization$A_Bad* [line 408];
      n$4=_fun_Specialization$Box3.<init>(Specialization$A)(n$2:codetoanalyze.java.infer.Specialization$Box3*,n$3:codetoanalyze.java.infer.Specialization$A_Bad*) [line 408];
      *&$irvar1:codetoanalyze.java.infer.Specialization$Box3*=n$2 [line 408];
      NULLIFY(&$irvar0); [line 408];
      EXIT_SCOPE(n$2,n$3,n$4,$irvar0); [line 408];
      
    #n6:
      n$5=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box2):codetoanalyze.java.infer.Specialization$Box2*) [line 408];
      n$6=*&$irvar1:codetoanalyze.java.infer.Specialization$Box3* [line 408];
      n$7=_fun_Specialization$Box2.<init>(Specialization$Box3)(n$5:codetoanalyze.java.infer.Specialization$Box2*,n$6:codetoanalyze.java.infer.Specialization$Box3*) [line 408];
      *&$irvar2:codetoanalyze.java.infer.Specialization$Box2*=n$5 [line 408];
      NULLIFY(&$irvar1); [line 408];
      EXIT_SCOPE(n$5,n$6,n$7,$irvar1); [line 408];
      
    #n7:
      n$8=_fun___new(sizeof(t=codetoanalyze.java.infer.Specialization$Box1):codetoanalyze.java.infer.Specialization$Box1*) [line 408];
      n$9=*&$irvar2:codetoanalyze.java.infer.Specialization$Box2* [line 408];
      n$10=_fun_Specialization$Box1.<init>(Specialization$Box2)(n$8:codetoanalyze.java.infer.Specialization$Box1*,n$9:codetoanalyze.java.infer.Specialization$Box2*) [line 408];
      *&$irvar3:codetoanalyze.java.infer.Specialization$Box1*=n$8 [line 408];
      NULLIFY(&$irvar2); [line 408];
      EXIT_SCOPE(n$8,n$9,n$10,$irvar2); [line 408];
      
    #n8:
      n$11=*&this:codetoanalyze.java.infer.Specialization* [line 408];
      _=*n$11:codetoanalyze.java.infer.Specialization [line 408];
      n$13=*&$irvar3:codetoanalyze.java.infer.Specialization$Box1* [line 408];
      n$14=_fun_Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)(n$11:codetoanalyze.java.infer.Specialization*,n$13:codetoanalyze.java.infer.Specialization$Box1*) virtual [line 408];
      *&$irvar4:codetoanalyze.java.infer.Specialization$C*=n$14 [line 408];
      NULLIFY(&$irvar3); [line 408];
      NULLIFY(&this); [line 408];
      EXIT_SCOPE(_,n$11,n$13,n$14,$irvar3,this); [line 408];
      
    #n9:
      n$15=*&$irvar4:codetoanalyze.java.infer.Specialization$C* [line 408];
      n$16=*n$15.f:codetoanalyze.java.infer.Specialization$C* [line 408];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$16 [line 408];
      NULLIFY(&$irvar4); [line 408];
      EXIT_SCOPE(n$15,n$16,$irvar4); [line 408];
      APPLY_ABSTRACTION; [line 408];
      
    #n2:
      
    
    { proc_name= Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)
    ; translation_unit= DynamicDispatch.java
    ; formals= [(this,codetoanalyze.java.infer.Specialization*);  (box,
                codetoanalyze.java.infer.Specialization$Box1*)]
    ; is_defined= true
    ; loc= DynamicDispatch.java:403
    ; locals= [{ name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }]
    ; ret_type= codetoanalyze.java.infer.Specialization$C* 
    ; proc_id= codetoanalyze.java.infer.Specialization.callBuildCOnBoxGood(codetoanalyze.java.infer.Specialization$Box1):codetoanalyze.java.infer.Specialization$C }
    #n1:
      
    #n4:
      n$0=*&box:codetoanalyze.java.infer.Specialization$Box1* [line 404];
      n$1=*n$0.f1:codetoanalyze.java.infer.Specialization$Box2* [line 404];
      n$2=*n$1.f2:codetoanalyze.java.infer.Specialization$Box3* [line 404];
      n$3=*n$2.f3:codetoanalyze.java.infer.Specialization$A* [line 404];
      _=*n$3:codetoanalyze.java.infer.Specialization$A [line 404];
      n$5=_fun_Specialization$C Specialization$A.buildC()(n$3:codetoanalyze.java.infer.Specialization$A*) virtual [line 404];
      *&$irvar0:codetoanalyze.java.infer.Specialization$C*=n$5 [line 404];
      NULLIFY(&box); [line 404];
      EXIT_SCOPE(_,n$0,n$1,n$2,n$3,n$5,box); [line 404];
      
    #n5:
      n$6=*&$irvar0:codetoanalyze.java.infer.Specialization$C* [line 404];
      *&return:codetoanalyze.java.infer.Specialization$C*=n$6 [line 404];
      NULLIFY(&$irvar0); [line 404];
      EXIT_SCOPE(n$6,$irvar0); [line 404];
      APPLY_ABSTRACTION; [line 404];
      
    process analysis
#n2:
      
    
    Specialization.callBuildCOnBoxGood1 disjuncts:
                                      #0: (conditions: (empty)
                                           phi: linear_eqs: v13 = 0
                                                && term_eqs: 0=v13
                                                && intervals: v13=null
                                           { roots={ &box=v2, &this=v1, &return=v15 };
                                             mem  ={ v1 -> { * -> v3 },
                                                     v2 -> { * -> v4 },
                                                     v3 -> { * -> v11 },
                                                     v4 -> { f1 -> v5 },
                                                     v5 -> { * -> v6 },
                                                     v6 -> { f2 -> v7 },
                                                     v7 -> { * -> v8 },
                                                     v8 -> { f3 -> v9 },
                                                     v9 -> { * -> v10 },
                                                     v10 -> { * -> v12 },
                                                     v14 -> { * -> v13 },
                                                     v15 -> { * -> v13 } };
                                             attrs={ v1 -> { MustBeValid(, None, t=0) },
                                                     v2 -> { MustBeValid(, None, t=0) },
                                                     v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                             MustBeValid(, None, t=0) },
                                                     v4 -> { MustBeValid(, None, t=2),
                                                             StaticType class codetoanalyze.java.infer.Specialization$Box1 },
                                                     v5 -> { MustBeValid(, None, t=2) },
                                                     v6 -> { MustBeValid(, None, t=3) },
                                                     v7 -> { MustBeValid(, None, t=3) },
                                                     v8 -> { MustBeValid(, None, t=4) },
                                                     v9 -> { MustBeValid(, None, t=4) },
                                                     v10 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                              MustBeValid(, None, t=5) },
                                                     v13 -> { Invalid ConstantDereference(is assigned to the null pointer) },
                                                     v14 -> { MustBeValid(, None, t=7),
                                                              WrittenTo (7, ) },
                                                     v15 -> { MustBeValid(, None, t=11),
                                                              WrittenTo (11, ) } };}
                                           PRE=[{ roots={ &box=v2, &this=v1 };
                                                  mem  ={ v1 -> { * -> v3 },
                                                          v2 -> { * -> v4 },
                                                          v3 -> { * -> v11 },
                                                          v4 -> { f1 -> v5 },
                                                          v5 -> { * -> v6 },
                                                          v6 -> { f2 -> v7 },
                                                          v7 -> { * -> v8 },
                                                          v8 -> { f3 -> v9 },
                                                          v9 -> { * -> v10 },
                                                          v10 -> { * -> v12 },
                                                          v11 -> { },
                                                          v12 -> { } };
                                                  attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v2 -> { MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v3 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None],
                                                                  MustBeInitialized(, t=0),
                                                                  MustBeValid(, None, t=0) },
                                                          v4 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2),
                                                                  StaticType class codetoanalyze.java.infer.Specialization$Box1 },
                                                          v5 -> { MustBeInitialized(, t=2),
                                                                  MustBeValid(, None, t=2) },
                                                          v6 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v7 -> { MustBeInitialized(, t=3),
                                                                  MustBeValid(, None, t=3) },
                                                          v8 -> { MustBeInitialized(, t=4),
                                                                  MustBeValid(, None, t=4) },
                                                          v9 -> { MustBeInitialized(, t=4),
                                                                  MustBeValid(, None, t=4) },
                                                          v10 -> { DynamicType codetoanalyze.java.infer.Specialization$A_Bad, SourceFile [None],
                                                                   MustBeInitialized(, t=5),
                                                                   MustBeValid(, None, t=5) } };}]
                                           need_closure_specialization=false
                                           need_dynamic_type_specialization=
                                           { }
                                           skipped_calls={ }
                                           Topl={len=0;content=
                                                  [  ]},
                                          conditions= [] timestamp= 16)
                                      
                                      Non-disj state:
                                        copy map: { }, parameter map: { }, 
                                        destructor checked: { }, captured: { }, 
                                        locked: false,
                                        loads: ({ n$0 -> { box }, n$6 -> { $irvar0 } },
                                        { box -> { line 404 -> { 1 } },
                                          $irvar0 -> { line 404 -> { 10 } } }),process analysis end
process analysis

                                        passed to: { }Specialization.buildCOnBoxAndDerefBad
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &this=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ v2 -> { DynamicType codetoanalyze.java.infer.Specialization, SourceFile [None] } };}
                   PRE=[{ roots={ &this=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                                   Specialization$A_Bad.<init>() -> call to skipped function occurs here }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 38)
process analysis end

Non-disj state: ⊤{ proc_name= void DynamicDispatch$WithField.dispatchOnFieldBad()
                   ; translation_unit= DynamicDispatch.java
                   ; formals= []
                   ; is_defined= true
                   ; loc= DynamicDispatch.java:251
                   ; locals= [{ name= $irvar1; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= $irvar0; typ= void; modify_in_block= false; is_declared_unused= false }; 
                              { name= object; typ= codetoanalyze.java.infer.DynamicDispatch$WithField*; modify_in_block= false; is_declared_unused= false }; 
                              { name= subtype; typ= codetoanalyze.java.infer.DynamicDispatch$Supertype*; modify_in_block= false; is_declared_unused= false }]
                   ; ret_type= void 
                   ; proc_id= codetoanalyze.java.infer.DynamicDispatch$WithField.dispatchOnFieldBad():void }
    #n1:
      
    #n4:
      n$0=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$Subtype):codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 252];
      n$1=_fun_DynamicDispatch$Subtype.<init>()(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 252];
      *&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype*=n$0 [line 252];
      EXIT_SCOPE(n$0,n$1); [line 252];
      
    #n5:
      n$2=_fun___new(sizeof(t=codetoanalyze.java.infer.DynamicDispatch$WithField):codetoanalyze.java.infer.DynamicDispatch$WithField*) [line 253];
      n$3=*&subtype:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 253];
      n$4=_fun_DynamicDispatch$WithField.<init>(DynamicDispatch$Supertype)(n$2:codetoanalyze.java.infer.DynamicDispatch$WithField*,n$3:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 253];
      *&object:codetoanalyze.java.infer.DynamicDispatch$WithField*=n$2 [line 253];
      NULLIFY(&subtype); [line 253];
      EXIT_SCOPE(n$2,n$3,n$4,subtype); [line 253];
      
    #n6:
      n$5=*&object:codetoanalyze.java.infer.DynamicDispatch$WithField* [line 254];
      n$6=*n$5.mField:codetoanalyze.java.infer.DynamicDispatch$Supertype* [line 254];
      _=*n$6:codetoanalyze.java.infer.DynamicDispatch$Supertype [line 254];
      n$8=_fun_Object DynamicDispatch$Supertype.foo()(n$6:codetoanalyze.java.infer.DynamicDispatch$Supertype*) virtual [line 254];
      *&$irvar0:java.lang.Object*=n$8 [line 254];
      NULLIFY(&object); [line 254];
      EXIT_SCOPE(_,n$5,n$6,n$8,object); [line 254];
      
    #n7:
      n$9=*&$irvar0:java.lang.Object* [line 254];
      _=*n$9:java.lang.Object [line 254];
      n$11=_fun_String Object.toString()(n$9:java.lang.Object*) virtual [line 254];
      *&$irvar1:java.lang.String*=n$11 [line 254];
      NULLIFY(&$irvar1); [line 254];
      NULLIFY(&$irvar0); [line 254];
      EXIT_SCOPE(_,n$9,n$11,$irvar1,$irvar0); [line 254];
      
    #n8:
      APPLY_ABSTRACTION; [line 255];
      
    process analysis
#n2:
      
    
    DynamicDispatch$WithField.dispatchOnFieldBad1 disjuncts:
                                                #0: ({AbortProgram conditions: (empty) phi: (empty)
                                                                   { roots=
                                                                    { };
                                                                    mem  =
                                                                    { };
                                                                    attrs=
                                                                    { };}
                                                                   PRE=[{
                                                                    roots=
                                                                    { };
                                                                    mem  =
                                                                    { };
                                                                    attrs=
                                                                    { };}]
                                                                   need_closure_specialization=false
                                                                   need_dynamic_type_specialization=
                                                                   { }
                                                                   skipped_calls=
                                                                   { DynamicDispatch$Subtype.<init>() -> call to skipped function occurs here,
                                                                    Object.<init>() -> call to skipped function occurs here }
                                                                   Topl=
                                                                   {len=0;content=
                                                                    [  ]}},
                                                    conditions= [] timestamp= 27)
                                                process analysis end

                                                Non-disj state: ⊤{ proc_name= void DynamicDispatch.dynamicDispatchShouldReportWhenCalledWithSubtypeParameterBad_FN(DynamicDispatch$Subtype)
                                                                   ; translation_unit= DynamicDispatch.java
                                                                   ; formals= [
                                                                   (o,
                                                                   codetoanalyze.java.infer.DynamicDispatch$Subtype*)]
                                                                   ; is_defined= true
                                                                   ; loc= DynamicDispatch.java:199
                                                                   ; locals= [
                                                                   ]
                                                                   ; ret_type= void 
                                                                   ; proc_id= codetoanalyze.java.infer.DynamicDispatch.dynamicDispatchShouldReportWhenCalledWithSubtypeParameterBad_FN(codetoanalyze.java.infer.DynamicDispatch$Subtype):void }
    #n1:
      
    #n4:
      n$0=*&o:codetoanalyze.java.infer.DynamicDispatch$Subtype* [line 202];
      n$1=_fun_void DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(DynamicDispatch$Supertype)(n$0:codetoanalyze.java.infer.DynamicDispatch$Subtype*) [line 202];
      NULLIFY(&o); [line 202];
      EXIT_SCOPE(n$0,n$1,o); [line 202];
      
    #n5:
      APPLY_ABSTRACTION; [line 203];
      
    process analysis
#n2:
      
    
    DynamicDispatch.dynamicDispatchShouldReportWhenCalledWithSubtypeParameterBad_FN
1 disjuncts:
#0: ({AbortProgram conditions: (empty) phi: (empty)
                   { roots={ &o=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                     attrs={ v2 -> { DynamicType codetoanalyze.java.infer.DynamicDispatch$Subtype, SourceFile [None],
                                     StaticType class codetoanalyze.java.infer.DynamicDispatch$Subtype } };}
                   PRE=[{ roots={ &o=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { * -> v3 } };
                          attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                                  v2 -> { MustBeInitialized(, t=2), MustBeValid(, None, t=2) } };}]
                   need_closure_specialization=false
                   need_dynamic_type_specialization={ }
                   skipped_calls={ }
                   Topl={len=0;content=
                          [  ]}},
    conditions= [] timestamp= 7)
process analysis end

Non-disj state: ⊤
DynamicDispatch.java:148: error: Null Dereference
  `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch$Impl.foo()` on line 148) and is dereferenced. 
  146.        Interface i = new Impl();
  147.        // should be a warning since Impl's implementation of foo returns null
  148. >      i.foo().toString();
  149.      }
  150.    

DynamicDispatch.java:152: error: Null Dereference
  `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch$Impl.foo()` on line 152) and is dereferenced. 
  150.    
  151.      static void FN_interfaceShouldNotCauseFalseNegativeHardOK(Interface i) {
  152. >      i.foo().toString();
  153.      }
  154.    

DynamicDispatch.java:184: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 184) and is dereferenced. 
  182.        Supertype o = new Subtype();
  183.        // should report a warning because we know the dynamic type of o is Subtype
  184. >      o.foo().toString();
  185.      }
  186.    

DynamicDispatch.java:202: error: Null Dereference
  The call to `void DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(DynamicDispatch$Supertype)` may trigger the following issue: `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(...)` on line 196) and is dereferenced in the call to `DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(...)`. 
  200.        // should report a warning because the Subtype implementation
  201.        // of foo() returns null
  202. >      dynamicDispatchShouldNotReportWhenCallingSupertypeOK(o);
  203.      }
  204.    

DynamicDispatch.java:222: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperBar(...)` on line 222) and is dereferenced. 
  220.        // Should report because Supertype.bar() returns null
  221.        Supertype o = new Supertype();
  222. >      dynamicDispatchWrapperBar(o).toString();
  223.      }
  224.    


Found 17 issues (console output truncated to 5, see '/Users/liwenhua/Downloads/infer/bh/7/infer-out/report.txt' for the full list)
             Issue Type(ISSUED_TYPE_ID): #
  Null Dereference(NULLPTR_DEREFERENCE): 17
