#0
ebean-core/src/main/java/io/ebeaninternal/api/NaturalKeySet.java:27: error: Null Dereference
  null (null value originating from line 27) is dereferenced. 
  25.   
  26.     Object inValue(Object naturalKey) {
  27. >     return map.get(naturalKey).inValue();
  28.     }
  29.   }

#1
ebean-core/src/main/java/io/ebeaninternal/server/core/DScriptRunner.java:95: error: Null Dereference
  The call to `void DScriptRunner.runScript(String,String,Map,boolean)` may trigger the following issue: null (from the call to `DScriptRunner.runScript(...)` on line 95) is dereferenced in the call to `DScriptRunner.runScript(...)`. 
  93.     @Override
  94.     public void runScript(String name, String content, boolean useAutoCommit) {
  95. >     runScript(content, name, null, useAutoCommit);
  96.     }
  97.   

#2
ebean-core/src/main/java/io/ebeaninternal/server/core/DefaultServer.java:541: error: Null Dereference
  `BeanDescriptor DefaultServer.descriptor(Class)` could be null (from the call to `DefaultServer.descriptor(...)` on line 541) and is dereferenced. 
  539.       List<String> tableNames = new ArrayList<>();
  540.       for (Class<?> type : types) {
  541. >       tableNames.add(descriptor(type).baseTable());
  542.       }
  543.       truncate(tableNames.toArray(new String[0]));

#3
ebean-core/src/main/java/io/ebeaninternal/server/core/DefaultServer.java:611: error: Null Dereference
  `desc` could be null (from the call to `DefaultServer.descriptor(...)` on line 610) and is dereferenced. 
  609.       Objects.requireNonNull(id);
  610.       BeanDescriptor desc = descriptor(type);
  611. >     id = desc.convertId(id);
  612.       PersistenceContext pc = null;
  613.       SpiTransaction t = transactionManager.active();

#4
ebean-core/src/main/java/io/ebeaninternal/server/core/DefaultServer.java:769: error: Null Dereference
  `BeanDescriptor DefaultServer.descriptor(Class)` could be null (from the call to `DefaultServer.descriptor(...)` on line 769) and is dereferenced. 
  767.     @Override
  768.     public Object nextId(Class<?> beanType) {
  769. >     return descriptor(beanType).nextId(null);
  770.     }
  771.   

#5
ebean-core/src/main/java/io/ebeaninternal/server/core/DefaultServer.java:2202: error: Null Dereference
  `beanDesc` could be null (from the call to `DefaultServer.descriptor(...)` on line 2201) and is dereferenced. 
  2200.       EntityBean entityBean = checkEntityBean(bean);
  2201.       BeanDescriptor<?> beanDesc = descriptor(entityBean.getClass());
  2202. >     BeanProperty idProperty = beanDesc.idProperty();
  2203.       // if the ID of the Property is null we are unable to check uniqueness
  2204.       if (idProperty == null) {

#6
ebean-core/src/main/java/io/ebeaninternal/server/deploy/BeanDescriptorManager.java:715: error: Null Dereference
  `rootBeanInfo` could be null (null value originating from line 714) and is dereferenced. 
  713.         if (inheritInfo != null && !inheritInfo.isRoot()) {
  714.           DeployBeanInfo<?> rootBeanInfo = deployInfoMap.get(inheritInfo.getRoot().getType());
  715. >         PlatformIdGenerator rootIdGen = rootBeanInfo.getDescriptor().getIdGenerator();
  716.           if (rootIdGen != null) {
  717.             descriptor.setIdGenerator(rootIdGen);

#7
ebean-core/src/main/java/io/ebeaninternal/server/deploy/meta/DeployBeanPropertyAssoc.java:53: error: Null Dereference
  `DeployBeanInfo DeployBeanDescriptor.getDeploy(Class)` could be null (from the call to `DeployBeanDescriptor.getDeploy(...)` on line 53) and is dereferenced. 
  51.      */
  52.     public DeployBeanDescriptor<?> getTargetDeploy() {
  53. >     return desc.getDeploy(targetType).getDescriptor();
  54.     }
  55.   

#8
ebean-core/src/main/java/io/ebeaninternal/server/deploy/parse/DeployInherit.java:58: error: Null Dereference
  `parent` could be null (from the call to `DeployInherit.getInfo(...)` on line 57) and is dereferenced. 
  56.         if (!info.isRoot()) {
  57.           DeployInheritInfo parent = getInfo(info.getParent());
  58. >         parent.addChild(info);
  59.         }
  60.       }

#9
ebean-core/src/main/java/io/ebeaninternal/server/persist/DefaultPersister.java:643: error: Null Dereference
  `descriptor` could be null (from the call to `BeanDescriptorManager.descriptor(...)` on line 642) and is dereferenced. 
  641.     public int delete(Class<?> beanType, Object id, Transaction transaction, boolean permanent) {
  642.       BeanDescriptor<?> descriptor = beanDescriptorManager.descriptor(beanType);
  643. >     if (descriptor.isMultiTenant()) {
  644.         // convert to a delete by bean
  645.         EntityBean bean = descriptor.createEntityBean();

#10
ebean-core/src/main/java/io/ebeaninternal/server/querydefn/OrmUpdateProperties.java:182: error: Null Dereference
  `String DeployParser.parse(String)` could be null (from the call to `DeployParser.parse(...)` on line 182) and is dereferenced in the call to `OrmUpdateProperties.trim(...)`. 
  180.         }
  181.         // translate to db columns and remove table alias placeholders
  182. >       sb.append(trim(deployParser.parse(property)));
  183.         sb.append(entry.getValue().bindClause());
  184.       }

#11
ebean-core/src/main/java/io/ebeaninternal/server/type/DefaultTypeManager.java:632: error: Null Dereference
  The call to `Class[] TypeReflectHelper.getParams(Class,Class)` in turn calls `Class[] TypeResolver.resolveRawArgs(Class,Class)` and may trigger the following issue: null (from the call to `TypeReflectHelper.getParams(...)` on line 40) is dereferenced in the call to `TypeReflectHelper.getParams(...)`. 
  630.       for (Class<? extends ScalarTypeConverter<?, ?>> foundType : bootupClasses.getScalarConverters()) {
  631.         try {
  632. >         Class<?>[] paramTypes = TypeReflectHelper.getParams(foundType, ScalarTypeConverter.class);
  633.           if (paramTypes.length != 2) {
  634.             throw new IllegalStateException("Expected 2 generics paramtypes but got: " + Arrays.toString(paramTypes));

#12
ebean-core/src/main/java/io/ebeaninternal/server/type/DefaultTypeManager.java:633: error: Null Dereference
  `paramTypes` could be null (from the call to `TypeReflectHelper.getParams(...)` on line 632) and is dereferenced. 
  631.         try {
  632.           Class<?>[] paramTypes = TypeReflectHelper.getParams(foundType, ScalarTypeConverter.class);
  633. >         if (paramTypes.length != 2) {
  634.             throw new IllegalStateException("Expected 2 generics paramtypes but got: " + Arrays.toString(paramTypes));
  635.           }

#13
ebean-core/src/main/java/io/ebeaninternal/server/type/DefaultTypeManager.java:656: error: Null Dereference
  The call to `Class[] TypeReflectHelper.getParams(Class,Class)` in turn calls `Class[] TypeResolver.resolveRawArgs(Class,Class)` and may trigger the following issue: null (from the call to `TypeReflectHelper.getParams(...)` on line 40) is dereferenced in the call to `TypeReflectHelper.getParams(...)`. 
  654.       for (Class<? extends AttributeConverter<?, ?>> foundType : bootupClasses.getAttributeConverters()) {
  655.         try {
  656. >         Class<?>[] paramTypes = TypeReflectHelper.getParams(foundType, AttributeConverter.class);
  657.           if (paramTypes.length != 2) {
  658.             throw new IllegalStateException("Expected 2 generics paramtypes but got: " + Arrays.toString(paramTypes));

#14
ebean-core/src/main/java/io/ebeaninternal/server/type/DefaultTypeManager.java:657: error: Null Dereference
  `paramTypes` could be null (from the call to `TypeReflectHelper.getParams(...)` on line 656) and is dereferenced. 
  655.         try {
  656.           Class<?>[] paramTypes = TypeReflectHelper.getParams(foundType, AttributeConverter.class);
  657. >         if (paramTypes.length != 2) {
  658.             throw new IllegalStateException("Expected 2 generics paramtypes but got: " + Arrays.toString(paramTypes));
  659.           }

#15
ebean-core/src/main/java/io/ebeaninternal/server/type/ScalarTypeFile.java:71: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream(), indirectly via call to `ScalarTypeFile.getOutputStream(...)` on line 70 is not closed after the last access at line 71. 
  69.         File tempFile = File.createTempFile(prefix, suffix, directory);
  70.         OutputStream os = getOutputStream(tempFile);
  71. >       pump(is, os);
  72.         return tempFile;
  73.       } catch (IOException e) {

#16
ebean-core/src/main/java/io/ebeaninternal/server/type/ScalarTypeFile.java:74: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream(), indirectly via call to `ScalarTypeFile.getOutputStream(...)` on line 70 is not closed after the last access at line 74. 
  72.         return tempFile;
  73.       } catch (IOException e) {
  74. >       throw new SQLException("Error reading db file inputStream", e);
  75.       }
  76.     }

#17
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/DefaultDbMigration.java:363: error: Null Dereference
  The call to `void DatabasePlatform.configure(PlatformConfig)` ends up calling `void DbPlatformTypeMapping.config(boolean,PlatformConfig$DbUuid)` (after 1 more call) and may trigger the following issue: `config->dbUuid->binary` could be null (from the call to `DatabasePlatform.configure(...)` on line 212) and is dereferenced in the call to `DatabasePlatform.configure(...)`. 
  361.       for (Pair pair : platforms) {
  362.         PlatformConfig config = databaseBuilder.newPlatformConfig("dbmigration.platform", pair.prefix);
  363. >       pair.platform.configure(config);
  364.       }
  365.     }

#18
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/DefaultDbMigration.java:363: error: Null Dereference
  The call to `void DatabasePlatform.configure(PlatformConfig)` ends up calling `void DbPlatformTypeMapping.config(boolean,PlatformConfig$DbUuid)` (after 1 more call) and may trigger the following issue: `config->dbUuid->nativeType` could be null (from the call to `DatabasePlatform.configure(...)` on line 210) and is dereferenced in the call to `DatabasePlatform.configure(...)`. 
  361.       for (Pair pair : platforms) {
  362.         PlatformConfig config = databaseBuilder.newPlatformConfig("dbmigration.platform", pair.prefix);
  363. >       pair.platform.configure(config);
  364.       }
  365.     }

#19
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/DefaultDbMigration.java:363: error: Null Dereference
  The call to `void DatabasePlatform.configure(PlatformConfig)` ends up calling `void DbPlatformTypeMapping.config(boolean,PlatformConfig$DbUuid)` (after 1 more call) and may trigger the following issue: `pair->platform->nativeUuidType` could be null (from the call to `DatabasePlatform.configure(...)` on line 210) and is dereferenced in the call to `DatabasePlatform.configure(...)`. 
  361.       for (Pair pair : platforms) {
  362.         PlatformConfig config = databaseBuilder.newPlatformConfig("dbmigration.platform", pair.prefix);
  363. >       pair.platform.configure(config);
  364.       }
  365.     }

#20
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/DefaultDbMigration.java:363: error: Null Dereference
  The call to `void DatabasePlatform.configure(PlatformConfig)` ends up calling `void DbPlatformTypeMapping.config(boolean,PlatformConfig$DbUuid)` (after 1 more call) and may trigger the following issue: `pair->platform->nativeUuidType` could be null (from the call to `DatabasePlatform.configure(...)` on line 212) and is dereferenced in the call to `DatabasePlatform.configure(...)`. 
  361.       for (Pair pair : platforms) {
  362.         PlatformConfig config = databaseBuilder.newPlatformConfig("dbmigration.platform", pair.prefix);
  363. >       pair.platform.configure(config);
  364.       }
  365.     }

#21
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/ddlgeneration/platform/Db2HistoryDdl.java:99: error: Null Dereference
  `table` could be null (from the call to `DdlWrite.getTable(...)` on line 98) and is dereferenced. 
   97.       DdlAlterTable alter = platformDdl.alterTable(writer, tableName);
   98.       MTable table = writer.getTable(tableName);
   99. >     if (table.isWithHistory() && !alter.isHistoryHandled()) {
  100.         disableSystemVersioning(writer.apply(), tableName);
  101.         enableSystemVersioning(writer.applyPostAlter(), tableName);

#22
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/ddlgeneration/platform/HanaHistoryDdl.java:96: error: Null Dereference
  `table` could be null (from the call to `DdlWrite.getTable(...)` on line 95) and is dereferenced. 
  94.       DdlAlterTable alter = platformDdl.alterTable(writer, tableName);
  95.       MTable table = writer.getTable(tableName);
  96. >     if (table.isWithHistory() && !alter.isHistoryHandled()) {
  97.         disableSystemVersioning(writer.apply(), tableName);
  98.         enableSystemVersioning(writer.applyPostAlter(), tableName, false);

#23
ebean-ddl-generator/src/main/java/io/ebeaninternal/dbmigration/model/MTable.java:698: error: Null Dereference
  `refBaseTable` could be null (from the call to `ModelContainer.getTable(...)` on line 697) and is dereferenced. 
  696.           String baseTable = extractBaseTable(references);
  697.           MTable refBaseTable = modelContainer.getTable(baseTable);
  698. >         if (refBaseTable.draftTable != null) {
  699.             // change references to another associated 'draft' table
  700.             String newReferences = deriveReferences(references, refBaseTable.draftTable.getName());

Found 24 issues
                Issue Type(ISSUED_TYPE_ID): #
     Null Dereference(NULLPTR_DEREFERENCE): 22
  Pulse Resource Leak(PULSE_RESOURCE_LEAK): 2
