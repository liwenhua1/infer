Print instruction
    pulse.ml -> 1291-1292
    (* let nodes = Procdesc.get_nodes proc_desc in 
    unitf_on_list nodes (fun x -> Instrs.pp Pp.text F.std_formatter (Procdesc.Node.get_instrs x)); *)

Print proc_name and class_name
    pulse.ml -> 1293
     (* let () = Procname.process_java_name_iter [proc_name] in *)

Methodmatcher
    pattern matcher for Java/C++ methods NB matching is modulo template arguments in C++ classes and
    functions

print pre-post
    pulse.ml -> 1337
       (* PulseSummary.pp_pre_post_list F.std_formatter ~pp_kind:(fun _fmt -> ()) summary ;)

print process_set
        JFrontend -> 217 -219
          (* let plist = Cfg.get_all_defined_proc_names x in 
  Utils.unitf_on_list plist (fun z -> Procname.pp_verbose Format.std_formatter z); 
  Cfg.pp_proc_signatures Format.std_formatter x; *)

print pre?
    AbstractInterpreter.ml -> 553-559 

important instruction process 
    AbstractInterpreter.ml 496 549

print raw_post_pre
    pulse.ml -> 1309
    (* let res = match exit_summaries_opt with 
    | None  -> ()
    | Some a -> DisjunctiveAnalyzer.TransferFunctions.Domain.pp F.std_formatter a in
    res; *)

print class_tree
    pulse.ml -> 1288
    (* Tenv.pp F.std_formatter tenv; print_endline "=========================="; *)

print instraction
    AbstractInterpreter.ml 499
     (* Instrs.pp Pp.text F.std_formatter instrs; *)
     Jmain 32-33
       (* Cfg.pp_proc_signatures Format.std_formatter cfg; *)
  (* let () =  Cfg.iter_sorted cfg ~f:(fun x-> Procdesc.pp_with_instrs Format.std_formatter x) in *)