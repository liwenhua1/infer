Print instruction
    pulse.ml -> 1291-1292
    (* let nodes = Procdesc.get_nodes proc_desc in 
    unitf_on_list nodes (fun x -> Instrs.pp Pp.text F.std_formatter (Procdesc.Node.get_instrs x)); *)

Print proc_name and class_name
    pulse.ml -> 1293
     (* let () = Procname.process_java_name_iter [proc_name] in *)

Methodmatcher
    pattern matcher for Java/C++ methods NB matching is modulo template arguments in C++ classes and
    functions

print pre-post
    pulse.ml -> 1337
       (* PulseSummary.pp_pre_post_list F.std_formatter ~pp_kind:(fun _fmt -> ()) summary ;)

print process_set
        JFrontend -> 217 -219
          (* let plist = Cfg.get_all_defined_proc_names x in 
  Utils.unitf_on_list plist (fun z -> Procname.pp_verbose Format.std_formatter z); 
  Cfg.pp_proc_signatures Format.std_formatter x; *)

print pre?
    AbstractInterpreter.ml -> 553-559 

important instruction process 
    AbstractInterpreter.ml 496 549

print raw_post_pre
    pulse.ml -> 1309
    (* let res = match exit_summaries_opt with 
    | None  -> ()
    | Some a -> DisjunctiveAnalyzer.TransferFunctions.Domain.pp F.std_formatter a in
    res; *)

print class_tree
    pulse.ml -> 1288
    (* Tenv.pp F.std_formatter tenv; print_endline "=========================="; *)

print instraction
    AbstractInterpreter.ml 499
     (* Instrs.pp Pp.text F.std_formatter instrs; *)
     Jmain 32-33
       (* Cfg.pp_proc_signatures Format.std_formatter cfg; *)
  (* let () =  Cfg.iter_sorted cfg ~f:(fun x-> Procdesc.pp_with_instrs Format.std_formatter x) in *)

Raised at Pulselib__PulseModelsJava.java_cast.(fun) in file "src/pulse/PulseModelsJava.ml", line 122, characters 15-45
Called from Pulselib__Pulse.PulseTransferFunctions.dispatch_call_eval_args in file "src/pulse/Pulse.ml", line 605, characters 12-218
Called from Pulselib__PulseResult.map in file "src/pulse/PulseResult.ml", line 37, characters 9-15
Called from Pulselib__PulseSatUnsat.map in file "src/pulse/PulseSatUnsat.ml", line 23, characters 51-56
Called from Pulselib__Pulse.PulseTransferFunctions.exec_instr_aux.(fun) in file "src/pulse/Pulse.ml", line 1133, characters 20-723
Called from Base__List.concat_map.aux in file "src/list.ml", line 709, characters 34-40
Called from Pulselib__Pulse.PulseTransferFunctions.exec_instr_aux in file "src/pulse/Pulse.ml", line 1131, characters 14-948
Called from Pulselib__Pulse.PulseTransferFunctions.exec_instr in file "src/pulse/Pulse.ml", line 1235, characters 6-70
Called from Absint__AbstractInterpreter.MakeDisjunctiveTransferFunctions.exec_instr.(fun) in file "src/absint/AbstractInterpreter.ml", line 346, characters 18-80
Called from CamlinternalFormat.fn_of_padding_precision in file "camlinternalFormat.ml", line 1865, characters 14-36
Called from Base__List.foldi.(fun) in file "src/list.ml", line 619, characters 59-68
Called from Stdlib__List.fold_left in file "list.ml", line 121, characters 24-34
Called from Base__List0.fold in file "src/list0.ml" (inlined), line 21, characters 22-52
Called from Base__List.foldi in file "src/list.ml", line 619, characters 6-70
Called from Absint__AbstractInterpreter.MakeDisjunctiveTransferFunctions.exec_instr in file "src/absint/AbstractInterpreter.ml", line 335, characters 6-1023
Called from Absint__AbstractInterpreter.AbstractInterpreterCommon.exec_node_instrs.exec_instr.(fun) in file "src/absint/AbstractInterpreter.ml", line 516, characters 25-82
Re-raised at Absint__AbstractInterpreter.AbstractInterpreterCommon.exec_node_instrs.exec_instr in file "src/absint/AbstractInterpreter.ml", line 542, characters 10-58
Called from Base__Array.foldi in file "src/array.ml", line 378, characters 11-36
Called from Absint__AbstractInterpreter.MakeDisjunctiveTransferFunctions.exec_node_instrs.(fun) in file "src/absint/AbstractInterpreter.ml", line 386, characters 14-84
Called from Base__List.foldi.(fun) in file "src/list.ml", line 619, characters 59-68
Called from Stdlib__List.fold_left in file "list.ml", line 121, characters 24-34
Called from Base__List0.fold in file "src/list0.ml" (inlined), line 21, characters 22-52
Called from Base__List.foldi in file "src/list.ml", line 619, characters 6-70
Called from Absint__AbstractInterpreter.MakeDisjunctiveTransferFunctions.exec_node_instrs in file "src/absint/AbstractInterpreter.ml", line 376, characters 6-1023
Called from Absint__AbstractInterpreter.AbstractInterpreterCommon.exec_node.update_inv_map in file "src/absint/AbstractInterpreter.ml" (inlined), line 558, characters 32-99
Called from Absint__AbstractInterpreter.AbstractInterpreterCommon.exec_node in file "src/absint/AbstractInterpreter.ml", line 599, characters 9-47
Called from Absint__AbstractInterpreter.MakeWTONode.exec_wto_partition in file "src/absint/AbstractInterpreter.ml", line 795, characters 10-129
Called from Absint__AbstractInterpreter.AbstractInterpreterCommon.make_compute_post_including_exceptional in file "src/absint/AbstractInterpreter.ml", line 665, characters 18-86
Called from Pulselib__Pulse.analyze in file "src/pulse/Pulse.ml", line 1359, characters 6-93
Called from Pulselib__Pulse.checker in file "src/pulse/Pulse.ml", line 1447, characters 31-57

{ v3 -> v4, v4 -> v7, v5 -> v5 }
conditions: (empty) phi: linear_eqs: v7 = a1 +1
                                            && term_eqs: Object.<init>()([v7])=v9∧[a1 +1]=v7
                                            && intervals: v7≥1


conditions:  {[v11] = 0}
                                                                phi: 
                                                                linear_eqs: 
                                                                v11 = 0 ∧ v13 = 4
                                                                && term_eqs: 
                                                                0=v11
                                                                ∧4=v13
                                                                ∧((v4 instanceof Subtype))=v11
                                                                && intervals: 
                                                                v11=0 ∧ v13=4
                                                                && atoms: 
                                                                {(v4 instanceof Subtype) = 0}
{ v3 -> v4, v4 -> v7, v5 -> v5 }
conditions: (empty)
phi: linear_eqs: v7 = a1 +1 && term_eqs: Object.<init>()([v7])=v9∧[a1 +1]=v7 && intervals: v7≥1
conditions: {[v7] ≠ 0}
phi: linear_eqs: v8 = 0
     && term_eqs: 0=v8∧((v4 instanceof Subtype))=v7
     && intervals: v7≠0 ∧ v8=null
     && atoms: {[v7] ≠ 0}

Supertype.tt
1 disjuncts:
#0: (conditions: {[v10] = 0}
     phi: linear_eqs: v7 = a1 +1 ∧ v10 = 0 ∧ v12 = 4
          && term_eqs: 0=v10∧4=v12∧Object.<init>()([v7])=v9∧String String.toString()([v11])=v16
                       ∧[a1 +1]=v7∧((v7 instanceof Subtype))=v10
          && intervals: v7≥1 ∧ v10=0 ∧ v12=4
          && atoms: {(v7 instanceof Subtype) = 0}
     { roots={ &this=v1 };
       mem  ={ v1 -> { * -> v4 },
               v2 -> { * -> v11 },
               v3 -> { * -> v7 },
               v4 -> { * -> v5 },
               v7 -> { * -> v8 },
               v11 -> { * -> v15, __infer_model_string_length -> v12 },
               v17 -> { * -> v16 } };
       attrs={ v1 -> { MustBeValid(, None, t=0) },
               v2 -> { s&b (variable `b` declared here at line 45 :t0 ) at line 48,
                       MustBeValid(, None, t=9),
                       WrittenTo (9, ) },
               v3 -> { s&a (variable `a` declared here at line 45 :t0 ) at line 47,
                       MustBeValid(, None, t=3),
                       WrittenTo (3, ) },
               v4 -> { DynamicType Supertype, SourceFile [None], MustBeValid(, None, t=0) },
               v7 -> { DynamicType Object2, SourceFile [None],
                       MustBeValid(, None, t=2),
                       StaticType class java.lang.Object,
                       UnknownEffect(function `Object.<init>()` with no summary,
                                     in call to `Object2.<init>()` at line 46 :t2
                                     [in call to function `Object.<init>()` with no summary at line 1 :t2
                                      [] ]
                                     ) },
               v11 -> { ConstString (null),
                        MustBeValid(, None, t=14),
                        UnknownEffect(function `String String.toString()` with no summary,
                                      in call to function `String String.toString()` with no summary at line 48 :t15
                                      [] ) },
               v16 -> { PropagateTaintFrom([{v= v11}]), ReturnedFromUnknown([v11]) },
               v17 -> { MustBeValid(, None, t=16), WrittenTo (16, ) } };}
     PRE=[{ roots={ &this=v1 };
            mem  ={ v1 -> { * -> v4 }, v4 -> { * -> v5 }, v5 -> { } };
            attrs={ v1 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) },
                    v4 -> { MustBeInitialized(, t=0), MustBeValid(, None, t=0) } };}]
     need_closure_specialization=false
     need_dynamic_type_specialization={ v11 }
     skipped_calls={ Object.<init>() -> call to skipped function occurs here,
                     String String.toString() -> call to skipped function occurs here }
     Topl={len=0;content=
            [  ]},
    conditions= [] timestamp= 22)

Non-disj state:
  copy map: { }, parameter map: { }, destructor checked: { }, captured: { }, 
  locked: false,
  loads: ({ n$2 -> { this }, n$4 -> { a }, n$6 -> { b } },
  { b -> { line 48 -> { 13 } }, a -> { line 47 -> { 7 } }, this -> { line 47 -> { 5 } } }),
  passed to: { b -> { String String.toString() -> { line 48 -> { 15 } } },
               a -> { String Supertype.foo(Object) -> { line 47 -> { 8 } } },
               this -> { String Supertype.foo(Object) -> { line 47 -> { 8 } } } }process analysis end

!#0
DynamicDispatch.java:26: error: Null Dereference
  `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch$Impl.foo()` on line 26) and is dereferenced. 
  24.       Interface i = new Impl();
  25.       // should be a warning since Impl's implementation of foo returns null
  26. >     i.foo().toString();
  27.     }
  28.   

v?#1
DynamicDispatch.java:34: error: Null Dereference
  The call to `void DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(DynamicDispatch$Interface)` may trigger the following issue: `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(...)` on line 30) and is dereferenced in the call to `DynamicDispatch.FN_interfaceShouldNotCauseFalseNegativeHardOK(...)`. 
  32.   
  33.     static void callWithBadImplementationBad_FN(Impl impl) {
  34. >     FN_interfaceShouldNotCauseFalseNegativeHardOK(impl);
  35.     }
  36.   

!#2
DynamicDispatch.java:62: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 62) and is dereferenced. 
  60.       Supertype o = new Subtype();
  61.       // should report a warning because we know the dynamic type of o is Subtype
  62. >     o.foo().toString();
  63.     }
  64.   

v?#3
DynamicDispatch.java:80: error: Null Dereference
  The call to `void DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(DynamicDispatch$Supertype)` may trigger the following issue: `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(...)` on line 74) and is dereferenced in the call to `DynamicDispatch.dynamicDispatchShouldNotReportWhenCallingSupertypeOK(...)`. 
  78.       // should report a warning because the Subtype implementation
  79.       // of foo() returns null
  80. >     dynamicDispatchShouldNotReportWhenCallingSupertypeOK(o);
  81.     }
  82.   

X#4
DynamicDispatch.java:94: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperFoo(...)` on line 94) and is dereferenced. 
  92.       // Should not report because Supertype.foo() does not return null
  93.       Supertype o = new Supertype();
  94. >     dynamicDispatchWrapperFoo(o).toString();
  95.     }
  96.   

!#5
DynamicDispatch.java:100: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperBar(...)` on line 100) and is dereferenced. 
   98.       // Should report because Supertype.bar() returns null
   99.       Supertype o = new Supertype();
  100. >     dynamicDispatchWrapperBar(o).toString();
  101.     }
  102.   

!#6
DynamicDispatch.java:106: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperFoo(...)` on line 106) and is dereferenced. 
  104.       // Should report because Subtype.foo() returns null
  105.       Supertype o = new Subtype();
  106. >     dynamicDispatchWrapperFoo(o).toString();
  107.     }
  108.   

X#7
DynamicDispatch.java:112: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperBar(...)` on line 112) and is dereferenced. 
  110.       // Should not report because Subtype.bar() does not returns null
  111.       Supertype o = new Subtype();
  112. >     dynamicDispatchWrapperBar(o).toString();
  113.     }
  114.   

!#8
DynamicDispatch.java:132: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 132) and is dereferenced. 
  130.         Supertype subtype = new Subtype();
  131.         WithField object = new WithField(subtype);
  132. >       object.mField.foo().toString();
  133.       }
  134.     }

!#9
DynamicDispatch.java:142: error: Null Dereference
  `Object DynamicDispatch.callFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.callFoo(...)` on line 142) and is dereferenced. 
  140.     void dynamicResolutionWithPrivateMethodBad() {
  141.       Supertype subtype = new Subtype();
  142. >     callFoo(subtype).toString();
  143.     }
  144.   

!#10
DynamicDispatch.java:155: error: Null Dereference
  `Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])` could be null (from the call to `DynamicDispatch.variadicMethod(...)` on line 155) and is dereferenced. 
  153.     void dynamicResolutionWithVariadicMethodBad() {
  154.       Supertype subtype = new Subtype();
  155. >     variadicMethod(subtype, null, null).toString();
  156.     }
  157.   }

!#11
DynamicDispatch.java:194: error: Null Dereference
  `o` could be null (null value originating from line 193) and is dereferenced. 
  192.       if (b.foo() == 52) {
  193.         Object o = null;
  194. >       o.toString();
  195.       }
  196.     }

!#12
DynamicDispatch.java:202: error: Null Dereference
  `o` could be null (null value originating from line 201) and is dereferenced. 
  200.       if (a.foo() == 32) {
  201.         Object o = null;
  202. >       o.toString();
  203.       }
  204.     }

!#13
DynamicDispatch.java:210: error: Null Dereference
  `o` could be null (null value originating from line 209) and is dereferenced. 
  208.       if (c.foo() == 52) {
  209.         Object o = null;
  210. >       o.toString();
  211.       }
  212.     }

!#14
DynamicDispatch.java:249: error: Null Dereference
  `Specialization$C Specialization.callBuildCGood(Specialization$A)` could be null (from the call to `Specialization.callBuildCGood(...)` on line 249) and is dereferenced. 
  247.   
  248.     C buildCAndDerefBad() {
  249. >     return callBuildCGood(new A_Bad()).f;
  250.     }
  251.   

!#15
DynamicDispatch.java:286: error: Null Dereference
  `Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)` could be null (from the call to `Specialization.callBuildCOnBoxGood(...)` on line 286) and is dereferenced. 
  284.   
  285.     C buildCOnBoxAndDerefBad() {
  286. >     return callBuildCOnBoxGood(new Box1(new Box2(new Box3(new A_Bad())))).f;
  287.     }
  288.   

!#16
DynamicDispatch.java:299: error: Null Dereference
  `Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callCallBuildC(...)` on line 299) and is dereferenced. 
  297.   
  298.     C buildCTransitivelyAndDerefBad() {
  299. >     return callCallBuildC(new A_Good(), new A_Bad()).f;
  300.     }
  301.   

?#17
DynamicDispatch.java:303: error: Null Dereference
  `Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callCallBuildC(...)` on line 303) and is dereferenced. 
  301.   
  302.     C buildCTransitivelyAndDerefGood() {
  303. >     return callCallBuildC(new A_Bad(), new A_Good()).f;
  304.     }
  305.   

!#18
DynamicDispatch.java:311: error: Null Dereference
  `Specialization$C Specialization.callBuildCWithEmptyPaths(Specialization$A,boolean)` could be null (from the call to `Specialization.callBuildCWithEmptyPaths(...)` on line 311) and is dereferenced. 
  309.   
  310.     C buildCWithInfeasiblePathsAndDerefBad() {
  311. >     return callBuildCWithEmptyPaths(new A_Bad(), true).f;
  312.     }
  313.   

?#19
DynamicDispatch.java:324: error: Null Dereference
  `Specialization$C Specialization.callBuildCTwiceGood(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callBuildCTwiceGood(...)` on line 324) and is dereferenced. 
  322.   
  323.     C buildCAndDerefNeedPartialSpecializationBad(A a) {
  324. >     return callBuildCTwiceGood(a, new A_Bad()).f;
  325.     }
  326.   

Found 20 issues
             Issue Type(ISSUED_TYPE_ID): #
  Null Dereference(NULLPTR_DEREFERENCE): 20

HdrHistogram-master	9866a4c
classgraph 	1310809
