#0
codetoanalyze/java/pulse/AnalysisStops.java:202: error: Null Dereference
  `ret->f` could be null (null value originating from line 201) and is dereferenced in the call to `AnalysisStops.derefParamOk(...)`. 
  200.       MyObj ret = externalFunc2();
  201.       ret.f = null;
  202. >     derefParamOk(ret);
  203.     }
  204.   

#1
codetoanalyze/java/pulse/AnalysisStops.java:213: error: Null Dereference
  `ret->rec->f` could be null (null value originating from line 212) and is dereferenced in the call to `AnalysisStops.derefParamOk(...)`. 
  211.       MyObj ret = externalFunc2();
  212.       ret.rec.f = null;
  213. >     derefParamOk(ret.rec);
  214.     }
  215.   

#2
codetoanalyze/java/pulse/AnalysisStops.java:230: error: Null Dereference
  `ret->rec->f` could be null (null value originating from line 229) and is dereferenced in the call to `AnalysisStops.accessPathOnParamOk(...)`. 
  228.       MyObj ret = externalFunc2();
  229.       ret.rec.f = null;
  230. >     accessPathOnParamOk(ret);
  231.     }
  232.   

#3
codetoanalyze/java/pulse/CloseableAsResourceExample.java:124: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.StringReader() on line 124 is not closed after the last access at line 124. 
  122.       // between Java programmers. But not closing it would violate
  123.       // the spec of the interface java.io.Reader anyway
  124. >     StringReader stringReader = new StringReader("paf!");
  125.     }
  126.   

#4
codetoanalyze/java/pulse/DefaultInInterface.java:22: error: Null Dereference
  `Object DefaultInInterface$I.defaultMethod1()` could be null (from the call to `DefaultInInterface$I.defaultMethod1()` on line 22) and is dereferenced. 
  20.     public static class A implements I {
  21.       public void defaultCallNPE() {
  22. >       System.out.println(this.defaultMethod1().toString());
  23.       }
  24.   

#5
codetoanalyze/java/pulse/DefaultInInterface.java:44: error: Null Dereference
  `Object DefaultInInterface$B.defaultMethod2()` could be null (from the call to `DefaultInInterface$B.defaultMethod2()` on line 44) and is dereferenced. 
  42.   
  43.       public void overridenCallNPE() {
  44. >       System.out.println(this.defaultMethod2().toString());
  45.       }
  46.     }

#6
codetoanalyze/java/pulse/DynamicDispatch.java:26: error: Null Dereference
  `Object DynamicDispatch$Impl.foo()` could be null (from the call to `DynamicDispatch$Impl.foo()` on line 26) and is dereferenced. 
  24.       Interface i = new Impl();
  25.       // should be a warning since Impl's implementation of foo returns null
  26. >     i.foo().toString();
  27.     }
  28.   

#7
codetoanalyze/java/pulse/DynamicDispatch.java:62: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 62) and is dereferenced. 
  60.       Supertype o = new Subtype();
  61.       // should report a warning because we know the dynamic type of o is Subtype
  62. >     o.foo().toString();
  63.     }
  64.   

#8
codetoanalyze/java/pulse/DynamicDispatch.java:100: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperBar(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperBar(...)` on line 100) and is dereferenced. 
   98.       // Should report because Supertype.bar() returns null
   99.       Supertype o = new Supertype();
  100. >     dynamicDispatchWrapperBar(o).toString();
  101.     }
  102.   

#9
codetoanalyze/java/pulse/DynamicDispatch.java:106: error: Null Dereference
  `Object DynamicDispatch.dynamicDispatchWrapperFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.dynamicDispatchWrapperFoo(...)` on line 106) and is dereferenced. 
  104.       // Should report because Subtype.foo() returns null
  105.       Supertype o = new Subtype();
  106. >     dynamicDispatchWrapperFoo(o).toString();
  107.     }
  108.   

#10
codetoanalyze/java/pulse/DynamicDispatch.java:132: error: Null Dereference
  `Object DynamicDispatch$Subtype.foo()` could be null (from the call to `DynamicDispatch$Subtype.foo()` on line 132) and is dereferenced. 
  130.         Supertype subtype = new Subtype();
  131.         WithField object = new WithField(subtype);
  132. >       object.mField.foo().toString();
  133.       }
  134.     }

#11
codetoanalyze/java/pulse/DynamicDispatch.java:142: error: Null Dereference
  `Object DynamicDispatch.callFoo(DynamicDispatch$Supertype)` could be null (from the call to `DynamicDispatch.callFoo(...)` on line 142) and is dereferenced. 
  140.     void dynamicResolutionWithPrivateMethodBad() {
  141.       Supertype subtype = new Subtype();
  142. >     callFoo(subtype).toString();
  143.     }
  144.   

#12
codetoanalyze/java/pulse/DynamicDispatch.java:155: error: Null Dereference
  `Object DynamicDispatch.variadicMethod(DynamicDispatch$Supertype[])` could be null (from the call to `DynamicDispatch.variadicMethod(...)` on line 155) and is dereferenced. 
  153.     void dynamicResolutionWithVariadicMethodBad() {
  154.       Supertype subtype = new Subtype();
  155. >     variadicMethod(subtype, null, null).toString();
  156.     }
  157.   }

#13
codetoanalyze/java/pulse/DynamicDispatch.java:194: error: Null Dereference
  `o` could be null (null value originating from line 193) and is dereferenced. 
  192.       if (b.foo() == 52) {
  193.         Object o = null;
  194. >       o.toString();
  195.       }
  196.     }

#14
codetoanalyze/java/pulse/DynamicDispatch.java:202: error: Null Dereference
  `o` could be null (null value originating from line 201) and is dereferenced. 
  200.       if (a.foo() == 32) {
  201.         Object o = null;
  202. >       o.toString();
  203.       }
  204.     }

#15
codetoanalyze/java/pulse/DynamicDispatch.java:210: error: Null Dereference
  `o` could be null (null value originating from line 209) and is dereferenced. 
  208.       if (c.foo() == 52) {
  209.         Object o = null;
  210. >       o.toString();
  211.       }
  212.     }

#16
codetoanalyze/java/pulse/DynamicDispatch.java:249: error: Null Dereference
  `Specialization$C Specialization.callBuildCGood(Specialization$A)` could be null (from the call to `Specialization.callBuildCGood(...)` on line 249) and is dereferenced. 
  247.   
  248.     C buildCAndDerefBad() {
  249. >     return callBuildCGood(new A_Bad()).f;
  250.     }
  251.   

#17
codetoanalyze/java/pulse/DynamicDispatch.java:286: error: Null Dereference
  `Specialization$C Specialization.callBuildCOnBoxGood(Specialization$Box1)` could be null (from the call to `Specialization.callBuildCOnBoxGood(...)` on line 286) and is dereferenced. 
  284.   
  285.     C buildCOnBoxAndDerefBad() {
  286. >     return callBuildCOnBoxGood(new Box1(new Box2(new Box3(new A_Bad())))).f;
  287.     }
  288.   

#18
codetoanalyze/java/pulse/DynamicDispatch.java:299: error: Null Dereference
  `Specialization$C Specialization.callCallBuildC(Specialization$A,Specialization$A)` could be null (from the call to `Specialization.callCallBuildC(...)` on line 299) and is dereferenced. 
  297.   
  298.     C buildCTransitivelyAndDerefBad() {
  299. >     return callCallBuildC(new A_Good(), new A_Bad()).f;
  300.     }
  301.   

#19
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:31: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedInputStream() on line 26 is not closed after the last access at line 31. 
  29.       } catch (IOException e) {
  30.       }
  31. >   }
  32.   
  33.     public void bufferedInputStreamClosedAfterResetOk() throws IOException {

#20
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:57: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.CheckedInputStream() on line 52 is not closed after the last access at line 57. 
  55.       } catch (IOException e) {
  56.       }
  57. >   }
  58.   
  59.     public void checkedInputStreamClosedAfterSkipOk() throws IOException {

#21
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:83: error: Pulse Resource Leak
  Resource dynamically allocated by constructor javax.crypto.CipherInputStream() on line 78 is not closed after the last access at line 83. 
  81.       } catch (IOException e) {
  82.       }
  83. >   }
  84.   
  85.     public void cipherInputStreamClosedAfterReadOk() throws IOException {

#22
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:110: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.DataInputStream() on line 105 is not closed after the last access at line 110. 
  108.       } catch (IOException e) {
  109.       }
  110. >   }
  111.   
  112.     public void dataInputStreamClosedAfterReadBooleanOk() throws IOException {

#23
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:145: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.DeflaterInputStream() on line 140 is not closed after the last access at line 145. 
  143.       } catch (IOException e) {
  144.       }
  145. >   }
  146.   
  147.     public void deflaterInputStreamClosedAfterResetOk() throws IOException {

#24
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:171: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 165 is not closed after the last access at line 171. 
  169.       } catch (IOException e) {
  170.       }
  171. >   }
  172.   
  173.     public void gzipInputStreamClosedAfterReadOk() throws IOException {

#25
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:171: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.GZIPInputStream() on line 166 is not closed after the last access at line 171. 
  169.       } catch (IOException e) {
  170.       }
  171. >   }
  172.   
  173.     public void gzipInputStreamClosedAfterReadOk() throws IOException {

#26
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:199: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.security.DigestInputStream() on line 194 is not closed after the last access at line 199. 
  197.       } catch (IOException e) {
  198.       }
  199. >   }
  200.   
  201.     public void digestInputStreamClosedAfterReadOk() throws IOException {

#27
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:225: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.InflaterInputStream() on line 220 is not closed after the last access at line 225. 
  223.       } catch (IOException e) {
  224.       }
  225. >   }
  226.   
  227.     public void inflaterInputStreamClosedAfterAvailableOk() throws IOException {

#28
codetoanalyze/java/pulse/FilterInputStreamLeaks.java:251: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PushbackInputStream() on line 246 is not closed after the last access at line 251. 
  249.       } catch (IOException e) {
  250.       }
  251. >   }
  252.   
  253.     public void pushbackInputStreamClosedAfterResetOk() throws IOException {

#29
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:36: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FilterOutputStream() on line 31 is not closed after the last access at line 36. 
  34.       } catch (IOException e) {
  35.       }
  36. >   }
  37.   
  38.     public void filterOutputStreamClosedAfterWriteOk() throws IOException {

#30
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:64: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.DataOutputStream() on line 59 is not closed after the last access at line 64. 
  62.       } catch (IOException e) {
  63.       }
  64. >   }
  65.   
  66.     public void dataOutputStreamClosedAfterWriteOk() throws IOException {

#31
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:92: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedOutputStream() on line 87 is not closed after the last access at line 92. 
  90.       } catch (IOException e) {
  91.       }
  92. >   }
  93.   
  94.     public void bufferedOutputStreamClosedAfterWriteOk() throws IOException {

#32
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:120: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.CheckedOutputStream() on line 115 is not closed after the last access at line 120. 
  118.       } catch (IOException e) {
  119.       }
  120. >   }
  121.   
  122.     public void checkedOutputStreamClosedAfterWriteOk() throws IOException {

#33
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:148: error: Pulse Resource Leak
  Resource dynamically allocated by constructor javax.crypto.CipherOutputStream() on line 143 is not closed after the last access at line 148. 
  146.       } catch (IOException e) {
  147.       }
  148. >   }
  149.   
  150.     public void cipherOutputStreamClosedAfterWriteOk() throws IOException {

#34
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:176: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.DeflaterOutputStream() on line 171 is not closed after the last access at line 176. 
  174.       } catch (IOException e) {
  175.       }
  176. >   }
  177.   
  178.     public void deflaterOutputStreamClosedAfterWriteOk() throws IOException {

#35
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:196: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.DeflaterOutputStream() on line 195 is not closed after the last access at line 196. 
  194.       try {
  195.         DeflaterOutputStream dos = new DeflaterOutputStream(fis, null);
  196. >       dos.write(arr);
  197.       } catch (IOException e) {
  198.       }

#36
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:199: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.DeflaterOutputStream() on line 195 is not closed after the last access at line 199. 
  197.       } catch (IOException e) {
  198.       }
  199. >   }
  200.   
  201.     public void deflaterOutputStreamWithArgClosedAfterWriteOk(FileOutputStream fis)

#37
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:224: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.security.DigestOutputStream() on line 219 is not closed after the last access at line 224. 
  222.       } catch (IOException e) {
  223.       }
  224. >   }
  225.   
  226.     public void digestOutputStreamClosedAfterWriteOk() throws IOException {

#38
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:252: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.InflaterOutputStream() on line 247 is not closed after the last access at line 252. 
  250.       } catch (IOException e) {
  251.       }
  252. >   }
  253.   
  254.     public void inflaterOutputStreamClosedAfterWriteOk() throws IOException {

#39
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:279: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 273 is not closed after the last access at line 279. 
  277.       } catch (IOException e) {
  278.       }
  279. >   }
  280.   
  281.     public void gzipOutputStreamClosedAfterWriteOk() throws IOException {

#40
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:279: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.GZIPOutputStream() on line 274 is not closed after the last access at line 279. 
  277.       } catch (IOException e) {
  278.       }
  279. >   }
  280.   
  281.     public void gzipOutputStreamClosedAfterWriteOk() throws IOException {

#41
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:304: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.InflaterOutputStream() on line 303 is not closed after the last access at line 304. 
  302.         fis = new FileOutputStream("file.txt");
  303.         InflaterOutputStream printer = new InflaterOutputStream(fis, null);
  304. >       printer.write(arr);
  305.       } catch (IOException e) {
  306.       }

#42
codetoanalyze/java/pulse/FilterOutputStreamLeaks.java:307: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.zip.InflaterOutputStream() on line 303 is not closed after the last access at line 307. 
  305.       } catch (IOException e) {
  306.       }
  307. >   }
  308.   
  309.     public void printStreamClosedAfterWriteOk() throws IOException {

#43
codetoanalyze/java/pulse/HashMapExample.java:46: error: Null Dereference
  `a` could be null (null value originating from line 44) and is dereferenced. 
  44.       Integer a = hashMap.get(i32);
  45.   
  46. >     return a.intValue();
  47.     }
  48.   

#44
codetoanalyze/java/pulse/HashMapExample.java:83: error: Null Dereference
  `(*map)->__infer_model_backing_collection_fst` could be null (null value originating from line 83) and is dereferenced. 
  81.       map.put(key, new Object());
  82.       map.remove(key);
  83. >     map.get(key).toString(); // NPE here
  84.     }
  85.   

#45
codetoanalyze/java/pulse/HashMapExample.java:99: error: Null Dereference
  `(*map)->__infer_model_backing_collection_snd` could be null (null value originating from line 99) and is dereferenced. 
   97.       map.put(key, new Object());
   98.       map.clear();
   99. >     map.get(key).toString(); // NPE here
  100.     }
  101.   

#46
codetoanalyze/java/pulse/HashMapExample.java:107: error: Null Dereference
  `s` could be null (null value originating from line 106) and is dereferenced. 
  105.       for (String key : map.keySet()) {
  106.         String s = map.get(key);
  107. >       if (s.equals("foo")) {
  108.           System.out.println("true");
  109.         }

#47
codetoanalyze/java/pulse/InstanceOfExample.java:48: error: Null Dereference
  `new_p` could be null (from the call to `InstanceOfExample.updatePerson(...)` on line 47) and is dereferenced. 
  46.       Person p = new Professor();
  47.       Person new_p = updatePerson(p);
  48. >     new_p.toString();
  49.     }
  50.   

#48
codetoanalyze/java/pulse/InstanceOfExample.java:81: error: Null Dereference
  `o` could be null (null value originating from line 80) and is dereferenced. 
  79.       if (!(p instanceof Professor)) {
  80.         Object o = null;
  81. >       o.toString();
  82.       }
  83.     }

#49
codetoanalyze/java/pulse/InstanceOfExample.java:165: error: Null Dereference
  The call to `void InstanceOfExample.checkInstanceArray(Object)` may trigger the following issue: null (from the call to `InstanceOfExample.checkInstanceArray(...)` on line 148) is dereferenced in the call to `InstanceOfExample.checkInstanceArray(...)`. 
  163.     public void testInstanceOfBooleanArrayBad() {
  164.       boolean arr[] = new boolean[10];
  165. >     checkInstanceArray(arr);
  166.     }
  167.   

#50
codetoanalyze/java/pulse/IntegerExample.java:28: error: Null Dereference
  `c` could be null (null value originating from line 25) and is dereferenced. 
  26.   
  27.       if (a.equals(b)) {
  28. >       c.intValue();
  29.       }
  30.     }

#51
codetoanalyze/java/pulse/IntegerExample.java:55: error: Null Dereference
  `d` could be null (null value originating from line 40) and is dereferenced. 
  53.   
  54.       if (b != c) {
  55. >       d.intValue();
  56.       }
  57.     }

#52
codetoanalyze/java/pulse/IntegerExample.java:70: error: Null Dereference
  `c` could be null (null value originating from line 66) and is dereferenced. 
  68.       // This is correct (a!=b should hold in this case as 128 is out of the cached interval)
  69.       if (a != b) {
  70. >       c.intValue();
  71.       }
  72.     }

#53
codetoanalyze/java/pulse/IntegerExample.java:80: error: Null Dereference
  `c` could be null (null value originating from line 77) and is dereferenced. 
  78.   
  79.       if (a.equals(b)) {
  80. >       c.intValue();
  81.       }
  82.     }

#54
codetoanalyze/java/pulse/InterExceptions.java:46: error: Null Dereference
  `my_null_int` could be null (null value originating from line 44) and is dereferenced. 
  44.       Integer my_null_int = null;
  45.       if (caller_of_g(100) == 112) {
  46. >       my_null_int.intValue();
  47.       }
  48.     }

#55
codetoanalyze/java/pulse/InterExceptions.java:60: error: Null Dereference
  `my_null_int` could be null (null value originating from line 58) and is dereferenced. 
  58.       Integer my_null_int = null;
  59.       if (caller_of_g(0) == -10) {
  60. >       my_null_int.intValue();
  61.       }
  62.     }

#56
codetoanalyze/java/pulse/InterExceptions.java:92: error: Null Dereference
  `my_null_int` could be null (null value originating from line 90) and is dereferenced. 
  90.       Integer my_null_int = null;
  91.       if (caller_of_thrower(10) == 33) {
  92. >       my_null_int.intValue();
  93.       }
  94.     }

#57
codetoanalyze/java/pulse/IntraExceptions.java:38: error: Null Dereference
  `my_null_int` could be null (null value originating from line 36) and is dereferenced. 
  36.       Integer my_null_int = null;
  37.       if (intra_exceptions_1(-100) == -90) {
  38. >       my_null_int.intValue();
  39.       }
  40.     }

#58
codetoanalyze/java/pulse/IntraExceptions.java:64: error: Null Dereference
  `my_null_int` could be null (null value originating from line 62) and is dereferenced. 
  62.       Integer my_null_int = null;
  63.       if (intra_exceptions_2(10) == 32) {
  64. >       my_null_int.intValue();
  65.       }
  66.     }

#59
codetoanalyze/java/pulse/InvokeDynamic.java:24: error: Null Dereference
  `o` could be null (null value originating from line 18) and is dereferenced. 
  22.             return b.compareTo(a);
  23.           });
  24. >     o.toString();
  25.     }
  26.   

#60
codetoanalyze/java/pulse/InvokeDynamic.java:32: error: Null Dereference
  `o` could be null (null value originating from line 31) and is dereferenced. 
  30.           (String a, String b) -> {
  31.             Object o = null;
  32. >           o.toString();
  33.             return b.compareTo(a);
  34.           });

#61
codetoanalyze/java/pulse/InvokeDynamic.java:51: error: Null Dereference
  `f->arg1` could be null (null value originating from line 49) and is dereferenced in the call to `InvokeDynamic$Lambda$_21_3.apply(...)`. 
  49.       String s = null;
  50.       Function<String, Integer> f = (s1) -> s.length();
  51. >     return f.apply(null);
  52.     }
  53.   

#62
codetoanalyze/java/pulse/InvokeDynamic.java:56: error: Null Dereference
  null (null value originating from line 56) is dereferenced in the call to `InvokeDynamic$Lambda$_22_0.apply(...)`. 
  54.     Integer npeViaSimpleParamPassing() {
  55.       Function<String, Integer> f = (s) -> s.length();
  56. >     return f.apply(null);
  57.     }
  58.   

#63
codetoanalyze/java/pulse/InvokeDynamic.java:111: error: Null Dereference
  `InvokeDynamic$Box InvokeDynamic$Box.map(Function).a` could be null (null value originating from line 109) and is dereferenced. 
  109.       Box b = new Box(null);
  110.       Function<A, A> f = (a) -> mix(a0, a);
  111. >     return b.map(f).a.val;
  112.     }
  113.   

#64
codetoanalyze/java/pulse/InvokeDynamic.java:123: error: Null Dereference
  `b->a` could be null (null value originating from line 121) and is dereferenced in the call to `InvokeDynamic$Box.map(...)`. 
  121.       Box b = new Box(null);
  122.       Function<A, A> f = (a) -> sum(a0, a);
  123. >     return b.map(f).a.val;
  124.     }
  125.   

#65
codetoanalyze/java/pulse/InvokeDynamic.java:128: error: Null Dereference
  null (null value originating from line 128) is dereferenced in the call to `InvokeDynamic.sum(...)`. 
  126.     int testBoxMapSum2Bad(A a1) {
  127.       Box b = new Box(a1);
  128. >     Function<A, A> f = (a) -> sum(null, a);
  129.       return b.map(f).a.val;
  130.     }

#66
codetoanalyze/java/pulse/InvokeDynamic.java:144: error: Null Dereference
  `InvokeDynamic$Box InvokeDynamic$Box.mapWithFun(InvokeDynamic$Fun2).a` could be null (null value originating from line 142) and is dereferenced. 
  142.       Box b = new Box(null);
  143.       Function<A, A> f = (a) -> mix(a0, a);
  144. >     return b.mapWithFun(new Fun2(new Fun1(f))).a.val;
  145.     }
  146.   

#67
codetoanalyze/java/pulse/InvokeDynamic.java:163: error: Null Dereference
  `InvokeDynamic$Box InvokeDynamic.testBoxMapAuxiliaryGood(InvokeDynamic$A,InvokeDynamic$Box,BiFunction).a` could be null (null value originating from line 160) and is dereferenced. 
  161.       Box b = new Box(null);
  162.       BiFunction<A, A, A> f = (a1, a2) -> mix(a1, a2);
  163. >     return testBoxMapAuxiliaryGood(a0, b, f).a.val;
  164.     }
  165.   

#68
codetoanalyze/java/pulse/Lists.java:34: error: Null Dereference
  `o` could be null (null value originating from line 32) and is dereferenced. 
  32.       Object o = null;
  33.       if (l.isEmpty()) {
  34. >       o.toString();
  35.       }
  36.     }

#69
codetoanalyze/java/pulse/Lists.java:59: error: Null Dereference
  `Object Lists.getElement(List)` could be null (from the call to `Lists.getElement(...)` on line 59) and is dereferenced. 
  57.         return;
  58.       }
  59. >     getElement(l).toString();
  60.     }
  61.   

#70
codetoanalyze/java/pulse/Lists.java:74: error: Null Dereference
  `o` could be null (null value originating from line 72) and is dereferenced. 
  72.       Object o = null;
  73.       if (!l.isEmpty()) {
  74. >       o.toString();
  75.       }
  76.     }

#71
codetoanalyze/java/pulse/Lists.java:84: error: Null Dereference
  `Object Lists.getElement(List)` could be null (from the call to `Lists.getElement(...)` on line 84) and is dereferenced. 
  82.       l.remove(i);
  83.       if (l.isEmpty()) {
  84. >       getElement(l).toString();
  85.       }
  86.     }

#72
codetoanalyze/java/pulse/Lists.java:92: error: Null Dereference
  `Object Lists.getElement(List)` could be null (from the call to `Lists.getElement(...)` on line 92) and is dereferenced. 
  90.       Object removed = l.remove(0);
  91.       if (removed != null) {
  92. >       getElement(l).toString();
  93.       }
  94.     }

#73
codetoanalyze/java/pulse/Lists.java:103: error: Null Dereference
  `o` could be null (null value originating from line 102) and is dereferenced. 
  101.       if (removed) {
  102.         Object o = null;
  103. >       o.toString();
  104.       }
  105.     }

#74
codetoanalyze/java/pulse/NullPointerExceptions.java:47: error: Null Dereference
  `a` could be null (null value originating from line 46) and is dereferenced. 
  45.         if (this != null) {
  46.           A a = null;
  47. >         return a.x;
  48.         }
  49.         return 0;

#75
codetoanalyze/java/pulse/NullPointerExceptions.java:58: error: Null Dereference
  `a` could be null (null value originating from line 57) and is dereferenced. 
  56.     public int nullPointerException() {
  57.       A a = null;
  58. >     return a.x;
  59.     }
  60.   

#76
codetoanalyze/java/pulse/NullPointerExceptions.java:78: error: Null Dereference
  `a` could be null (null value originating from line 77) and is dereferenced. 
  76.     public int nullPointerExceptionInterProc() {
  77.       A a = canReturnNullObject(false);
  78. >     return a.x;
  79.     }
  80.   

#77
codetoanalyze/java/pulse/NullPointerExceptions.java:87: error: Null Dereference
  `a` could be null (null value originating from line 83) and is dereferenced. 
  85.         throw new Exception();
  86.       } catch (Exception e) {
  87. >       return a.x;
  88.       }
  89.     }

#78
codetoanalyze/java/pulse/NullPointerExceptions.java:106: error: Null Dereference
  `t` could be null (null value originating from line 104) and is dereferenced. 
  104.       A[] array = new A[] {null};
  105.       A t = array[0];
  106. >     return t.x;
  107.     }
  108.   

#79
codetoanalyze/java/pulse/NullPointerExceptions.java:119: error: Null Dereference
  null (null value originating from line 119) is dereferenced. 
  117.   
  118.     public int nullPointerExceptionWithExplicitNullInitBad(C c) {
  119. >     return (new B(null)).a.x;
  120.     }
  121.   

#80
codetoanalyze/java/pulse/NullPointerExceptions.java:129: error: Null Dereference
  null (null value originating from line 129) is dereferenced in the call to `NullPointerExceptions.expectNotNullObjectParameter(...)`. 
  127.     // npe with a null object parameter
  128.     public static void nullPointerExceptionWithNullObjectParameter() {
  129. >     expectNotNullObjectParameter(null);
  130.     }
  131.   

#81
codetoanalyze/java/pulse/NullPointerExceptions.java:134: error: Null Dereference
  null (null value originating from line 134) is dereferenced in the call to `NullPointerExceptions.expectNotNullArrayParameter(...)`. 
  132.     // npe with a null array parameter
  133.     public static void nullPointerExceptionWithNullArrayParameter() {
  134. >     expectNotNullArrayParameter(null);
  135.     }
  136.   

#82
codetoanalyze/java/pulse/NullPointerExceptions.java:143: error: Null Dereference
  `fis` could be null (null value originating from line 138) and is dereferenced. 
  141.       } catch (IOException e) {
  142.       } finally {
  143. >       fis.close();
  144.       }
  145.     }

#83
codetoanalyze/java/pulse/NullPointerExceptions.java:154: error: Null Dereference
  `fos` could be null (null value originating from line 149) and is dereferenced. 
  152.       } catch (IOException e) {
  153.       } finally {
  154. >       fos.close();
  155.       }
  156.     }

#84
codetoanalyze/java/pulse/NullPointerExceptions.java:178: error: Null Dereference
  `s` could be null (null value originating from line 175) and is dereferenced. 
  176.       Object a = frame(new A());
  177.       if (a instanceof A) {
  178. >       s.length();
  179.       }
  180.     }

#85
codetoanalyze/java/pulse/NullPointerExceptions.java:203: error: Null Dereference
  null (null value originating from line 203) is dereferenced. 
  201.   
  202.     String hashmapNPE(HashMap h, Object o) {
  203. >     return (h.get(o).toString());
  204.     }
  205.   

#86
codetoanalyze/java/pulse/NullPointerExceptions.java:214: error: Null Dereference
  null (null value originating from line 214) is dereferenced. 
  212.   
  213.     int NPEvalueOfFromHashmapBad(HashMap<Integer, Integer> h, int position) {
  214. >     return h.get(position);
  215.     }
  216.   

#87
codetoanalyze/java/pulse/NullPointerExceptions.java:224: error: Null Dereference
  `x` could be null (null value originating from line 223) and is dereferenced. 
  222.       for (int i = 0; i < arr.length; i++) {
  223.         Object x = null;
  224. >       x.toString();
  225.       }
  226.     }

#88
codetoanalyze/java/pulse/NullPointerExceptions.java:264: error: Null Dereference
  `t` could be null (from the call to `NeverNullSource.get()` on line 263) and is dereferenced. 
  262.       NeverNullSource source = new NeverNullSource();
  263.       T t = source.get();
  264. >     t.f();
  265.     }
  266.   

#89
codetoanalyze/java/pulse/NullPointerExceptions.java:270: error: Null Dereference
  `t` could be null (from the call to `SomeLibrary.get()` on line 269) and is dereferenced. 
  268.       SomeLibrary source = new SomeLibrary();
  269.       T t = source.get();
  270. >     t.f();
  271.     }
  272.   

#90
codetoanalyze/java/pulse/NullPointerExceptions.java:348: error: Null Dereference
  `arr` could be null (null value originating from line 347) and is dereferenced. 
  346.     void nullPointerExceptionArrayLength() {
  347.       Object[] arr = null;
  348. >     int i = arr.length;
  349.     }
  350.   

#91
codetoanalyze/java/pulse/NullPointerExceptions.java:354: error: Null Dereference
  `s` could be null (null value originating from line 353) and is dereferenced. 
  352.       void npeWithDollars() {
  353.         String s = null;
  354. >       int n = s.length();
  355.       }
  356.     }

#92
codetoanalyze/java/pulse/NullPointerExceptions.java:366: error: Null Dereference
  `t` could be null (from the call to `CloseableAsResourceExample.sourceOfNullWithResourceLeak()` on line 365) and is dereferenced. 
  364.     void someNPEAfterResourceLeak() {
  365.       T t = CloseableAsResourceExample.sourceOfNullWithResourceLeak();
  366. >     t.f();
  367.     }
  368.   

#93
codetoanalyze/java/pulse/NullPointerExceptions.java:498: error: Null Dereference
  `Object NullPointerExceptions.derefUndefinedCallee()` could be null (from the call to `NullPointerExceptions.derefUndefinedCallee()` on line 498) and is dereferenced. 
  496.     void derefNull() {
  497.       // should be NPE, but will not be reported if we handled retUndefined() incorrectly
  498. >     derefUndefinedCallee().toString();
  499.     }
  500.   

#94
codetoanalyze/java/pulse/NullPointerExceptions.java:594: error: Null Dereference
  `s` could be null (null value originating from line 593) and is dereferenced. 
  592.       String s = l.toString();
  593.       s = null;
  594. >     s.toString(); // Expect NPE here
  595.     }
  596.   

#95
codetoanalyze/java/pulse/NullPointerExceptions.java:603: error: Null Dereference
  `s` could be null (null value originating from line 602) and is dereferenced. 
  601.       String s = l.toString();
  602.       s = null;
  603. >     s.toString(); // Expect NPE here
  604.     }
  605.   

#96
codetoanalyze/java/pulse/NullPointerExceptions.java:617: error: Null Dereference
  `s` could be null (null value originating from line 613) and is dereferenced. 
  615.         s = "safe";
  616.       }
  617. >     s.toString(); // No NPE
  618.       s = null;
  619.       if (c1.equals(c2)) {

#97
codetoanalyze/java/pulse/NullPointerExceptions.java:622: error: Null Dereference
  `s` could be null (null value originating from line 618) and is dereferenced. 
  620.         s = "safe";
  621.       }
  622. >     s.toString(); // No NPE
  623.     }
  624.   

#98
codetoanalyze/java/pulse/NullPointerExceptions.java:635: error: Null Dereference
  `s` could be null (null value originating from line 631) and is dereferenced. 
  633.         s = "safe";
  634.       }
  635. >     s.toString(); // No NPE
  636.     }
  637.   

#99
codetoanalyze/java/pulse/NullPointerExceptions.java:647: error: Null Dereference
  `s` could be null (null value originating from line 645) and is dereferenced. 
  645.       String s = null;
  646.       if (!c1.equals(c2)) {
  647. >       s.toString(); // NPE
  648.       }
  649.     }

#100
codetoanalyze/java/pulse/NullPointerExceptions.java:687: error: Null Dereference
  `a` could be null (null value originating from line 685) and is dereferenced. 
  685.         a = null;
  686.       }
  687. >     a.x = 0;
  688.     }
  689.   

#101
codetoanalyze/java/pulse/NullPointerExceptions.java:719: error: Null Dereference
  `a1` could be null (null value originating from line 717) and is dereferenced. 
  717.         a1 = null;
  718.       }
  719. >     a1.x = 0;
  720.     }
  721.   

#102
codetoanalyze/java/pulse/NullPointerExceptions.java:746: error: Null Dereference
  null (null value originating from line 746) is dereferenced in the call to `NullPointerExceptions.incr_deref3(...)`. 
  744.       A a2 = new A();
  745.       A a3 = new A();
  746. >     incr_deref3(null, null, null);
  747.     }
  748.   

#103
codetoanalyze/java/pulse/NullPointerExceptionsMoreTests.java:25: error: Null Dereference
  `s` could be null (null value originating from line 24) and is dereferenced. 
  23.       int j = s.length();
  24.       s = null;
  25. >     j = j + s.length();
  26.       return 42;
  27.     }

#104
codetoanalyze/java/pulse/NullSafeExample.java:19: error: Null Dereference
  `OtherClass OtherClass.canReturnNull()` could be null (from the call to `OtherClass()` on line 18) and is dereferenced. 
  17.     String buggyMethodBad() {
  18.       OtherClass o = new OtherClass();
  19. >     return o.canReturnNull().toString();
  20.     }
  21.   }

#105
codetoanalyze/java/pulse/NullSafeExample.java:33: error: Null Dereference
  `o` could be null (from the call to `OtherClass()` on line 31) and is dereferenced. 
  31.       OtherClass o = new OtherClass();
  32.       o = o.canReturnNull();
  33. >     o.getClass();
  34.     }
  35.   }

#106
codetoanalyze/java/pulse/NullSafeExample.java:42: error: Null Dereference
  `o` could be null (from the call to `OtherClass()` on line 40) and is dereferenced. 
  40.       OtherClass o = new OtherClass();
  41.       o = o.canReturnNull();
  42. >     o.toString();
  43.     }
  44.   }

#107
codetoanalyze/java/pulse/PreconditionsExample.java:70: error: Null Dereference
  `y` could be null (null value originating from line 67) and is dereferenced. 
  68.       x.i1 = 1000;
  69.       Preconditions.checkState(x.i1.equals(1000));
  70. >     y.toString();
  71.     }
  72.   

#108
codetoanalyze/java/pulse/PreconditionsExample.java:96: error: Null Dereference
  `x` could be null (null value originating from line 94) and is dereferenced. 
  94.       Object x = null;
  95.       checkAgeOver18(age);
  96. >     x.getClass();
  97.     }
  98.   }

#109
codetoanalyze/java/pulse/ReaderLeaks.java:35: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileReader() on line 30 is not closed after the last access at line 35. 
  33.       } catch (IOException e) {
  34.       }
  35. >   }
  36.   
  37.     public void readerClosedOk() throws IOException {

#110
codetoanalyze/java/pulse/ReaderLeaks.java:59: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedReader() on line 54 is not closed after the last access at line 59. 
  57.       } catch (IOException e) {
  58.       }
  59. >   }
  60.   
  61.     public void bufferedReaderClosedOk() throws IOException {

#111
codetoanalyze/java/pulse/ReaderLeaks.java:96: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.InputStreamReader() on line 91 is not closed after the last access at line 96. 
  94.       } catch (IOException e) {
  95.       }
  96. >   }
  97.   
  98.     public void inputStreamReaderClosedOk() throws IOException {

#112
codetoanalyze/java/pulse/ReaderLeaks.java:119: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileReader() on line 114 is not closed after the last access at line 119. 
  117.       } catch (IOException e) {
  118.       }
  119. >   }
  120.   
  121.     public void fileReaderClosedOk() throws IOException {

#113
codetoanalyze/java/pulse/ReaderLeaks.java:142: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PushbackReader() on line 137 is not closed after the last access at line 142. 
  140.       } catch (IOException e) {
  141.       }
  142. >   }
  143.   
  144.     public void pushbackReaderClosedOk() throws IOException {

#114
codetoanalyze/java/pulse/ReaderLeaks.java:167: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PipedReader() on line 162 is not closed after the last access at line 167. 
  165.       } catch (IOException e) {
  166.       }
  167. >   }
  168.   
  169.     public void pipedReaderNotClosedAfterConnectOk(PipedWriter writer) {

#115
codetoanalyze/java/pulse/ResourceLeaks.java:62: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 62 is not closed after the last access at line 62. 
  60.   
  61.     public void fileOutputStreamNotClosedBad() throws IOException {
  62. >     FileOutputStream fis = new FileOutputStream("file.txt");
  63.     }
  64.   

#116
codetoanalyze/java/pulse/ResourceLeaks.java:70: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 67 is not closed after the last access at line 70. 
  68.       fis.write(arr);
  69.       fis.close();
  70. >   }
  71.   
  72.     public void fileOutputStreamNotClosedAfterWriteBad() {

#117
codetoanalyze/java/pulse/ResourceLeaks.java:81: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 76 is not closed after the last access at line 81. 
  79.       } catch (IOException e) {
  80.       }
  81. >   }
  82.   
  83.     public void fileOutputStreamClosedAfterWriteAlmostOk() throws IOException {

#118
codetoanalyze/java/pulse/ResourceLeaks.java:115: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 114 is not closed after the last access at line 115. 
  113.     public void fileOutputStreamOneLeakBad() throws IOException {
  114.       FileOutputStream fis = new FileOutputStream("file.txt");
  115. >     if (fis != null) {
  116.       } else {
  117.       }

#119
codetoanalyze/java/pulse/ResourceLeaks.java:123: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 121 is not closed after the last access at line 123. 
  121.       FileOutputStream fis = new FileOutputStream("file.txt");
  122.       if (ok) {
  123. >       fis.write(1);
  124.         return 1;
  125.       } else {

#120
codetoanalyze/java/pulse/ResourceLeaks.java:126: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 121 is not closed after the last access at line 126. 
  124.         return 1;
  125.       } else {
  126. >       fis.write(2);
  127.         return 2;
  128.       }

#121
codetoanalyze/java/pulse/ResourceLeaks.java:127: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 121 is not closed after the last access at line 127. 
  125.       } else {
  126.         fis.write(2);
  127. >       return 2;
  128.       }
  129.     }

#122
codetoanalyze/java/pulse/ResourceLeaks.java:133: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 132 is not closed after the last access at line 133. 
  131.     public void fileOutputStreamTwoLeaksBad2() throws IOException {
  132.       FileOutputStream fis = new FileOutputStream("file.txt");
  133. >     if (fis != null) {
  134.       } else {
  135.       }

#123
codetoanalyze/java/pulse/ResourceLeaks.java:136: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 136 is not closed after the last access at line 136. 
  134.       } else {
  135.       }
  136. >     fis = new FileOutputStream("x");
  137.     }
  138.   

#124
codetoanalyze/java/pulse/ResourceLeaks.java:245: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 243 is not closed after the last access at line 245. 
  243.       GZIPInputStream g = new GZIPInputStream(new FileInputStream("file.txt"));
  244.       g.close();
  245. >   }
  246.   
  247.     public void nestedBad2() throws IOException {

#125
codetoanalyze/java/pulse/ResourceLeaks.java:250: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 248 is not closed after the last access at line 250. 
  248.       GZIPOutputStream g = new GZIPOutputStream(new FileOutputStream("file.txt"));
  249.       g.close();
  250. >   }
  251.   
  252.     /* Fixed versions of this are below with ObjectInputStream tests */

#126
codetoanalyze/java/pulse/ResourceLeaks.java:262: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 256 is not closed after the last access at line 262. 
  260.         if (oin != null) oin.close();
  261.       }
  262. >   }
  263.   
  264.     /* Fixed versions of this are below with ObjectInputStream tests */

#127
codetoanalyze/java/pulse/ResourceLeaks.java:274: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 268 is not closed after the last access at line 274. 
  272.         if (oin != null) oin.close();
  273.       }
  274. >   }
  275.   
  276.     // ZipFile tests      (Jarfile Tests also test Zipfiles)

#128
codetoanalyze/java/pulse/ResourceLeaks.java:336: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 331 is not closed after the last access at line 336. 
  334.       } catch (IOException e) {
  335.       }
  336. >   }
  337.   
  338.     public void fileInputStreamClosedOk() throws IOException {

#129
codetoanalyze/java/pulse/ResourceLeaks.java:407: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 402 is not closed after the last access at line 407. 
  405.       } catch (IOException e) {
  406.       }
  407. >   }
  408.   
  409.     public void objectOutputStreamClosedOk() throws IOException {

#130
codetoanalyze/java/pulse/ResourceLeaks.java:407: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.ObjectOutputStream() on line 402 is not closed after the last access at line 407. 
  405.       } catch (IOException e) {
  406.       }
  407. >   }
  408.   
  409.     public void objectOutputStreamClosedOk() throws IOException {

#131
codetoanalyze/java/pulse/ResourceLeaks.java:435: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 430 is not closed after the last access at line 435. 
  433.       } catch (IOException e) {
  434.       }
  435. >   }
  436.   
  437.     public void objectInputStreamClosedOk() throws IOException {

#132
codetoanalyze/java/pulse/ResourceLeaks.java:435: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.ObjectInputStream() on line 430 is not closed after the last access at line 435. 
  433.       } catch (IOException e) {
  434.       }
  435. >   }
  436.   
  437.     public void objectInputStreamClosedOk() throws IOException {

#133
codetoanalyze/java/pulse/ResourceLeaks.java:458: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.ObjectInputStream() on line 457 is not closed after the last access at line 458. 
  456.       try {
  457.         oin = new ObjectInputStream(fis);
  458. >       int a = oin.available();
  459.       } catch (IOException e) {
  460.       } finally {

#134
codetoanalyze/java/pulse/ResourceLeaks.java:463: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.ObjectInputStream() on line 457 is not closed after the last access at line 463. 
  461.         fis.close();
  462.       }
  463. >   }
  464.   
  465.     // JarInputStream tests

#135
codetoanalyze/java/pulse/ResourceLeaks.java:485: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 478 is not closed after the last access at line 485. 
  483.         // fos.close();
  484.       }
  485. >   }
  486.   
  487.     public static void nestedJarInputStreamBad(File file) throws IOException {

#136
codetoanalyze/java/pulse/ResourceLeaks.java:490: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 488 is not closed after the last access at line 490. 
  488.       JarInputStream g = new JarInputStream(new FileInputStream(file));
  489.       g.close();
  490. >   }
  491.   
  492.     // JarOutputStream tests

#137
codetoanalyze/java/pulse/ResourceLeaks.java:512: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 505 is not closed after the last access at line 512. 
  510.         // fos.close();
  511.       }
  512. >   }
  513.   
  514.     public static void nestedJarOutputStreamBad() throws IOException {

#138
codetoanalyze/java/pulse/ResourceLeaks.java:517: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileOutputStream() on line 515 is not closed after the last access at line 517. 
  515.       JarOutputStream g = new JarOutputStream(new FileOutputStream("file.txt"));
  516.       g.close();
  517. >   }
  518.   
  519.     // Socket tests

#139
codetoanalyze/java/pulse/ResourceLeaks.java:876: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.util.Scanner() on line 876 is not closed after the last access at line 876. 
  874.   
  875.     void scannerNotClosedBad() throws IOException {
  876. >     Scanner scanner = new Scanner(new FileInputStream("file.txt"));
  877.     }
  878.   

#140
codetoanalyze/java/pulse/SuppressLintExample.java:20: error: Null Dereference
  `object` could be null (null value originating from line 19) and is dereferenced. 
  18.     void shouldNotReportNPE() {
  19.       Object object = null;
  20. >     object.toString();
  21.     }
  22.   

#141
codetoanalyze/java/pulse/SuppressLintExample.java:25: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 25 is not closed after the last access at line 25. 
  23.     void shouldNotReportResourceLeak() {
  24.       try {
  25. >       FileInputStream fis = new FileInputStream(new File("whatever.txt"));
  26.       } catch (IOException e) {
  27.       }

#142
codetoanalyze/java/pulse/SuppressLintExample.java:41: error: Null Dereference
  `object` could be null (null value originating from line 40) and is dereferenced. 
  39.     void shouldReportNPE() {
  40.       Object object = null;
  41. >     object.toString();
  42.     }
  43.   

#143
codetoanalyze/java/pulse/TextUtilsExample.java:22: error: Null Dereference
  `o` could be null (null value originating from line 21) and is dereferenced. 
  20.       if (!TextUtils.isEmpty(s)) {
  21.         Object o = null;
  22. >       o.toString();
  23.       }
  24.     }

#144
codetoanalyze/java/pulse/TextUtilsExample.java:29: error: Null Dereference
  `o` could be null (null value originating from line 28) and is dereferenced. 
  27.       if (TextUtils.isEmpty("")) {
  28.         Object o = null;
  29. >       o.toString();
  30.       }
  31.     }

#145
codetoanalyze/java/pulse/TextUtilsExample.java:37: error: Null Dereference
  `o` could be null (null value originating from line 36) and is dereferenced. 
  35.       if (TextUtils.isEmpty(s)) {
  36.         Object o = null;
  37. >       o.toString();
  38.       }
  39.     }

#146
codetoanalyze/java/pulse/WriterLeaks.java:32: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PrintWriter() on line 27 is not closed after the last access at line 32. 
  30.       } catch (IOException e) {
  31.       }
  32. >   }
  33.   
  34.     public void writerClosedOk() throws IOException {

#147
codetoanalyze/java/pulse/WriterLeaks.java:55: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PrintWriter() on line 50 is not closed after the last access at line 55. 
  53.       } catch (IOException e) {
  54.       }
  55. >   }
  56.   
  57.     public void printWriterClosedOk() throws IOException {

#148
codetoanalyze/java/pulse/WriterLeaks.java:79: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.BufferedWriter() on line 74 is not closed after the last access at line 79. 
  77.       } catch (IOException e) {
  78.       }
  79. >   }
  80.   
  81.     public void bufferedWriterClosedOk() throws IOException {

#149
codetoanalyze/java/pulse/WriterLeaks.java:103: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.OutputStreamWriter() on line 98 is not closed after the last access at line 103. 
  101.       } catch (IOException e) {
  102.       }
  103. >   }
  104.   
  105.     public void outputStreamWriterClosedOk() throws IOException {

#150
codetoanalyze/java/pulse/WriterLeaks.java:126: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.FileWriter() on line 121 is not closed after the last access at line 126. 
  124.       } catch (IOException e) {
  125.       }
  126. >   }
  127.   
  128.     public void fileWriterClosedOk() throws IOException {

#151
codetoanalyze/java/pulse/WriterLeaks.java:151: error: Pulse Resource Leak
  Resource dynamically allocated by constructor java.io.PipedWriter() on line 146 is not closed after the last access at line 151. 
  149.       } catch (IOException e) {
  150.       }
  151. >   }
  152.   
  153.     public void FN_pipedWriterNotClosedAfterConnectBad(PipedReader reader) {

#152
codetoanalyze/java/pulse/taint/Annotations.java:36: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String Annotations.markedSource()` is tainted by value returned from `String Annotations.markedSource()` with kind `Simple` and flows to value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`. 
  34.   
  35.     void markedSourceToMarkedSinkBad() {
  36. >     markedSink(markedSource());
  37.     }
  38.   

#153
codetoanalyze/java/pulse/taint/Annotations.java:44: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String Annotations.unmarkedSanitizer(String)` is tainted by value returned from `String Annotations.markedSource()` with kind `Simple` and flows to value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`. 
  42.   
  43.     void markedSourceUsingUnmarkedSanitizerToMarkedSinkBad() {
  44. >     markedSink(unmarkedSanitizer(markedSource()));
  45.     }
  46.   

#154
codetoanalyze/java/pulse/taint/Arrays.java:21: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `arr[_]` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  19.       Object[] arr = new Object[1];
  20.       arr[0] = InferTaint.inferSecretSource();
  21. >     InferTaint.inferSensitiveSink(arr[0]);
  22.     }
  23.   

#155
codetoanalyze/java/pulse/taint/Arrays.java:27: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `arr[_]->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  25.       Obj[] arr = new Obj[1];
  26.       arr[0].f = InferTaint.inferSecretSource();
  27. >     InferTaint.inferSensitiveSink(arr[0].f);
  28.     }
  29.   

#156
codetoanalyze/java/pulse/taint/Arrays.java:32: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->arr[_]` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  30.     void viaFieldThenArrayBad1(Obj obj) {
  31.       obj.arr[0] = InferTaint.inferSecretSource();
  32. >     InferTaint.inferSensitiveSink(obj.arr[0]);
  33.     }
  34.   

#157
codetoanalyze/java/pulse/taint/Arrays.java:39: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->arr[_]` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  37.       obj.arr = new Obj[1];
  38.       obj.arr[0] = InferTaint.inferSecretSource();
  39. >     InferTaint.inferSensitiveSink(obj.arr[0]);
  40.     }
  41.   

#158
codetoanalyze/java/pulse/taint/Basics.java:19: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  17.     /** should report on these tests */
  18.     void directBad() {
  19. >     InferTaint.inferSensitiveSink(InferTaint.inferSecretSource());
  20.     }
  21.   

#159
codetoanalyze/java/pulse/taint/Basics.java:24: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  22.     void viaVarBad1() {
  23.       Object src = InferTaint.inferSecretSource();
  24. >     InferTaint.inferSensitiveSink(src);
  25.     }
  26.   

#160
codetoanalyze/java/pulse/taint/Basics.java:30: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `alias` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  28.       Object src = InferTaint.inferSecretSource();
  29.       Object alias = src;
  30. >     InferTaint.inferSensitiveSink(alias);
  31.     }
  32.   

#161
codetoanalyze/java/pulse/taint/Basics.java:37: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `alias` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  35.       Object alias = src;
  36.       src = null;
  37. >     InferTaint.inferSensitiveSink(alias);
  38.     }
  39.   

#162
codetoanalyze/java/pulse/taint/Basics.java:41: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  39.   
  40.     void viaCastBad1() {
  41. >     InferTaint.inferSensitiveSink((String) InferTaint.inferSecretSource());
  42.     }
  43.   

#163
codetoanalyze/java/pulse/taint/Basics.java:46: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  44.     void viaCastBad2() {
  45.       Object src = InferTaint.inferSecretSource();
  46. >     InferTaint.inferSensitiveSink((String) src);
  47.     }
  48.   

#164
codetoanalyze/java/pulse/taint/Basics.java:54: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  52.         src = InferTaint.inferSecretSource();
  53.       }
  54. >     InferTaint.inferSensitiveSink(src);
  55.     }
  56.   

#165
codetoanalyze/java/pulse/taint/Basics.java:62: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  60.         src = null;
  61.       }
  62. >     InferTaint.inferSensitiveSink(src);
  63.     }
  64.   

#166
codetoanalyze/java/pulse/taint/Basics.java:72: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  70.         src = InferTaint.inferSecretSource();
  71.       }
  72. >     InferTaint.inferSensitiveSink(src);
  73.     }
  74.   

#167
codetoanalyze/java/pulse/taint/Basics.java:84: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  82.         src = null;
  83.       }
  84. >     InferTaint.inferSensitiveSink(src);
  85.     }
  86.   

#168
codetoanalyze/java/pulse/taint/Basics.java:90: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  88.       Object src = InferTaint.inferSecretSource();
  89.       if (b) {
  90. >       InferTaint.inferSensitiveSink(src);
  91.       }
  92.     }

#169
codetoanalyze/java/pulse/taint/Basics.java:98: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
   96.       switch (i) {
   97.         case 1:
   98. >         InferTaint.inferSensitiveSink(src);
   99.           break;
  100.         case 2:

#170
codetoanalyze/java/pulse/taint/Basics.java:113: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  111.           break;
  112.         case 2:
  113. >         InferTaint.inferSensitiveSink(src);
  114.           break;
  115.         default:

#171
codetoanalyze/java/pulse/taint/Basics.java:127: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  125.           // fallthrough
  126.         case 2:
  127. >         InferTaint.inferSensitiveSink(src);
  128.           break;
  129.         default:

#172
codetoanalyze/java/pulse/taint/Basics.java:137: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  135.       Object src = InferTaint.inferSecretSource();
  136.       while (i < 10) {
  137. >       InferTaint.inferSensitiveSink(src);
  138.         i++;
  139.       }

#173
codetoanalyze/java/pulse/taint/Basics.java:148: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  146.         i++;
  147.       }
  148. >     InferTaint.inferSensitiveSink(src);
  149.     }
  150.   

#174
codetoanalyze/java/pulse/taint/Basics.java:154: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  152.     void noTripleReportBad() {
  153.       Object src = InferTaint.inferSecretSource();
  154. >     InferTaint.inferSensitiveSink(src);
  155.       InferTaint.inferSensitiveSink(src);
  156.     }

#175
codetoanalyze/java/pulse/taint/Basics.java:155: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  153.       Object src = InferTaint.inferSecretSource();
  154.       InferTaint.inferSensitiveSink(src);
  155. >     InferTaint.inferSensitiveSink(src);
  156.     }
  157.   

#176
codetoanalyze/java/pulse/taint/Basics.java:161: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `arr` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  159.       Object src = InferTaint.inferSecretSource();
  160.       Object[] arr = new Object[] {src};
  161. >     InferTaint.inferSensitiveSink(arr);
  162.     }
  163.   

#177
codetoanalyze/java/pulse/taint/Basics.java:170: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  168.     void funCallBad() {
  169.       Object src = InferTaint.inferSecretSource();
  170. >     passToSinkOk(2, src);
  171.     }
  172.   

#178
codetoanalyze/java/pulse/taint/ClassLoading.java:21: error: Taint Error
  Class Loading Injection. `String ClassLoading.getUserControlledString()` is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Class Class.forName(String)` with kind `ClassLoading`. 
  19.     public void clipboardToClassForNameBad() {
  20.       try {
  21. >       Class cls = Class.forName(this.getUserControlledString());
  22.       } catch (Exception e) {
  23.         System.out.println("Exception: " + e);

#179
codetoanalyze/java/pulse/taint/Constants.java:27: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj` is tainted by value passed as argument `#0` to `void Constants.source(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  25.       Object obj = new Object();
  26.       source(obj);
  27. >     InferTaint.inferSensitiveSink(obj);
  28.     }
  29.   }

#180
codetoanalyze/java/pulse/taint/ContentProviders.java:29: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `int ContentProviders.bulkInsert(Uri,ContentValues[])` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  27.     @Override
  28.     public int bulkInsert(Uri uri, ContentValues[] values) {
  29. >     mFile = new File(uri.toString());
  30.       return 0;
  31.     }

#181
codetoanalyze/java/pulse/taint/ContentProviders.java:35: error: Taint Error
  Untrusted file creation. `method` is tainted by value passed as argument `#0` to `Bundle ContentProviders.call(String,String,Bundle)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  33.     @Override
  34.     public Bundle call(String method, String args, Bundle extras) {
  35. >     mFile = new File(method);
  36.       return extras;
  37.     }

#182
codetoanalyze/java/pulse/taint/ContentProviders.java:41: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `int ContentProviders.delete(Uri,String,String[])` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  39.     @Override
  40.     public int delete(Uri uri, String selection, String[] selectionArgs) {
  41. >     mFile = new File(uri.toString());
  42.       return 0;
  43.     }

#183
codetoanalyze/java/pulse/taint/ContentProviders.java:47: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `Uri ContentProviders.insert(Uri,ContentValues)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  45.     @Override
  46.     public Uri insert(Uri uri, ContentValues values) {
  47. >     mFile = new File(uri.toString());
  48.       return null;
  49.     }

#184
codetoanalyze/java/pulse/taint/ContentProviders.java:53: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `String ContentProviders.getType(Uri)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  51.     @Override
  52.     public String getType(Uri uri) {
  53. >     mFile = new File(uri.toString());
  54.       return null;
  55.     }

#185
codetoanalyze/java/pulse/taint/ContentProviders.java:59: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `AssetFileDescriptor ContentProviders.openAssetFile(Uri,String,CancellationSignal)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  57.     @Override
  58.     public AssetFileDescriptor openAssetFile(Uri uri, String mode, CancellationSignal signal) {
  59. >     mFile = new File(uri.toString());
  60.       return null;
  61.     }

#186
codetoanalyze/java/pulse/taint/ContentProviders.java:65: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `ParcelFileDescriptor ContentProviders.openFile(Uri,String,CancellationSignal)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  63.     @Override
  64.     public ParcelFileDescriptor openFile(Uri uri, String mode, CancellationSignal signal) {
  65. >     mFile = new File(uri.toString());
  66.       return null;
  67.     }

#187
codetoanalyze/java/pulse/taint/ContentProviders.java:72: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `AssetFileDescriptor ContentProviders.openTypedAssetFile(Uri,String,Bundle,CancellationSignal)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  70.     public AssetFileDescriptor openTypedAssetFile(
  71.         Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal) {
  72. >     mFile = new File(uri.toString());
  73.       return null;
  74.     }

#188
codetoanalyze/java/pulse/taint/ContentProviders.java:79: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `Cursor ContentProviders.query(Uri,String[],String,String[],String)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  77.     public Cursor query(
  78.         Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
  79. >     mFile = new File(uri.toString());
  80.       return null;
  81.     }

#189
codetoanalyze/java/pulse/taint/ContentProviders.java:85: error: Taint Error
  Untrusted file creation. `String Object.toString()` is tainted by value passed as argument `#0` to `int ContentProviders.update(Uri,ContentValues,String,String[])` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  83.     @Override
  84.     public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
  85. >     mFile = new File(uri.toString());
  86.       return 0;
  87.     }

#190
codetoanalyze/java/pulse/taint/DynamicDispatch.java:86: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  84.       Object source = InferTaint.inferSecretSource();
  85.       Object launderedSource = i.propagate(source);
  86. >     InferTaint.inferSensitiveSink(launderedSource);
  87.     }
  88.   

#191
codetoanalyze/java/pulse/taint/Exceptions.java:59: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  57.         mayExcept();
  58.       } finally {
  59. >       InferTaint.inferSensitiveSink(source);
  60.       }
  61.     }

#192
codetoanalyze/java/pulse/taint/Exceptions.java:69: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  67.         source = InferTaint.inferSecretSource();
  68.       } finally {
  69. >       InferTaint.inferSensitiveSink(source);
  70.       }
  71.     }

#193
codetoanalyze/java/pulse/taint/Exceptions.java:113: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  111.   
  112.     public static void callSinkThenThrowBad() throws Exception {
  113. >     callSinkThenThrow(InferTaint.inferSecretSource());
  114.     }
  115.   

#194
codetoanalyze/java/pulse/taint/Exceptions.java:124: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `e` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  122.         doThrow(InferTaint.inferSecretSource());
  123.       } catch (RuntimeException e) {
  124. >       InferTaint.inferSensitiveSink(e);
  125.       }
  126.     }

#195
codetoanalyze/java/pulse/taint/ExternalSpecs.java:23: error: Taint Error
  Logging private data. `Object ExternalSpecs.privateDataSource()` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  21.   
  22.     public static void logExternalSourceBad() {
  23. >     Log.e("", (String) privateDataSource());
  24.     }
  25.   

#196
codetoanalyze/java/pulse/taint/ExternalSpecs.java:36: error: Taint Error
  Logging private data. `Object ExternalSpecs.privateDataSource()` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#1` to `void ExternalSpecs.loggingSink1(Object,Object)` with kind `Logging`. 
  34.   
  35.     public static void callExternalSinkBad() {
  36. >     loggingSink1(null, privateDataSource());
  37.     }
  38.   

#197
codetoanalyze/java/pulse/taint/ExternalSpecs.java:53: error: Taint Error
  Logging private data. `Object ExternalSpecs.privateDataSource()` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#0` to `void ExternalSpecs.loggingSink2(Object,Object)` with kind `Logging`. 
  51.   
  52.     public static void callExternalSink2Bad1() {
  53. >     loggingSink2(privateDataSource(), null);
  54.     }
  55.   

#198
codetoanalyze/java/pulse/taint/ExternalSpecs.java:57: error: Taint Error
  Logging private data. `Object ExternalSpecs.privateDataSource()` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#1` to `void ExternalSpecs.loggingSink2(Object,Object)` with kind `Logging`. 
  55.   
  56.     public static void callExternalSink2Bad2() {
  57. >     loggingSink2(null, privateDataSource());
  58.     }
  59.   

#199
codetoanalyze/java/pulse/taint/ExternalSpecs.java:108: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  106.         o = source;
  107.       }
  108. >     InferTaint.inferSensitiveSink(o);
  109.     }
  110.   

#200
codetoanalyze/java/pulse/taint/ExternalSpecs.java:122: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  120.       Object source = InferTaint.inferSecretSource();
  121.       Object o = sanitizeOneBranchInCallee(source, b);
  122. >     InferTaint.inferSensitiveSink(o);
  123.     }
  124.   

#201
codetoanalyze/java/pulse/taint/ExternalSpecs.java:143: error: Taint Error
  Logging private data. `Object ExternalSpecs.sinkThatPropagates(Object)` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#0` to `Object ExternalSpecs.sinkThatPropagates(Object)` with kind `Logging`. 
  141.     void callSinkThatPropagatesBad() {
  142.       Object source = privateDataSource();
  143. >     Object sourceAgain = sinkThatPropagates(source); // should report
  144.       loggingSink1(null, sourceAgain); // should report here too
  145.     }

#202
codetoanalyze/java/pulse/taint/ExternalSpecs.java:144: error: Taint Error
  Logging private data. `sourceAgain` is tainted by value returned from `Object ExternalSpecs.privateDataSource()` with kind `PrivateData` and flows to value passed as argument `#1` to `void ExternalSpecs.loggingSink1(Object,Object)` with kind `Logging`. 
  142.       Object source = privateDataSource();
  143.       Object sourceAgain = sinkThatPropagates(source); // should report
  144. >     loggingSink1(null, sourceAgain); // should report here too
  145.     }
  146.   

#203
codetoanalyze/java/pulse/taint/ExternalSpecs.java:181: error: Taint Error
  Logging private data. `Object InterfaceSpecImpl.source()` is tainted by value returned from `Object InterfaceSpecImpl.source()` with kind `PrivateData` and flows to value passed as argument `#0` to `void InterfaceSpecImpl.sink(Object)` with kind `Logging`. 
  179.   
  180.     public void externalSpecBad() {
  181. >     sink(source());
  182.     }
  183.   }

#204
codetoanalyze/java/pulse/taint/ExternalSpecs.java:192: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `ConstructorSink.<init>(Object)` with kind `Simple`. 
  190.     public static ConstructorSink constructorSinkBad() {
  191.       Object source = InferTaint.inferSecretSource();
  192. >     return new ConstructorSink(source);
  193.     }
  194.   }

#205
codetoanalyze/java/pulse/taint/Fields.java:23: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `this->mFld` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  21.     void instanceFieldBad() {
  22.       this.mFld = InferTaint.inferSecretSource();
  23. >     InferTaint.inferSensitiveSink(this.mFld);
  24.     }
  25.   

#206
codetoanalyze/java/pulse/taint/Fields.java:28: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `#GB<>$codetoanalyze.java.pulse.Fields.sFld` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  26.     void staticFieldBad() {
  27.       sFld = InferTaint.inferSecretSource();
  28. >     InferTaint.inferSensitiveSink(sFld);
  29.     }
  30.   

#207
codetoanalyze/java/pulse/taint/Fields.java:33: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  31.     void viaFieldBad1(Obj obj) {
  32.       obj.f = InferTaint.inferSecretSource();
  33. >     InferTaint.inferSensitiveSink(obj.f);
  34.     }
  35.   

#208
codetoanalyze/java/pulse/taint/Fields.java:39: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  37.       Obj obj = new Obj();
  38.       obj.f = InferTaint.inferSecretSource();
  39. >     InferTaint.inferSensitiveSink(obj.f);
  40.     }
  41.   

#209
codetoanalyze/java/pulse/taint/Fields.java:46: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  44.       obj.f = InferTaint.inferSecretSource();
  45.       Object src = obj.f;
  46. >     InferTaint.inferSensitiveSink(src);
  47.     }
  48.   

#210
codetoanalyze/java/pulse/taint/Fields.java:51: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->g->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  49.     void viaNestedFieldBad1(Obj obj) {
  50.       obj.g.f = InferTaint.inferSecretSource();
  51. >     InferTaint.inferSensitiveSink(obj.g.f);
  52.     }
  53.   

#211
codetoanalyze/java/pulse/taint/Fields.java:58: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->g->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  56.       obj.g = new Obj();
  57.       obj.g.f = InferTaint.inferSecretSource();
  58. >     InferTaint.inferSensitiveSink(obj.g.f);
  59.     }
  60.   

#212
codetoanalyze/java/pulse/taint/Fields.java:94: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj1->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  92.       Obj obj2 = obj1;
  93.       obj2.f = InferTaint.inferSecretSource();
  94. >     InferTaint.inferSensitiveSink(obj1.f);
  95.     }
  96.   

#213
codetoanalyze/java/pulse/taint/Fields.java:100: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->g->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
   98.       Obj x = obj.g;
   99.       x.f = InferTaint.inferSecretSource();
  100. >     InferTaint.inferSensitiveSink(obj.g.f);
  101.     }
  102.   

#214
codetoanalyze/java/pulse/taint/Fields.java:110: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->g->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  108.         i++;
  109.       }
  110. >     InferTaint.inferSensitiveSink(obj.g.f);
  111.     }
  112.   

#215
codetoanalyze/java/pulse/taint/Files.java:19: error: Taint Error
  Untrusted file creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  17.     public File fileConstructorSinkBad() {
  18.       String taintedString = (String) InferTaint.inferSecretSource();
  19. >     return new File(taintedString);
  20.     }
  21.   

#216
codetoanalyze/java/pulse/taint/Files.java:24: error: Taint Error
  Untrusted file creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Path FileSystem.getPath(String,String[])` with kind `CreateFile`. 
  22.     public Path fileSystemConstructorSinkBad1() {
  23.       String taintedString = (String) InferTaint.inferSecretSource();
  24. >     return FileSystems.getDefault().getPath(taintedString);
  25.     }
  26.   

#217
codetoanalyze/java/pulse/taint/Files.java:29: error: Taint Error
  Untrusted file creation. Value is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#1` to `Path FileSystem.getPath(String,String[])` with kind `CreateFile`. 
  27.     public Path fileSystemConstructorSinkBad2() {
  28.       String taintedString = (String) InferTaint.inferSecretSource();
  29. >     return FileSystems.getDefault().getPath("", taintedString);
  30.     }
  31.   

#218
codetoanalyze/java/pulse/taint/Files.java:34: error: Taint Error
  Untrusted file creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Path Paths.get(String,String[])` with kind `CreateFile`. 
  32.     public Path pathsSinkBad1() {
  33.       String taintedString = (String) InferTaint.inferSecretSource();
  34. >     return Paths.get(taintedString);
  35.     }
  36.   

#219
codetoanalyze/java/pulse/taint/Files.java:39: error: Taint Error
  Untrusted file creation. Value is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#1` to `Path Paths.get(String,String[])` with kind `CreateFile`. 
  37.     public Path pathsSinkBad2() {
  38.       String taintedString = (String) InferTaint.inferSecretSource();
  39. >     return Paths.get("", taintedString);
  40.     }
  41.   }

#220
codetoanalyze/java/pulse/taint/FlowSensitivity.java:42: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  40.     static void interproceduralFlowSensitivityBad(Obj o) {
  41.       returnSource(o);
  42. >     callSink(o);
  43.     }
  44.   

#221
codetoanalyze/java/pulse/taint/FlowSensitivity.java:56: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  54.     static void callSourceAndSinkBad1(Obj o) {
  55.       sourceAndSink(o);
  56. >     InferTaint.inferSensitiveSink(o.f);
  57.     }
  58.   

#222
codetoanalyze/java/pulse/taint/FlowSensitivity.java:61: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  59.     static void callSourceAndSinkBad2(Obj o) {
  60.       o.f = InferTaint.inferSecretSource();
  61. >     sourceAndSink(o);
  62.     }
  63.   }

#223
codetoanalyze/java/pulse/taint/Intents.java:60: error: Taint Error
  Create Intent from URI. `this->mUri` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `ComponentName ContextWrapper.startService(Intent)` with kind `StartComponent`. 
  58.     @Override
  59.     public void onResume() {
  60. >     startServiceWithTaintedIntent();
  61.     }
  62.   

#224
codetoanalyze/java/pulse/taint/Intents.java:65: error: Taint Error
  Create Intent from URI. `taintedIntent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `ComponentName ContextWrapper.startService(Intent)` with kind `StartComponent`. 
  63.     void startServiceWithTaintedIntent() {
  64.       Intent taintedIntent = new Intent("", mUri);
  65. >     startService(taintedIntent);
  66.     }
  67.   }

#225
codetoanalyze/java/pulse/taint/Intents.java:134: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `boolean ContextWrapper.bindService(Intent,ServiceConnection,int)` with kind `StartComponent`. 
  132.   
  133.       // 20 sinks, 20 expected reports
  134. >     activity.bindService(intent, null, 0);
  135.       activity.sendBroadcast(intent);
  136.       activity.sendBroadcastAsUser(intent, null);

#226
codetoanalyze/java/pulse/taint/Intents.java:135: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendBroadcast(Intent)` with kind `StartComponent`. 
  133.       // 20 sinks, 20 expected reports
  134.       activity.bindService(intent, null, 0);
  135. >     activity.sendBroadcast(intent);
  136.       activity.sendBroadcastAsUser(intent, null);
  137.       activity.sendOrderedBroadcast(intent, null);

#227
codetoanalyze/java/pulse/taint/Intents.java:136: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendBroadcastAsUser(Intent,UserHandle)` with kind `StartComponent`. 
  134.       activity.bindService(intent, null, 0);
  135.       activity.sendBroadcast(intent);
  136. >     activity.sendBroadcastAsUser(intent, null);
  137.       activity.sendOrderedBroadcast(intent, null);
  138.       activity.sendOrderedBroadcastAsUser(intent, null, null, null, null, 0, null, null);

#228
codetoanalyze/java/pulse/taint/Intents.java:137: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendOrderedBroadcast(Intent,String)` with kind `StartComponent`. 
  135.       activity.sendBroadcast(intent);
  136.       activity.sendBroadcastAsUser(intent, null);
  137. >     activity.sendOrderedBroadcast(intent, null);
  138.       activity.sendOrderedBroadcastAsUser(intent, null, null, null, null, 0, null, null);
  139.       activity.sendStickyBroadcast(intent);

#229
codetoanalyze/java/pulse/taint/Intents.java:138: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)` with kind `StartComponent`. 
  136.       activity.sendBroadcastAsUser(intent, null);
  137.       activity.sendOrderedBroadcast(intent, null);
  138. >     activity.sendOrderedBroadcastAsUser(intent, null, null, null, null, 0, null, null);
  139.       activity.sendStickyBroadcast(intent);
  140.       activity.sendStickyBroadcastAsUser(intent, null);

#230
codetoanalyze/java/pulse/taint/Intents.java:139: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendStickyBroadcast(Intent)` with kind `StartComponent`. 
  137.       activity.sendOrderedBroadcast(intent, null);
  138.       activity.sendOrderedBroadcastAsUser(intent, null, null, null, null, 0, null, null);
  139. >     activity.sendStickyBroadcast(intent);
  140.       activity.sendStickyBroadcastAsUser(intent, null);
  141.       activity.sendStickyOrderedBroadcast(intent, null, null, 0, null, null);

#231
codetoanalyze/java/pulse/taint/Intents.java:140: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendStickyBroadcastAsUser(Intent,UserHandle)` with kind `StartComponent`. 
  138.       activity.sendOrderedBroadcastAsUser(intent, null, null, null, null, 0, null, null);
  139.       activity.sendStickyBroadcast(intent);
  140. >     activity.sendStickyBroadcastAsUser(intent, null);
  141.       activity.sendStickyOrderedBroadcast(intent, null, null, 0, null, null);
  142.       activity.sendStickyOrderedBroadcastAsUser(intent, null, null, null, 0, null, null);

#232
codetoanalyze/java/pulse/taint/Intents.java:141: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)` with kind `StartComponent`. 
  139.       activity.sendStickyBroadcast(intent);
  140.       activity.sendStickyBroadcastAsUser(intent, null);
  141. >     activity.sendStickyOrderedBroadcast(intent, null, null, 0, null, null);
  142.       activity.sendStickyOrderedBroadcastAsUser(intent, null, null, null, 0, null, null);
  143.       activity.startActivities(new Intent[] {intent});

#233
codetoanalyze/java/pulse/taint/Intents.java:142: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void ContextWrapper.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)` with kind `StartComponent`. 
  140.       activity.sendStickyBroadcastAsUser(intent, null);
  141.       activity.sendStickyOrderedBroadcast(intent, null, null, 0, null, null);
  142. >     activity.sendStickyOrderedBroadcastAsUser(intent, null, null, null, 0, null, null);
  143.       activity.startActivities(new Intent[] {intent});
  144.       activity.startActivity(intent);

#234
codetoanalyze/java/pulse/taint/Intents.java:143: error: Taint Error
  Create Intent from URI. Value is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivities(Intent[])` with kind `StartComponent`. 
  141.       activity.sendStickyOrderedBroadcast(intent, null, null, 0, null, null);
  142.       activity.sendStickyOrderedBroadcastAsUser(intent, null, null, null, 0, null, null);
  143. >     activity.startActivities(new Intent[] {intent});
  144.       activity.startActivity(intent);
  145.       activity.startActivityForResult(intent, 0);

#235
codetoanalyze/java/pulse/taint/Intents.java:144: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  142.       activity.sendStickyOrderedBroadcastAsUser(intent, null, null, null, 0, null, null);
  143.       activity.startActivities(new Intent[] {intent});
  144. >     activity.startActivity(intent);
  145.       activity.startActivityForResult(intent, 0);
  146.       activity.startActivityIfNeeded(intent, 0);

#236
codetoanalyze/java/pulse/taint/Intents.java:145: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivityForResult(Intent,int)` with kind `StartComponent`. 
  143.       activity.startActivities(new Intent[] {intent});
  144.       activity.startActivity(intent);
  145. >     activity.startActivityForResult(intent, 0);
  146.       activity.startActivityIfNeeded(intent, 0);
  147.       activity.startActivityFromChild(null, intent, 0);

#237
codetoanalyze/java/pulse/taint/Intents.java:146: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `boolean Activity.startActivityIfNeeded(Intent,int)` with kind `StartComponent`. 
  144.       activity.startActivity(intent);
  145.       activity.startActivityForResult(intent, 0);
  146. >     activity.startActivityIfNeeded(intent, 0);
  147.       activity.startActivityFromChild(null, intent, 0);
  148.       activity.startActivityFromFragment(null, intent, 0);

#238
codetoanalyze/java/pulse/taint/Intents.java:147: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#1` to `void Activity.startActivityFromChild(Activity,Intent,int)` with kind `StartComponent`. 
  145.       activity.startActivityForResult(intent, 0);
  146.       activity.startActivityIfNeeded(intent, 0);
  147. >     activity.startActivityFromChild(null, intent, 0);
  148.       activity.startActivityFromFragment(null, intent, 0);
  149.       activity.startIntentSender(null, intent, 0, 0, 0);

#239
codetoanalyze/java/pulse/taint/Intents.java:148: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#1` to `void Activity.startActivityFromFragment(Fragment,Intent,int)` with kind `StartComponent`. 
  146.       activity.startActivityIfNeeded(intent, 0);
  147.       activity.startActivityFromChild(null, intent, 0);
  148. >     activity.startActivityFromFragment(null, intent, 0);
  149.       activity.startIntentSender(null, intent, 0, 0, 0);
  150.       activity.startIntentSenderForResult(null, 0, intent, 0, 0, 0);

#240
codetoanalyze/java/pulse/taint/Intents.java:149: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#1` to `void Activity.startIntentSender(IntentSender,Intent,int,int,int)` with kind `StartComponent`. 
  147.       activity.startActivityFromChild(null, intent, 0);
  148.       activity.startActivityFromFragment(null, intent, 0);
  149. >     activity.startIntentSender(null, intent, 0, 0, 0);
  150.       activity.startIntentSenderForResult(null, 0, intent, 0, 0, 0);
  151.       activity.startIntentSenderFromChild(null, null, 0, intent, 0, 0, 0);

#241
codetoanalyze/java/pulse/taint/Intents.java:150: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#2` to `void Activity.startIntentSenderForResult(IntentSender,int,Intent,int,int,int)` with kind `StartComponent`. 
  148.       activity.startActivityFromFragment(null, intent, 0);
  149.       activity.startIntentSender(null, intent, 0, 0, 0);
  150. >     activity.startIntentSenderForResult(null, 0, intent, 0, 0, 0);
  151.       activity.startIntentSenderFromChild(null, null, 0, intent, 0, 0, 0);
  152.       activity.startService(intent);

#242
codetoanalyze/java/pulse/taint/Intents.java:151: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#3` to `void Activity.startIntentSenderFromChild(Activity,IntentSender,int,Intent,int,int,int)` with kind `StartComponent`. 
  149.       activity.startIntentSender(null, intent, 0, 0, 0);
  150.       activity.startIntentSenderForResult(null, 0, intent, 0, 0, 0);
  151. >     activity.startIntentSenderFromChild(null, null, 0, intent, 0, 0, 0);
  152.       activity.startService(intent);
  153.       activity.stopService(intent);

#243
codetoanalyze/java/pulse/taint/Intents.java:152: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `ComponentName ContextWrapper.startService(Intent)` with kind `StartComponent`. 
  150.       activity.startIntentSenderForResult(null, 0, intent, 0, 0, 0);
  151.       activity.startIntentSenderFromChild(null, null, 0, intent, 0, 0, 0);
  152. >     activity.startService(intent);
  153.       activity.stopService(intent);
  154.     }

#244
codetoanalyze/java/pulse/taint/Intents.java:153: error: Taint Error
  Create Intent from URI. `intent` is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `boolean ContextWrapper.stopService(Intent)` with kind `StartComponent`. 
  151.       activity.startIntentSenderFromChild(null, null, 0, intent, 0, 0, 0);
  152.       activity.startService(intent);
  153. >     activity.stopService(intent);
  154.     }
  155.   

#245
codetoanalyze/java/pulse/taint/Intents.java:158: error: Taint Error
  Untrusted Android Intent creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  156.     public void callAllIntentSinks() throws IOException, URISyntaxException, XmlPullParserException {
  157.       String taintedString = (String) InferTaint.inferSecretSource();
  158. >     Intent.parseUri(taintedString, 0);
  159.       Intent.getIntent(taintedString);
  160.       Intent.getIntentOld(taintedString);

#246
codetoanalyze/java/pulse/taint/Intents.java:159: error: Taint Error
  Untrusted Android Intent creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.getIntent(String)` with kind `CreateIntent`. 
  157.       String taintedString = (String) InferTaint.inferSecretSource();
  158.       Intent.parseUri(taintedString, 0);
  159. >     Intent.getIntent(taintedString);
  160.       Intent.getIntentOld(taintedString);
  161.   

#247
codetoanalyze/java/pulse/taint/Intents.java:160: error: Taint Error
  Untrusted Android Intent creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.getIntentOld(String)` with kind `CreateIntent`. 
  158.       Intent.parseUri(taintedString, 0);
  159.       Intent.getIntent(taintedString);
  160. >     Intent.getIntentOld(taintedString);
  161.   
  162.       Uri taintedUri = (Uri) InferTaint.inferSecretSource();

#248
codetoanalyze/java/pulse/taint/Intents.java:164: error: Taint Error
  Untrusted Android Intent creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setClassName(String,String)` with kind `CreateIntent`. 
  162.       Uri taintedUri = (Uri) InferTaint.inferSecretSource();
  163.       Intent i = new Intent();
  164. >     i.setClassName(taintedString, "");
  165.       i.setData(taintedUri);
  166.       i.setDataAndNormalize(taintedUri);

#249
codetoanalyze/java/pulse/taint/Intents.java:165: error: Taint Error
  Untrusted Android Intent creation. `taintedUri` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setData(Uri)` with kind `CreateIntent`. 
  163.       Intent i = new Intent();
  164.       i.setClassName(taintedString, "");
  165. >     i.setData(taintedUri);
  166.       i.setDataAndNormalize(taintedUri);
  167.       i.setDataAndType(taintedUri, "");

#250
codetoanalyze/java/pulse/taint/Intents.java:166: error: Taint Error
  Untrusted Android Intent creation. `taintedUri` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setDataAndNormalize(Uri)` with kind `CreateIntent`. 
  164.       i.setClassName(taintedString, "");
  165.       i.setData(taintedUri);
  166. >     i.setDataAndNormalize(taintedUri);
  167.       i.setDataAndType(taintedUri, "");
  168.       i.setDataAndTypeAndNormalize(taintedUri, "");

#251
codetoanalyze/java/pulse/taint/Intents.java:167: error: Taint Error
  Untrusted Android Intent creation. `taintedUri` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setDataAndType(Uri,String)` with kind `CreateIntent`. 
  165.       i.setData(taintedUri);
  166.       i.setDataAndNormalize(taintedUri);
  167. >     i.setDataAndType(taintedUri, "");
  168.       i.setDataAndTypeAndNormalize(taintedUri, "");
  169.       i.setPackage(taintedString); // 9 sinks, 9 expected reports

#252
codetoanalyze/java/pulse/taint/Intents.java:168: error: Taint Error
  Untrusted Android Intent creation. `taintedUri` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setDataAndTypeAndNormalize(Uri,String)` with kind `CreateIntent`. 
  166.       i.setDataAndNormalize(taintedUri);
  167.       i.setDataAndType(taintedUri, "");
  168. >     i.setDataAndTypeAndNormalize(taintedUri, "");
  169.       i.setPackage(taintedString); // 9 sinks, 9 expected reports
  170.     }

#253
codetoanalyze/java/pulse/taint/Intents.java:169: error: Taint Error
  Untrusted Android Intent creation. `taintedString` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Intent Intent.setPackage(String)` with kind `CreateIntent`. 
  167.       i.setDataAndType(taintedUri, "");
  168.       i.setDataAndTypeAndNormalize(taintedUri, "");
  169. >     i.setPackage(taintedString); // 9 sinks, 9 expected reports
  170.     }
  171.   

#254
codetoanalyze/java/pulse/taint/Intents.java:176: error: Taint Error
  Create Intent from URI. `intent` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void ContextSubclass.startActivity(Intent)` with kind `StartComponent`. 
  174.       String taintedString = (String) InferTaint.inferSecretSource();
  175.       intent.setAction(taintedString);
  176. >     context.startActivity(intent);
  177.     }
  178.   

#255
codetoanalyze/java/pulse/taint/Intents.java:180: error: Taint Error
  Insecure Intent handling. `Intent Activity.getIntent()` is tainted by value returned from `Intent Activity.getIntent()` with kind `IntentForInsecureIntentHandling` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponentForInsecureIntentHandling`. 
  178.   
  179.     void reuseIntentBad(Activity activity) {
  180. >     activity.startActivity(activity.getIntent());
  181.     }
  182.   

#256
codetoanalyze/java/pulse/taint/Intents.java:190: error: Taint Error
  Untrusted Android Intent creation. `Uri Uri.parse(String)` is tainted by value returned from `String Intent.getStringExtra(String)` with kind `Intent` and flows to value passed as argument `#0` to `Intent Intent.setData(Uri)` with kind `CreateIntent`. 
  188.   
  189.       Intent newIntent1 = new Intent();
  190. >     newIntent1.setData(Uri.parse(extra)); // should report
  191.       Intent newIntent2 = new Intent();
  192.       newIntent2.setData(Uri.parse(extra)); // should report

#257
codetoanalyze/java/pulse/taint/Intents.java:192: error: Taint Error
  Untrusted Android Intent creation. `Uri Uri.parse(String)` is tainted by value returned from `String Intent.getStringExtra(String)` with kind `Intent` and flows to value passed as argument `#0` to `Intent Intent.setData(Uri)` with kind `CreateIntent`. 
  190.       newIntent1.setData(Uri.parse(extra)); // should report
  191.       Intent newIntent2 = new Intent();
  192. >     newIntent2.setData(Uri.parse(extra)); // should report
  193.     }
  194.   

#258
codetoanalyze/java/pulse/taint/Intents.java:201: error: Taint Error
  Create Intent from URI. `newIntent` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  199.       Intent newIntent = new Intent();
  200.       newIntent.putExtra("foo", extra);
  201. >     mActivity.startActivity(newIntent);
  202.     }
  203.   

#259
codetoanalyze/java/pulse/taint/Intents.java:226: error: Taint Error
  Create Intent from URI. Value is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  224.   
  225.     void startWithUri1Bad(Uri uri) {
  226. >     mActivity.startActivity(new Intent("action", uri));
  227.     }
  228.   

#260
codetoanalyze/java/pulse/taint/Intents.java:230: error: Taint Error
  Create Intent from URI. Value is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri,Context,Class)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  228.   
  229.     void startWithUri2Bad(Uri uri) {
  230. >     mActivity.startActivity(new Intent("action", uri, mActivity, MyActivity.class));
  231.     }
  232.   }

#261
codetoanalyze/java/pulse/taint/Interprocedural.java:34: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object Interprocedural.returnSourceDirect()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  32.   
  33.     public static void returnSourceDirectBad() {
  34. >     InferTaint.inferSensitiveSink(returnSourceDirect());
  35.     }
  36.   

#262
codetoanalyze/java/pulse/taint/Interprocedural.java:39: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  37.     public static void returnSourceDirectViaVarBad() {
  38.       Object source = returnSourceDirect();
  39. >     InferTaint.inferSensitiveSink(source);
  40.     }
  41.   

#263
codetoanalyze/java/pulse/taint/Interprocedural.java:43: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object Interprocedural.returnSourceIndirect()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  41.   
  42.     public static void returnSourceIndirectBad() {
  43. >     InferTaint.inferSensitiveSink(returnSourceIndirect());
  44.     }
  45.   

#264
codetoanalyze/java/pulse/taint/Interprocedural.java:53: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Interprocedural$Obj Interprocedural.returnSourceViaField().f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  51.   
  52.     public static void returnSourceViaFieldBad() {
  53. >     InferTaint.inferSensitiveSink(returnSourceViaField().f);
  54.     }
  55.   

#265
codetoanalyze/java/pulse/taint/Interprocedural.java:62: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  60.     public static void returnSourceViaParameter1Bad(Obj o) {
  61.       returnSourceViaParameter1(o);
  62. >     InferTaint.inferSensitiveSink(o.f);
  63.     }
  64.   

#266
codetoanalyze/java/pulse/taint/Interprocedural.java:72: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o2->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  70.       o1.f = InferTaint.inferSecretSource();
  71.       returnSourceViaParameter2(o1, o2);
  72. >     InferTaint.inferSensitiveSink(o2.f);
  73.     }
  74.   

#267
codetoanalyze/java/pulse/taint/Interprocedural.java:87: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `#GB<>$codetoanalyze.java.pulse.Interprocedural.sGlobal` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  85.     public void returnSourceViaGlobalBad() {
  86.       returnSourceViaGlobal();
  87. >     InferTaint.inferSensitiveSink(sGlobal);
  88.     }
  89.   

#268
codetoanalyze/java/pulse/taint/Interprocedural.java:102: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  100.   
  101.     public static void callSinkParam1Bad() {
  102. >     callSinkParam1(InferTaint.inferSecretSource(), null);
  103.     }
  104.   

#269
codetoanalyze/java/pulse/taint/Interprocedural.java:114: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  112.   
  113.     public static void callSinkParam2Bad() {
  114. >     callSinkParam2(null, InferTaint.inferSecretSource());
  115.     }
  116.   

#270
codetoanalyze/java/pulse/taint/Interprocedural.java:127: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `this->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  125.     public void callSinkOnFieldDirectBad() {
  126.       this.f = InferTaint.inferSecretSource();
  127. >     callSinkOnFieldDirect();
  128.     }
  129.   

#271
codetoanalyze/java/pulse/taint/Interprocedural.java:137: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `obj->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  135.       Obj obj = new Obj();
  136.       obj.f = InferTaint.inferSecretSource();
  137. >     callSinkOnFieldIndirect(obj);
  138.     }
  139.   

#272
codetoanalyze/java/pulse/taint/Interprocedural.java:151: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `this->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  149.     void callSinkOnLocalBad() {
  150.       this.f = InferTaint.inferSecretSource();
  151. >     callSinkOnLocal();
  152.     }
  153.   

#273
codetoanalyze/java/pulse/taint/Interprocedural.java:160: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `#GB<>$codetoanalyze.java.pulse.Interprocedural.sGlobal` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  158.     public static void callSinkOnGlobalBad() {
  159.       sGlobal = InferTaint.inferSecretSource();
  160. >     callSinkOnGlobal();
  161.     }
  162.   

#274
codetoanalyze/java/pulse/taint/Interprocedural.java:175: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `#GB<>$codetoanalyze.java.pulse.Interprocedural.sGlobal` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  173.     public static void setGlobalThenCallSinkBad() {
  174.       setGlobal(InferTaint.inferSecretSource());
  175. >     callSinkOnGlobal();
  176.     }
  177.   

#275
codetoanalyze/java/pulse/taint/Interprocedural.java:189: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `#GB<>$codetoanalyze.java.pulse.Interprocedural.sGlobal` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  187.     public static void getGlobalThenCallSinkBad() {
  188.       sGlobal = InferTaint.inferSecretSource();
  189. >     getGlobalThenCallSink();
  190.     }
  191.   

#276
codetoanalyze/java/pulse/taint/Interprocedural.java:195: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  193.     public void callSinkNoTripleReportBad() {
  194.       Object source = InferTaint.inferSecretSource();
  195. >     callSinkParam1(source, null);
  196.       callSinkParam2(null, source);
  197.     }

#277
codetoanalyze/java/pulse/taint/Interprocedural.java:196: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  194.       Object source = InferTaint.inferSecretSource();
  195.       callSinkParam1(source, null);
  196. >     callSinkParam2(null, source);
  197.     }
  198.   

#278
codetoanalyze/java/pulse/taint/Interprocedural.java:203: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  201.       Object source = InferTaint.inferSecretSource();
  202.       Object launderedSource = id(source);
  203. >     InferTaint.inferSensitiveSink(launderedSource);
  204.     }
  205.   

#279
codetoanalyze/java/pulse/taint/Interprocedural.java:210: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource2` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  208.       Object launderedSource1 = id(source);
  209.       Object launderedSource2 = id(launderedSource1);
  210. >     InferTaint.inferSensitiveSink(launderedSource2);
  211.     }
  212.   

#280
codetoanalyze/java/pulse/taint/Interprocedural.java:247: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `relevant` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  245.       Object source = InferTaint.inferSecretSource();
  246.       Object relevant = relevantPassthrough(source);
  247. >     InferTaint.inferSensitiveSink(relevant);
  248.       return irrelevantPassthrough(relevant);
  249.     }

#281
codetoanalyze/java/pulse/taint/Interprocedural.java:261: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `relevant` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  259.       Object source = returnSourceIrrelevantPassthrough(irrelevant);
  260.       Object relevant = relevantPassthrough(source);
  261. >     InferTaint.inferSensitiveSink(relevant);
  262.       return irrelevantPassthrough(source);
  263.     }

#282
codetoanalyze/java/pulse/taint/Interprocedural.java:275: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object Interprocedural.callSinkIrrelevantPassthrough(Object)` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  273.       Object source = InferTaint.inferSecretSource();
  274.       Object relevant = relevantPassthrough(source);
  275. >     callSinkIrrelevantPassthrough(relevant);
  276.       return irrelevantPassthrough(relevant);
  277.     }

#283
codetoanalyze/java/pulse/taint/Interprocedural.java:283: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object Interprocedural.callSinkIrrelevantPassthrough(Object)` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  281.       Object source = returnSourceIrrelevantPassthrough(irrelevant);
  282.       Object relevant = relevantPassthrough(source);
  283. >     callSinkIrrelevantPassthrough(relevant);
  284.       return irrelevantPassthrough(relevant);
  285.     }

#284
codetoanalyze/java/pulse/taint/Interprocedural.java:292: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. Value is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  290.   
  291.     public static void callSinkVariadicBad() {
  292. >     callSinkVariadic(null, null, InferTaint.inferSecretSource());
  293.     }
  294.   

#285
codetoanalyze/java/pulse/taint/Interprocedural.java:366: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  364.     public void callDeepSinkIndirectBad() {
  365.       Object source = InferTaint.inferSecretSource();
  366. >     callSinkIndirectOnParam(source);
  367.     }
  368.   

#286
codetoanalyze/java/pulse/taint/Interprocedural.java:377: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  375.     public void callDeepSink2Bad() {
  376.       Obj source = propagate(InferTaint.inferSecretSource());
  377. >     callSinkB(source);
  378.     }
  379.   

#287
codetoanalyze/java/pulse/taint/Interprocedural.java:382: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Interprocedural$Obj Interprocedural.id2(Interprocedural$Obj).f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  380.     void callShallowSinkBad(Obj o) {
  381.       o.f = InferTaint.inferSecretSource();
  382. >     InferTaint.inferSensitiveSink(id2(o).f);
  383.     }
  384.   

#288
codetoanalyze/java/pulse/taint/Interprocedural.java:387: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  385.     public void callDeepSink3Bad() {
  386.       Obj source = propagate(InferTaint.inferSecretSource());
  387. >     callSinkC(source);
  388.     }
  389.   

#289
codetoanalyze/java/pulse/taint/Interprocedural.java:392: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source->f` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  390.     public void callDeepSink4Bad() {
  391.       Obj source = propagate(InferTaint.inferSecretSource());
  392. >     callSinkD(source);
  393.     }
  394.   

#290
codetoanalyze/java/pulse/taint/InterproceduralInterfileTaint.java:12: error: Taint Error
  user data gets logged. `int InterproceduralInterfileUserInfo.getUserInfo(int)` is tainted by value returned from `int InterproceduralInterfileUser.getPhoneNumber()` with kind `UserData` and flows to value passed as argument `#0` to `void Logger.log(int)` with kind `Logger`. 
  10.   class InterprocedurlaInterfileTaint {
  11.     void taintedUserToLogBad() {
  12. >     InterproceduralInterfileLoggerWrapper.log(
  13.           InterproceduralInterfileUserInfo.getUserInfo(InterproceduralInterfileKind.PHONE));
  14.     }

#291
codetoanalyze/java/pulse/taint/Lambdas.java:28: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `function->arg1` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  26.     String createAndInvokeFunctionBad() {
  27.       Function<Integer, String> function = createFunctionWithTaintedParam();
  28. >     return invokeFunction(function);
  29.     }
  30.   

#292
codetoanalyze/java/pulse/taint/Lambdas.java:33: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `function->arg1` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  31.     String createAndInvokeFunctionBad2() {
  32.       Function<Integer, String> function = createFunctionWithTaintedParam();
  33. >     return function.apply(42);
  34.     }
  35.   

#293
codetoanalyze/java/pulse/taint/Lambdas.java:49: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `function->val$object` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  47.     String createAndInvokeFunctionFromAnonymousClassBad() {
  48.       Function<Integer, String> function = createFunctionFromAnonymousClassWithTaintedParam();
  49. >     return invokeFunction(function);
  50.     }
  51.   

#294
codetoanalyze/java/pulse/taint/Lambdas.java:54: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `function->val$object` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  52.     String createAndInvokeFunctionFromAnonymousClassBad2() {
  53.       Function<Integer, String> function = createFunctionFromAnonymousClassWithTaintedParam();
  54. >     return function.apply(42);
  55.     }
  56.   }

#295
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getDeviceId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#296
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getLine1Number()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#297
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSimSerialNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#298
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSubscriberId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#299
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getVoiceMailNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#300
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getAltitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#301
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLatitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#302
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLongitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#303
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getBearing()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#304
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:54: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getSpeed()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.e(String,String)` with kind `Logging`. 
  52.   
  53.       String TAG = "tag";
  54. >     Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);

#305
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getDeviceId()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#306
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getLine1Number()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#307
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSimSerialNumber()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#308
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSubscriberId()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#309
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getVoiceMailNumber()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#310
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getAltitude()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#311
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLatitude()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#312
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLongitude()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#313
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getBearing()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#314
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:55: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getSpeed()` with kind `PrivateData` and flows to value passed as argument `#2` to `int Log.println(int,String,String)` with kind `Logging`. 
  53.       String TAG = "tag";
  54.       Log.e(TAG, source);
  55. >     Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports

#315
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getDeviceId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#316
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getLine1Number()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#317
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSimSerialNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#318
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSubscriberId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#319
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getVoiceMailNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#320
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getAltitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#321
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLatitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#322
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLongitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#323
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getBearing()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#324
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:56: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getSpeed()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.w(String,String)` with kind `Logging`. 
  54.       Log.e(TAG, source);
  55.       Log.println(0, TAG, source);
  56. >     Log.w(TAG, source);
  57.       Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }

#325
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getDeviceId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#326
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getLine1Number()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#327
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSimSerialNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#328
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getSubscriberId()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#329
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `String TelephonyManager.getVoiceMailNumber()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#330
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getAltitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#331
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLatitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#332
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `double Location.getLongitude()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#333
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getBearing()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#334
codetoanalyze/java/pulse/taint/LoggingPrivateData.java:57: error: Taint Error
  Logging private data. `source` is tainted by value returned from `float Location.getSpeed()` with kind `PrivateData` and flows to value passed as argument `#1` to `int Log.wtf(String,String)` with kind `Logging`. 
  55.       Log.println(0, TAG, source);
  56.       Log.w(TAG, source);
  57. >     Log.wtf(TAG, source); // 10 sources * 4 sinks = 40 expected reports
  58.     }
  59.   }

#335
codetoanalyze/java/pulse/taint/MapExamples.java:33: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `(*map)->__infer_model_backing_collection_empty` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  31.         if (whatever != null) value = whatever[0];
  32.       }
  33. >     InferTaint.inferSensitiveSink(value);
  34.     }
  35.   

#336
codetoanalyze/java/pulse/taint/MapExamples.java:48: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `value` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  46.         if (whatever != null) value = whatever[0];
  47.       }
  48. >     wrapper(value);
  49.     }
  50.   

#337
codetoanalyze/java/pulse/taint/Recursion.java:22: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  20.   
  21.     public static void callSinkThenDivergeBad() {
  22. >     callSinkThenDiverge(InferTaint.inferSecretSource());
  23.     }
  24.   

#338
codetoanalyze/java/pulse/taint/Recursion.java:32: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  30.   
  31.     public static void safeRecursionCallSinkBad() {
  32. >     safeRecursionCallSink(5, InferTaint.inferSecretSource());
  33.     }
  34.   

#339
codetoanalyze/java/pulse/taint/Serialization.java:20: error: Taint Error
  Untrusted deserialization. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `ObjectInputStream.<init>(InputStream)` with kind `Deserialization`. 
  18.     Object taintedObjectInputStreamBad() throws IOException, ClassNotFoundException {
  19.       Object source = InferTaint.inferSecretSource();
  20. >     ObjectInputStream stream = new ObjectInputStream((InputStream) source); // report here
  21.       return stream.readObject();
  22.     }

#340
codetoanalyze/java/pulse/taint/Services.java:42: error: Taint Error
  Shell Injection risk. `s` is tainted by value passed as argument `#0` to `void Service1.serviceMethodBad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `Process Runtime.exec(String)` with kind `ShellExec`. 
  40.     @Override
  41.     public void serviceMethodBad(String s) throws IOException {
  42. >     Runtime.getRuntime().exec(s); // RCE if s is tainted, we should warn
  43.     }
  44.   

#341
codetoanalyze/java/pulse/taint/Services.java:49: error: Taint Error
  SQL injection risk. `s` is tainted by value passed as argument `#0` to `void Service1.paramToSql1Bad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `boolean Statement.execute(String)` with kind `SQLInjection`. 
  47.     @Override
  48.     public void paramToSql1Bad(String s) throws SQLException {
  49. >     mStatement.execute(s);
  50.     }
  51.   

#342
codetoanalyze/java/pulse/taint/Services.java:54: error: Taint Error
  User-controlled SQL risk. `s` is tainted by value passed as argument `#0` to `void Service1.paramToSql2Bad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `long Statement.executeLargeUpdate(String)` with kind `SQLWrite`. 
  52.     @Override
  53.     public void paramToSql2Bad(String s) throws SQLException {
  54. >     mStatement.executeLargeUpdate(s);
  55.     }
  56.   

#343
codetoanalyze/java/pulse/taint/Services.java:59: error: Taint Error
  User-controlled SQL risk. `s` is tainted by value passed as argument `#0` to `void Service1.paramToSql3Bad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `ResultSet Statement.executeQuery(String)` with kind `SQLRead`. 
  57.     @Override
  58.     public void paramToSql3Bad(String s) throws SQLException {
  59. >     mStatement.executeQuery(s);
  60.     }
  61.   

#344
codetoanalyze/java/pulse/taint/Services.java:64: error: Taint Error
  User-controlled SQL risk. `s` is tainted by value passed as argument `#0` to `void Service1.paramToSql4Bad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `int Statement.executeUpdate(String)` with kind `SQLWrite`. 
  62.     @Override
  63.     public void paramToSql4Bad(String s) throws SQLException {
  64. >     mStatement.executeUpdate(s);
  65.     }
  66.   

#345
codetoanalyze/java/pulse/taint/Services.java:69: error: Taint Error
  SQL injection risk. `s` is tainted by value passed as argument `#0` to `void Service1.paramToSql5Bad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `void Statement.addBatch(String)` with kind `SQLInjection`. 
  67.     @Override
  68.     public void paramToSql5Bad(String s) throws SQLException {
  69. >     mStatement.addBatch(s);
  70.       mStatement.executeBatch();
  71.     }

#346
codetoanalyze/java/pulse/taint/Services.java:75: error: Taint Error
  Shell Injection risk. `s` is tainted by value passed as argument `#0` to `void Service1.packageProtectedServiceMethodBad(String)` with kind `Endpoint` and flows to value passed as argument `#0` to `Process Runtime.exec(String)` with kind `ShellExec`. 
  73.     @Override
  74.     public void packageProtectedServiceMethodBad(String s) throws IOException {
  75. >     Runtime.getRuntime().exec(s);
  76.     }
  77.   

#347
codetoanalyze/java/pulse/taint/Streams.java:19: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `byte[] Streams.read(byte[])` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  17.     void copyBad() throws IOException {
  18.       InputStream tainted = (InputStream) InferTaint.inferSecretSource();
  19. >     InferTaint.inferSensitiveSink(read(tainted.toString().getBytes()));
  20.     }
  21.   

#348
codetoanalyze/java/pulse/taint/Strings.java:20: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String StringBuilder.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  18.     void viaStringBuilderSugarBad() {
  19.       Object source = InferTaint.inferSecretSource();
  20. >     InferTaint.inferSensitiveSink(source + "");
  21.     }
  22.   

#349
codetoanalyze/java/pulse/taint/Strings.java:26: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String StringBuilder.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  24.       Object source = InferTaint.inferSecretSource();
  25.       StringBuilder builder = new StringBuilder();
  26. >     InferTaint.inferSensitiveSink(builder.append(source).append("").toString());
  27.     }
  28.   

#350
codetoanalyze/java/pulse/taint/Strings.java:34: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String StringBuilder.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  32.       // builder should be tainted after this call even though we ignore the return value
  33.       builder.append(source);
  34. >     InferTaint.inferSensitiveSink(builder.toString());
  35.     }
  36.   

#351
codetoanalyze/java/pulse/taint/Strings.java:40: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String StringBuffer.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  38.       Object source = InferTaint.inferSecretSource();
  39.       StringBuffer buffer = new StringBuffer();
  40. >     InferTaint.inferSensitiveSink(buffer.append("").append(source).toString());
  41.     }
  42.   

#352
codetoanalyze/java/pulse/taint/Strings.java:47: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String StringBuffer.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  45.       StringBuffer buffer = new StringBuffer();
  46.       buffer.append(source);
  47. >     InferTaint.inferSensitiveSink(buffer.toString());
  48.     }
  49.   

#353
codetoanalyze/java/pulse/taint/Strings.java:53: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String Formatter.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  51.       Object source = InferTaint.inferSecretSource();
  52.       Formatter formatter = new Formatter();
  53. >     InferTaint.inferSensitiveSink(formatter.format("%s", source).toString());
  54.     }
  55.   

#354
codetoanalyze/java/pulse/taint/Strings.java:60: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String Formatter.toString()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  58.       Formatter formatter = new Formatter();
  59.       formatter.format("%s", source);
  60. >     InferTaint.inferSensitiveSink(formatter.toString());
  61.     }
  62.   

#355
codetoanalyze/java/pulse/taint/Strings.java:66: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  64.       Object source = InferTaint.inferSecretSource();
  65.       String tainted = String.format("%s%s", "hi", source);
  66. >     InferTaint.inferSensitiveSink(tainted);
  67.     }
  68.   

#356
codetoanalyze/java/pulse/taint/Strings.java:75: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  73.   
  74.     void viaStringFormatVarArgsIndirectBad() {
  75. >     viaStringFormatVarArgsIndirect(InferTaint.inferSecretSource());
  76.     }
  77.   }

#357
codetoanalyze/java/pulse/taint/TaintExample.java:104: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  102.     public void simpleTaintErrorWithModelMethods() {
  103.       Object o = InferTaint.inferSecretSource();
  104. >     InferTaint.inferSensitiveSink(o);
  105.     }
  106.   

#358
codetoanalyze/java/pulse/taint/TaintExample.java:116: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object TaintExample.returnTaintedSourceModelMethods()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  114.   
  115.     public void interprocTaintErrorWithModelMethods1() {
  116. >     InferTaint.inferSensitiveSink(returnTaintedSourceModelMethods());
  117.     }
  118.   

#359
codetoanalyze/java/pulse/taint/TaintExample.java:120: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  118.   
  119.     public void interprocTaintErrorWithModelMethods2() {
  120. >     callSinkMethodModelMethods(InferTaint.inferSecretSource());
  121.     }
  122.   

#360
codetoanalyze/java/pulse/taint/TaintExample.java:124: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object TaintExample.returnTaintedSourceModelMethods()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  122.   
  123.     public void interprocTaintErrorWithModelMethods3() {
  124. >     callSinkMethodModelMethods(returnTaintedSourceModelMethods());
  125.     }
  126.   

#361
codetoanalyze/java/pulse/taint/TaintExample.java:129: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `o` is tainted by value returned from `Object InferTaint.inferSecretSourceUndefined()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSinkUndefined(Object)` with kind `Simple`. 
  127.     public void simpleTaintErrorWithModelMethodsUndefined() {
  128.       Object o = InferTaint.inferSecretSourceUndefined();
  129. >     InferTaint.inferSensitiveSinkUndefined(o);
  130.     }
  131.   

#362
codetoanalyze/java/pulse/taint/TaintExample.java:141: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object TaintExample.returnTaintedSourceModelMethodsUndefined()` is tainted by value returned from `Object InferTaint.inferSecretSourceUndefined()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSinkUndefined(Object)` with kind `Simple`. 
  139.   
  140.     public void interprocTaintErrorWithModelMethodsUndefined1() {
  141. >     InferTaint.inferSensitiveSinkUndefined(returnTaintedSourceModelMethodsUndefined());
  142.     }
  143.   

#363
codetoanalyze/java/pulse/taint/TaintExample.java:145: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSourceUndefined()` is tainted by value returned from `Object InferTaint.inferSecretSourceUndefined()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSinkUndefined(Object)` with kind `Simple`. 
  143.   
  144.     public void interprocTaintErrorWithModelMethodsUndefined2() {
  145. >     callSinkMethodModelMethodsUndefined(InferTaint.inferSecretSourceUndefined());
  146.     }
  147.   

#364
codetoanalyze/java/pulse/taint/TaintExample.java:149: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object TaintExample.returnTaintedSourceModelMethodsUndefined()` is tainted by value returned from `Object InferTaint.inferSecretSourceUndefined()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSinkUndefined(Object)` with kind `Simple`. 
  147.   
  148.     public void interprocTaintErrorWithModelMethodsUndefined3() {
  149. >     callSinkMethodModelMethodsUndefined(returnTaintedSourceModelMethodsUndefined());
  150.     }
  151.   

#365
codetoanalyze/java/pulse/taint/TaintMatchers.java:16: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaintSinks.sink1(Object)` with kind `Simple`. 
  14.     void taintedBasedOnClassNameRegexBad() {
  15.       Object src = InferTaint.inferSecretSource();
  16. >     InferTaintSinks.sink1(src);
  17.       InferTaintSinks.sink2(src);
  18.     }

#366
codetoanalyze/java/pulse/taint/TaintMatchers.java:17: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `src` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaintSinks.sink2(Object)` with kind `Simple`. 
  15.       Object src = InferTaint.inferSecretSource();
  16.       InferTaintSinks.sink1(src);
  17. >     InferTaintSinks.sink2(src);
  18.     }
  19.   

#367
codetoanalyze/java/pulse/taint/TaintMatchers.java:29: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `String InferBaseSource.inferBaseSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  27.       InferChildSource ics = new InferChildSource();
  28.       Object source = ics.inferBaseSecretSource();
  29. >     InferTaint.inferSensitiveSink(source);
  30.     }
  31.   

#368
codetoanalyze/java/pulse/taint/TaintMatchers.java:41: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `String InferChildSource.inferChildSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  39.       InferChildSource ics = new InferChildSource();
  40.       Object source = ics.inferChildSecretSource();
  41. >     InferTaint.inferSensitiveSink(source);
  42.     }
  43.   

#369
codetoanalyze/java/pulse/taint/TaintedFormals.java:29: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `taintedFormal1` is tainted by value passed as argument `#0` to `void TaintedFormals.taintedContextBad(String,Intent,Integer)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  27.     public void taintedContextBad(
  28.         String taintedFormal1, Intent untaintedFormal, Integer taintedFormal2) {
  29. >     InferTaint.inferSensitiveSink(taintedFormal1); // should report here
  30.       InferTaint.inferSensitiveSink(taintedFormal2); // should report here
  31.       callSink(taintedFormal1); // should report here

#370
codetoanalyze/java/pulse/taint/TaintedFormals.java:30: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `taintedFormal2` is tainted by value passed as argument `#2` to `void TaintedFormals.taintedContextBad(String,Intent,Integer)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  28.         String taintedFormal1, Intent untaintedFormal, Integer taintedFormal2) {
  29.       InferTaint.inferSensitiveSink(taintedFormal1); // should report here
  30. >     InferTaint.inferSensitiveSink(taintedFormal2); // should report here
  31.       callSink(taintedFormal1); // should report here
  32.       callSink(taintedFormal2); // should report here

#371
codetoanalyze/java/pulse/taint/TaintedFormals.java:31: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `taintedFormal1` is tainted by value passed as argument `#0` to `void TaintedFormals.taintedContextBad(String,Intent,Integer)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  29.       InferTaint.inferSensitiveSink(taintedFormal1); // should report here
  30.       InferTaint.inferSensitiveSink(taintedFormal2); // should report here
  31. >     callSink(taintedFormal1); // should report here
  32.       callSink(taintedFormal2); // should report here
  33.   

#372
codetoanalyze/java/pulse/taint/TaintedFormals.java:32: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `taintedFormal2` is tainted by value passed as argument `#2` to `void TaintedFormals.taintedContextBad(String,Intent,Integer)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  30.       InferTaint.inferSensitiveSink(taintedFormal2); // should report here
  31.       callSink(taintedFormal1); // should report here
  32. >     callSink(taintedFormal2); // should report here
  33.   
  34.       // using different sink to avoid confusion with the above

#373
codetoanalyze/java/pulse/taint/TaintedFormals.java:44: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value passed as argument `#0` to `Object TaintedFormals.taintedContextBad(String)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  42.     public void callTaintedContextBad1(String formal) {
  43.       Object tainted = taintedContextBad(formal);
  44. >     InferTaint.inferSensitiveSink(tainted);
  45.     }
  46.   

#374
codetoanalyze/java/pulse/taint/TaintedFormals.java:49: error: Taint Error
  Create Intent from URI. `intent` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `ComponentName ContextWrapper.startService(Intent)` with kind `StartComponent`. 
  47.     public void callTaintedContextBad2() throws URISyntaxException {
  48.       Intent intent = Intent.parseUri("", 0);
  49. >     taintedContextBad(null, intent, null);
  50.     }
  51.   

#375
codetoanalyze/java/pulse/taint/TaintedFormals.java:64: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value passed as argument `#0` to `void TaintedFormals.firstParameterTainted(Object,Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  62.     void firstParameterTainted(Object tainted, Object notTainted) {
  63.       // should be tainted
  64. >     InferTaint.inferSensitiveSink(tainted);
  65.       // should not be tainted
  66.       InferTaint.inferSensitiveSink(notTainted);

#376
codetoanalyze/java/pulse/taint/TaintedFormals.java:74: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `result` is tainted by value passed as argument `#0` to `void TaintedFormals$1.onCompletion(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  72.             // result parameter is tainted based on the config
  73.             public void onCompletion(Object result) {
  74. >             InferTaint.inferSensitiveSink(result);
  75.             }
  76.           });

#377
codetoanalyze/java/pulse/taint/TaintedFormals.java:80: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. Value is tainted by value passed as argument `#0` to `void TaintedFormals$Lambda$_8_0.onCompletion(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  78.   
  79.     void callbackLambdaTaintedBad() {
  80. >     InferTaint.addCallback(
  81.           // result parameter is tainted based on the config
  82.           result -> {

#378
codetoanalyze/java/pulse/taint/TaintedFormals.java:89: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value passed as argument `#0` to `TaintedFormals.<init>(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  87.     // first parameter of constructor is tainted
  88.     TaintedFormals(Object tainted) {
  89. >     InferTaint.inferSensitiveSink(tainted);
  90.     }
  91.   

#379
codetoanalyze/java/pulse/taint/TaintedFormals.java:93: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value passed as argument `#0` to `void TaintedFormals.staticFirstParameterTainted(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  91.   
  92.     static void staticFirstParameterTainted(Object tainted) {
  93. >     InferTaint.inferSensitiveSink(tainted);
  94.     }
  95.   

#380
codetoanalyze/java/pulse/taint/TaintedFormals.java:97: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `tainted` is tainted by value passed as argument `#0` to `void TaintedFormals.instanceFirstParameterTainted(Object)` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  95.   
  96.     void instanceFirstParameterTainted(Object tainted) {
  97. >     InferTaint.inferSensitiveSink(tainted);
  98.     }
  99.   }

#381
codetoanalyze/java/pulse/taint/TaintedThis.java:14: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `this->field` is tainted by this/self reference `void TaintedThis.taintThisBad()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  12.   
  13.     void taintThisBad() {
  14. >     InferTaint.inferSensitiveSink(field);
  15.     }
  16.   

#382
codetoanalyze/java/pulse/taint/Traces.java:13: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `source` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  11.     void sourceMethodBad() {
  12.       Obj source = (Obj) InferTaint.inferSecretSource();
  13. >     callSameSink(null, source, null, null);
  14.     }
  15.   

#383
codetoanalyze/java/pulse/taint/UnknownCode.java:28: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `unknownConstructor` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  26.       // we don't analyze the code for the core Java libraries, so this constructor will be unknown
  27.       String unknownConstructor = new String(source);
  28. >     InferTaint.inferSensitiveSink(unknownConstructor);
  29.     }
  30.   

#384
codetoanalyze/java/pulse/taint/UnknownCode.java:48: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `i` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  46.       // we don't analyze the source code for Android, so this will be unknown
  47.       i.writeToParcel((Parcel) source, 0);
  48. >     InferTaint.inferSensitiveSink(i);
  49.     }
  50.   

#385
codetoanalyze/java/pulse/taint/UnknownCode.java:57: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `buffer` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  55.       // even though "" is not tainted, buffer and alias should still be tainted
  56.       StringBuffer alias = buffer.append("");
  57. >     InferTaint.inferSensitiveSink(buffer); // should report
  58.       InferTaint.inferSensitiveSink(alias); // should report
  59.     }

#386
codetoanalyze/java/pulse/taint/UnknownCode.java:58: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `alias` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  56.       StringBuffer alias = buffer.append("");
  57.       InferTaint.inferSensitiveSink(buffer); // should report
  58. >     InferTaint.inferSensitiveSink(alias); // should report
  59.     }
  60.   

#387
codetoanalyze/java/pulse/taint/UnknownCode.java:68: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  66.   
  67.     void callPropagateFootprintBad() {
  68. >     propagateFootprint((String) InferTaint.inferSecretSource());
  69.     }
  70.   

#388
codetoanalyze/java/pulse/taint/UnknownCode.java:82: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `String UnknownCode.propagateTaint(String)` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  80.     void callPropagateThenPropagateFootprintBad() {
  81.       String source = (String) InferTaint.inferSecretSource();
  82. >     propagateFootprint(propagateTaint(source));
  83.     }
  84.   

#389
codetoanalyze/java/pulse/taint/UnknownCode.java:88: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  86.       Object source = InferTaint.inferSecretSource();
  87.       Object launderedSource = i.interfaceMethod(source);
  88. >     InferTaint.inferSensitiveSink(launderedSource);
  89.     }
  90.   

#390
codetoanalyze/java/pulse/taint/UnknownCode.java:94: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
  92.       Object source = InferTaint.inferSecretSource();
  93.       Object launderedSource = nativeMethod(source);
  94. >     InferTaint.inferSensitiveSink(launderedSource);
  95.     }
  96.   

#391
codetoanalyze/java/pulse/taint/UnknownCode.java:100: error: Taint Error
  Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way. `launderedSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `Simple` and flows to value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`. 
   98.       Object source = InferTaint.inferSecretSource();
   99.       Object launderedSource = nativeMethod(source);
  100. >     InferTaint.inferSensitiveSink(launderedSource);
  101.     }
  102.   }

#392
codetoanalyze/java/pulse/taint/UserControlledStrings.java:22: error: Taint Error
  Cross-site scripting. `String CharSequence.toString()` is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Spanned Html.fromHtml(String)` with kind `HTML`. 
  20.   
  21.     Spanned clipboardToHtmlBad() {
  22. >     return Html.fromHtml(clipboard.getText().toString());
  23.     }
  24.   

#393
codetoanalyze/java/pulse/taint/UserControlledStrings.java:28: error: Taint Error
  Cross-site scripting. `String Object.toString()` is tainted by value returned from `Editable EditText.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Spanned Html.fromHtml(String)` with kind `HTML`. 
  26.   
  27.     Spanned editTextToHtmlBad() {
  28. >     return Html.fromHtml(mEditText.getText().toString());
  29.     }
  30.   

#394
codetoanalyze/java/pulse/taint/UserControlledStrings.java:32: error: Taint Error
  Shell Injection. `String CharSequence.toString()` is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Process Runtime.exec(String)` with kind `ShellExec`. 
  30.   
  31.     void clipboardToShellDirectBad() throws IOException {
  32. >     Runtime.getRuntime().exec(clipboard.getText().toString());
  33.     }
  34.   

#395
codetoanalyze/java/pulse/taint/UserControlledStrings.java:37: error: Taint Error
  Shell Injection. `cmds` is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `Process Runtime.exec(String[])` with kind `ShellExec`. 
  35.     void clipboardToShellArrayBad() throws IOException {
  36.       String[] cmds = new String[] {"ls", clipboard.getText().toString()};
  37. >     Runtime.getRuntime().exec(cmds);
  38.     }
  39.   

#396
codetoanalyze/java/pulse/taint/UserControlledStrings.java:41: error: Taint Error
  Shell Injection. Value is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `ProcessBuilder.<init>(String[])` with kind `ShellExec`. 
  39.   
  40.     ProcessBuilder clipboardToProcessBuilder1Bad() {
  41. >     return new ProcessBuilder(clipboard.getText().toString());
  42.     }
  43.   

#397
codetoanalyze/java/pulse/taint/UserControlledStrings.java:45: error: Taint Error
  Shell Injection. Value is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `ProcessBuilder.<init>(String[])` with kind `ShellExec`. 
  43.   
  44.     ProcessBuilder clipboardToProcessBuilder2Bad() {
  45. >     return new ProcessBuilder("sh", clipboard.getText().toString());
  46.     }
  47.   

#398
codetoanalyze/java/pulse/taint/UserControlledStrings.java:49: error: Taint Error
  Shell Injection. Value is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `ProcessBuilder ProcessBuilder.command(String[])` with kind `ShellExec`. 
  47.   
  48.     ProcessBuilder clipboardToProcessBuilder3Bad(ProcessBuilder builder) {
  49. >     return builder.command(clipboard.getText().toString());
  50.     }
  51.   

#399
codetoanalyze/java/pulse/taint/UserControlledStrings.java:55: error: Taint Error
  Shell Injection. `String CharSequence.toString()` is tainted by value returned from `CharSequence ClipboardManager.getText()` with kind `UserControlledString` and flows to value passed as argument `#0` to `ProcessBuilder ProcessBuilder.command(List)` with kind `ShellExec`. 
  53.       List<String> cmds = new ArrayList();
  54.       cmds.add(clipboard.getText().toString());
  55. >     return builder.command(cmds);
  56.     }
  57.   }

#400
codetoanalyze/java/pulse/taint/WebViews.java:30: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void WebView.evaluateJavascript(String,ValueCallback)` with kind `JavaScript`. 
  28.       String stringSource = (String) InferTaint.inferSecretSource();
  29.   
  30. >     webview.evaluateJavascript(stringSource, null);
  31.       webview.loadData(stringSource, "", "");
  32.       webview.loadDataWithBaseURL("", stringSource, "", "", "");

#401
codetoanalyze/java/pulse/taint/WebViews.java:31: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void WebView.loadData(String,String,String)` with kind `JavaScript`. 
  29.   
  30.       webview.evaluateJavascript(stringSource, null);
  31. >     webview.loadData(stringSource, "", "");
  32.       webview.loadDataWithBaseURL("", stringSource, "", "", "");
  33.       webview.loadUrl(stringSource);

#402
codetoanalyze/java/pulse/taint/WebViews.java:32: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#1` to `void WebView.loadDataWithBaseURL(String,String,String,String,String)` with kind `JavaScript`. 
  30.       webview.evaluateJavascript(stringSource, null);
  31.       webview.loadData(stringSource, "", "");
  32. >     webview.loadDataWithBaseURL("", stringSource, "", "", "");
  33.       webview.loadUrl(stringSource);
  34.       webview.postUrl(stringSource, null);

#403
codetoanalyze/java/pulse/taint/WebViews.java:33: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void WebView.loadUrl(String)` with kind `JavaScript`. 
  31.       webview.loadData(stringSource, "", "");
  32.       webview.loadDataWithBaseURL("", stringSource, "", "", "");
  33. >     webview.loadUrl(stringSource);
  34.       webview.postUrl(stringSource, null);
  35.       webview.postWebMessage(null, (Uri) InferTaint.inferSecretSource());

#404
codetoanalyze/java/pulse/taint/WebViews.java:34: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void WebView.postUrl(String,byte[])` with kind `JavaScript`. 
  32.       webview.loadDataWithBaseURL("", stringSource, "", "", "");
  33.       webview.loadUrl(stringSource);
  34. >     webview.postUrl(stringSource, null);
  35.       webview.postWebMessage(null, (Uri) InferTaint.inferSecretSource());
  36.     }

#405
codetoanalyze/java/pulse/taint/WebViews.java:35: error: Taint Error
  JavaScript injection. `Object InferTaint.inferSecretSource()` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#1` to `void WebView.postWebMessage(WebMessage,Uri)` with kind `JavaScript`. 
  33.       webview.loadUrl(stringSource);
  34.       webview.postUrl(stringSource, null);
  35. >     webview.postWebMessage(null, (Uri) InferTaint.inferSecretSource());
  36.     }
  37.   

#406
codetoanalyze/java/pulse/taint/WebViews.java:52: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `void WebViews$MyWebViewClient.onLoadResource(WebView,String)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  50.       public void onLoadResource(WebView w, String url) {
  51.         try {
  52. >         Intent i = Intent.parseUri(url, 0);
  53.           mActivity.startActivity(i); // should report
  54.         } catch (URISyntaxException e) {

#407
codetoanalyze/java/pulse/taint/WebViews.java:53: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  51.         try {
  52.           Intent i = Intent.parseUri(url, 0);
  53. >         mActivity.startActivity(i); // should report
  54.         } catch (URISyntaxException e) {
  55.         }

#408
codetoanalyze/java/pulse/taint/WebViews.java:60: error: Taint Error
  Create Intent from URI. Value is tainted by value passed as argument `#1` to `Intent.<init>(String,Uri)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  58.       @Override
  59.       public WebResourceResponse shouldInterceptRequest(WebView w, WebResourceRequest request) {
  60. >       mActivity.startActivity(new Intent("action", request.getUrl())); // should report
  61.         return null;
  62.       }

#409
codetoanalyze/java/pulse/taint/WebViews.java:65: error: Taint Error
  Untrusted file creation. `String Uri.getPath()` is tainted by value returned from `Uri WebResourceRequest.getUrl()` with kind `UserControlledURI` and flows to value passed as argument `#0` to `File.<init>(String)` with kind `CreateFile`. 
  63.   
  64.       File webResourceToFileBad(WebResourceRequest request) {
  65. >       return new File(request.getUrl().getPath());
  66.       }
  67.   

#410
codetoanalyze/java/pulse/taint/WebViews.java:71: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `boolean WebViews$MyWebViewClient.shouldOverrideUrlLoading(WebView,String)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  69.       public boolean shouldOverrideUrlLoading(WebView w, String url) {
  70.         try {
  71. >         Intent i = Intent.parseUri(url, 0);
  72.           mActivity.startActivity(i); // should report
  73.         } catch (URISyntaxException e) {

#411
codetoanalyze/java/pulse/taint/WebViews.java:72: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  70.         try {
  71.           Intent i = Intent.parseUri(url, 0);
  72. >         mActivity.startActivity(i); // should report
  73.         } catch (URISyntaxException e) {
  74.         }

#412
codetoanalyze/java/pulse/taint/WebViews.java:84: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `boolean WebViews$MyWebChromeClient.onJsAlert(WebView,String,String,JsResult)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  82.       public boolean onJsAlert(WebView w, String url, String message, JsResult result) {
  83.         try {
  84. >         Intent i = Intent.parseUri(url, 0);
  85.           mActivity.startActivity(i);
  86.         } catch (URISyntaxException e) {

#413
codetoanalyze/java/pulse/taint/WebViews.java:85: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  83.         try {
  84.           Intent i = Intent.parseUri(url, 0);
  85. >         mActivity.startActivity(i);
  86.         } catch (URISyntaxException e) {
  87.         }

#414
codetoanalyze/java/pulse/taint/WebViews.java:94: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `boolean WebViews$MyWebChromeClient.onJsBeforeUnload(WebView,String,String,JsResult)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  92.       public boolean onJsBeforeUnload(WebView w, String url, String m, JsResult result) {
  93.         try {
  94. >         Intent i = Intent.parseUri(url, 0);
  95.           mActivity.startActivity(i);
  96.         } catch (URISyntaxException e) {

#415
codetoanalyze/java/pulse/taint/WebViews.java:95: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  93.         try {
  94.           Intent i = Intent.parseUri(url, 0);
  95. >         mActivity.startActivity(i);
  96.         } catch (URISyntaxException e) {
  97.         }

#416
codetoanalyze/java/pulse/taint/WebViews.java:104: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `boolean WebViews$MyWebChromeClient.onJsConfirm(WebView,String,String,JsResult)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  102.       public boolean onJsConfirm(WebView w, String url, String m, JsResult result) {
  103.         try {
  104. >         Intent i = Intent.parseUri(url, 0);
  105.           mActivity.startActivity(i);
  106.         } catch (URISyntaxException e) {

#417
codetoanalyze/java/pulse/taint/WebViews.java:105: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  103.         try {
  104.           Intent i = Intent.parseUri(url, 0);
  105. >         mActivity.startActivity(i);
  106.         } catch (URISyntaxException e) {
  107.         }

#418
codetoanalyze/java/pulse/taint/WebViews.java:114: error: Taint Error
  Untrusted Android Intent creation. `url` is tainted by value passed as argument `#1` to `boolean WebViews$MyWebChromeClient.onJsPrompt(WebView,String,String,String,JsPromptResult)` with kind `UserControlledURI` and flows to value passed as argument `#0` to `Intent Intent.parseUri(String,int)` with kind `CreateIntent`. 
  112.       public boolean onJsPrompt(WebView w, String url, String m, String s, JsPromptResult result) {
  113.         try {
  114. >         Intent i = Intent.parseUri(url, 0);
  115.           mActivity.startActivity(i);
  116.         } catch (URISyntaxException e) {

#419
codetoanalyze/java/pulse/taint/WebViews.java:115: error: Taint Error
  Create Intent from URI. `i` is tainted by value returned from `Intent Intent.parseUri(String,int)` with kind `IntentFromURI` and flows to value passed as argument `#0` to `void Activity.startActivity(Intent)` with kind `StartComponent`. 
  113.         try {
  114.           Intent i = Intent.parseUri(url, 0);
  115. >         mActivity.startActivity(i);
  116.         } catch (URISyntaxException e) {
  117.         }

#420
codetoanalyze/java/pulse/taint/WebViews.java:124: error: Taint Error
  JavaScript injection. `stringSource` is tainted by value returned from `Object InferTaint.inferSecretSource()` with kind `UserControlledString` and flows to value passed as argument `#0` to `void WebView.evaluateJavascript(String,ValueCallback)` with kind `JavaScript`. 
  122.     void callWebviewSubclassSink(MyWebView webview) {
  123.       String stringSource = (String) InferTaint.inferSecretSource();
  124. >     webview.evaluateJavascript(stringSource, null);
  125.     }
  126.   

Found 421 issues
                Issue Type(ISSUED_TYPE_ID): #
                  Taint Error(TAINT_ERROR): 269
     Null Dereference(NULLPTR_DEREFERENCE): 89
  Pulse Resource Leak(PULSE_RESOURCE_LEAK): 63
